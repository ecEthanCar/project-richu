[
  {
    "objectID": "report.html#location",
    "href": "report.html#location",
    "title": "Analyzing Airbnb Data",
    "section": "Location",
    "text": "Location\nWe found that the median prices of listings are different in the five NYC boroughs. Naturally, we wanted to determine how much variability in listing prices does location account for. Fitting a linear regression between log(price) and borough, we produce the following equation:\n\n\n\n\\[\n\\begin{split}\n\\widehat{log(Airbnb~listing~price)} = 4.4947394 + 0.2206278\\times Brooklyn + 0.631\\times Manhattan\\\\+ 0.0288866 \\times Queens + 0.1409128 \\times Staten~Island\n\\end{split}\n\\]\nInterpreting the intercept, we predict that a listing that is located in the Bronx will have a price of around \\(e^{4.4947394} \\approx \\$89.54\\) per night.\nInterpreting the slopes:\n\nA listing in Brooklyn is expected to be \\(e^{0.2206278} \\approx \\$1.25\\) higher per night compared to one in the Bronx, on average.\nA listing in Manhattan is expected to be \\(e^{0.6314541} \\approx \\$1.88\\) higher per night compared to one in the Bronx, on average.\nA listing in Queens is expected to be \\(e^{0.0288866} \\approx \\$1.03\\) higher per night compared to one in the Bronx, on average.\nAnd, a listing on Staten Island is expected to be \\(e^{0.1409128} \\approx \\$1.15\\) higher per night compared to one in the Bronx, on average.\n\nIn addition, we see that the R2 value of this univariate linear regression model is 0.115. In other words, borough accounts for 11.5% of price variability. Because this is a low R2 value, we performed the same regression on neighborhoods (i.e. Chelsea, Midtown, Williamsburg, etc.) for increased categorical coefficients, expecting to capture more variability on a regional basis.\n\n\n\nDue to the 221 different coefficients within this regression, showing the equation for this regression seem unreasonable. However, we can report that this model has an R2 value of 0.253, which is expected.\nComparing the adjusted R2 values of both models, we can determine that the linear model considering neighborhoods is better for log(price) predictability. However, moving forward, we will use the variable for boroughs to account for the listing location as using neighborhood levels might cause overfitting."
  },
  {
    "objectID": "report.html#listing-characteristics",
    "href": "report.html#listing-characteristics",
    "title": "Analyzing Airbnb Data",
    "section": "Listing characteristics",
    "text": "Listing characteristics\n\nRoom type, number of bedrooms, and number of bathrooms\nAll data analysis on room type, number of bedrooms, and number of bathrooms can be found in the Appendix. However, to summarize:\n\nMost NYC Airbnb listings are “Entire home/apt” and “Private room” options. “Hotel room” is the priciest, followed by “Entire home/apt,” “Private room,” and “Shared room.”\nThe distribution of the number of bedrooms is heavily right-skewed: most NYC Airbnb listings have one or two bedrooms. Generally, prices rise with the number of bedrooms\nSimilarly, the distribution of the number of bathrooms is heavily right-skewed, with most having one bathroom. Generally, prices rise with the number of bathrooms.\n\n\n\n\n\n\n\n\n\n\nWe fitted univariate linear regression models with all three variables to see how much variability in price is explained by each variable.\n\n\n\n\n \n  \n    Characteristic \n    R-squared \n  \n \n\n  \n    Room type \n    0.330 \n  \n  \n    Number of bathrooms \n    0.276 \n  \n  \n    Number of bedrooms \n    0.155 \n  \n\n\n\n\n\nWe see that room type has the highest R2 value, which means it accounts for the most variability in price amongst the three listing characteristics. This suggests that room type might be one of the better variables to use to predict price - we will test this in our multivariate analysis.\n\n\nExtra amenities\nNext, we want to look into how amenities affect Airbnb prices. On this page, Airbnb Resource Center talks about some amenities guests look for, which include dining basics, coffee & tea, and cleaning supplies among others. We want to test whether having extra amenities impacts price. In our analysis, we include the following as “extras”: air conditioning, heating, dishes and silverware, cooking basics, microwave, coffee maker, washer, and dryer. We first visualize the proportion of listings that have all the extra amenities included.\n\n\n\n\n\n\n\n\n\nWe see that Staten Island and Brooklyn are the two boroughs with the highest proportion of listings that offer all the extra amenities. However, it is quite evident that the majority of listings do not have all the extras and that the distribution is quite similar between boroughs. In other words, any impact extra amenities have on price is likely to be borough-independent.\nTo figure out if having all the extra amenities make a difference in price, we first group the listings by whether or not they have all the extra amenities or not and calculate the mean prices of each group. See Appendix 2B.\nWe indeed see that listings that offer all the extra amenities have a median price of $175, while listings that do not offer all the extra amenities have a median price of $120. To confirm that this is statistically significant, we can do a hypothesis testing. We will set a threshold value of 0.05.\n\\(H_0:\\eta_{yes}-\\eta_{no}=0\\). The difference in the true median price of listings that offer all extra amenities and those that do not is zero.\n\\(H_A:\\eta_{yes}-\\eta_{no}>0\\). The difference in the true median price of listings that offer all extra amenities and those that do not is greater than zero.\n\n\n\nWe observe a p-value of 0, which is less than our threshold value of 0.05. As such, we reject the null hypothesis in favor of the alternative hypothesis: the data provide convincing evidence that the median price of listings that include all the extra amenities are higher than the median price of listings that do not.\nHow much higher of a price can a host expect if they include all the extra amenities? To figure this out, we can generate a 95% confidence interval to see how much of a price increase a host can expect if they were to include all the extra amenities.\n\n\n\nFrom our analysis, we are 95% confident that listings that include all the extra amenities will have median prices that are between $58 to $68 higher than those that do not include all the extra amenities. This is an important finding because it can help hosts increase their earnings by offering extra amenities.\nLet’s now run a linear regression between each amenity and price. By doing so, we can learn how much variability in price is explained by whether a listing has a certain amenity or not. We can also find out which amenities hosts should focus on having in their listings. See Appendix 2C for further analysis.\n\n\n\n\n\n\n\n \n  \n    Amenity \n    R-squared \n  \n \n\n  \n    Washer \n    0.04750 \n  \n  \n    Dryer \n    0.04640 \n  \n  \n    Air conditioning \n    0.02640 \n  \n  \n    Coffee maker \n    0.02640 \n  \n  \n    Cooking basics \n    0.01150 \n  \n  \n    Dishes and silverware \n    0.00806 \n  \n  \n    Microwave \n    0.00509 \n  \n  \n    Heating \n    0.00150 \n  \n\n\n\n\n\nWe see that the top two amenities by R2 value are washer and dryer. We can infer that these two amenities affect price the most out of the list of eight extra amenities we started with, irrespective of which borough the listing is located in. We will test this in our multivariate analysis.\n\n\nWork-from-home criteria\nUpon analyzing the most frequently mentioned amenities in Airbnb listings in New York City, we observed that “dedicated workspace” appears in the top 20 amenities, which led us to think that work-from-home setups may impact price. In addition to a dedicated workspace, there are several other important amenities that Airbnb guests may be looking for in a WFH setup, including reliable high-speed internet, comfortable seating and good lighting, and a quiet environment. To identify listings that are WFH-appropriate, we established three criteria: 1) there is Wifi, 2) there is a dedicated workspace, and 3) the listing must be located in a quiet environment.\n\n\n\n\n\n\n\n\n\nWe see that Staten Island and the Bronx are the two boroughs with the highest proportion of listings with all three criteria met. Otherwise, the distribution of proportions is quite similar between boroughs. In other words, any impact WFH amenities have on price is likely to be borough-independent.\nTo figure out if satisfying all the WFH criteria makes a difference in price, we first group the listings by whether or not they satisfy all WFH criteria or not and calculated the median prices of each group. See Appendix 2D.\nWe indeed see that listings that satisfy all WFH criteria have a median price of $130, while listings that do not offer all the extra amenities have a median price of $124. To confirm that this is statistically significant, we can do a hypothesis testing. We will set a threshold value of 0.05.\n\\(H_0:\\eta_{satisfed}-\\eta_{not~satisfed}=0\\). The difference in the true median price of listings that satisfy all WFH criteria and those that do not is zero.\n\\(H_A:\\eta_{satisfed}-\\eta_{not~satisfed}>0\\). The difference in the true median price of listings that satisfy all WFH criteria and those that do not is greater than zero.\n\n\n\nWe observe a p-value of 0.003, which is less than the threshold value of 0.05. As such, we reject the null hypothesis in favor of the alternative hypothesis: the data provide convincing evidence that the median price of listings that satisfy all WFH criteria is higher than the median price of listings that do not.\nWhat we can do next is to calculate a 95% confidence interval to see how much of a price increase a host can expect if they were to include satisfy all WFH criteria.\n\n\n\nFrom our analysis, we are 95% confident that listings that satisfy all WFH criteria will have median prices that are between $3 to $11 higher than those that do not include all the extra amenities. This might not be too significant because the price difference is relatively small and may not justify the additional cost and effort required for hosts to satisfy all the WFH criteria.\nLet’s now run a linear regression between each criterion and price. By doing so, we learn how much variability in price is explained by whether a listing satisfies a criterion. See Appendix 2E for further analysis.\n\n\n\n\n\n\n\n \n  \n    Criteria \n    R-squared \n  \n \n\n  \n    Dedicated workspace \n    0.01390 \n  \n  \n    Quiet environment \n    0.00177 \n  \n  \n    Wifi \n    0.00065 \n  \n\n\n\n\n\nWe see that the top criterion by R2 value is dedicated workspace and the lowest criterion by R2 is Wifi. One reason for this might be the fact that Wifi is no longer a luxury, but a necessity, and having Wifi is no longer a differentiating factor. We can infer that, if a host wants to prioritize satisfying a WFH criterion, having a dedicated workspace would be the one to prioritize as it affects price the most out of the list of three WFH criteria."
  },
  {
    "objectID": "report.html#host-characteristics",
    "href": "report.html#host-characteristics",
    "title": "Analyzing Airbnb Data",
    "section": "Host characteristics",
    "text": "Host characteristics\nAnother point of interest when looking at Airbnb data is to see how different characteristics of the host—i.e., if they are a super host, have their identity verified, their communication review rating, etc.— might influence price. We can start by isolating these host-adjacent variables and identify any trends that might exist. See Appendix 2F for further analysis.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe observe that nearly 24% of hosts are considered superhosts and 84% have their identity verified. In terms of review scores, nearly 95% of hosts have an accuracy rating between 4.0 and 5.0, 90% have a cleanliness review score between 4.0 and 5.0, 96% have a check-in review score between 4.0 and 5.0, and 96% have a communication review score between 4.0 and 5.0. As for a host’s response rate, about 65% of hosts reply within an hour.\nTo get a better analysis of how these trends might drive listing prices, we can fit linear regression models across these six characteristics—i.e., host_is_superhost, host_identity_verified, review_scores_cleanliness, review_scores_communication, host_response_time, and host_acceptance_rate— to predict price. We will fit these models against logged price as well. After fitting these models, we get the following R2 values:\n\n\n\n\n \n  \n    Characteristic \n    R-squared \n  \n \n\n  \n    Host acceptance rate \n    0.06000 \n  \n  \n    Review cleanliness rating \n    0.02290 \n  \n  \n    Superhost \n    0.01210 \n  \n  \n    Review communication rating \n    0.00448 \n  \n  \n    Identity is verified \n    0.00357 \n  \n  \n    Host response time \n    0.00129 \n  \n\n\n\n\n\nWith an R2 value of 6% for host_acceptance_rate and 2.3% for review_scores_cleanliness, we can try hypothesis testing to determine the magnitude of predictability of these variables against price.\nWe can now begin hypothesis testing. Because the R2 values from the linear regression models for most host characteristics were marginal, we will focus our analysis on the host_acceptance_rate and review_scores_cleanliness models. We should note, however, that R2 values solely do not provide total insight into the correlation between variables, but instead indicate the amount of variability explained.\nWe can begin our hypothesis testing with host_acceptance_rate. By doing so, we can understand if the price is greater, on average, for listings under hosts with an acceptance rate of less than 51%. To test statistical significance, we will set an threshold value of 0.05.\n\\(H_0:\\eta_{~acceptance~rate~<~.51}-\\eta_{~acceptance~rate~>~.5}=0\\). The median price of listings whose hosts have acceptance rates of less than 51% is the same as the median price of listings whose hosts have acceptance rates of greater than 50%.\n\\(H_A:\\eta_{~acceptance~rate~<~.51}-\\eta_{~acceptance~rate~>~.5}>0\\). The median price of listings whose hosts have acceptance rates of less than 51% is greater than the median price of listings whose hosts have acceptance rates of greater than 50%.\n\n\n\nWe observe a p-value of 0, which is less than the threshold value of 0.05. As such, we reject the null hypothesis in favor of the alternative hypothesis. The data suggest that the median price of listings under hosts with an acceptance rate of less than 51%, on average, is higher than that of hosts with an acceptance rate above 50%. There may be several reasons for this. One reason might be that hosts with lower acceptance rates may be more experienced and have a better understanding of the market, or have better quality listings, enabling them to set higher prices for their listings.\nUsing the same process, we can hypothesize the effect of review_scores_cleanliness on price. Namely, we want to see if the median price of listings for hosts with a cleanliness review score between 4.0 and 5.0 is higher than that of hosts with a review less than or equal to 4.0.\n\\(H_0:\\eta_{~cleanliness~review~>~4.0}-\\eta_{~cleanliness~review~≤~4.0}=0\\). The median price of listings whose hosts have cleanliness reviews greater than 4.0 is the same as the median price of listings whose hosts have cleanliness reviews less than 4.0.\n\\(H_A:\\eta_{~cleanliness~review~>~4.0}-\\eta_{~cleanliness~review~≤~4.0}>0\\). The median price of listings whose hosts have cleanliness reviews greater than 4.0 is greater than the median price of listings whose hosts have cleanliness reviews less than 4.0.\n\n\n\nSimilar to the first hypothesis testing, we also observe a p-value of 0, which is less than the set threshold value of 0.05. As such, we reject the null hypothesis in favor of the alternative hypothesis. The data indicate that the median price of listings for hosts with a cleanliness review score between 4.0 and 5.0 is higher than that of hosts with a review less than or equal to 4.0."
  },
  {
    "objectID": "report.html#fitting-a-multivariate-linear-regression-model",
    "href": "report.html#fitting-a-multivariate-linear-regression-model",
    "title": "Analyzing Airbnb Data",
    "section": "Fitting a multivariate linear regression model",
    "text": "Fitting a multivariate linear regression model\nWe have looked at 22 variables spanning three broad categories (i.e. location, listing characteristics, and host characteristics). We now want to fit a multivariate linear regression model and see how much variability in price can be accounted for. As previously mentioned, the listing prices are heavily right-skewed, and thus, the price will be logged when performing the linear regression fitting.\n\n\n\nFitting all 22 variables in a linear regression model to predict log(price), we observed an R2 value of 0.608. The R-squared value of 0.608 suggests that the linear regression model explains 60.8% of the variability in the log of price based on the 22 predictor variables included in the model. This high degree of explanation can be useful for predicting prices in many applications, highlighting the value of the chosen predictor variables."
  },
  {
    "objectID": "report.html#performing-backward-elimination",
    "href": "report.html#performing-backward-elimination",
    "title": "Analyzing Airbnb Data",
    "section": "Performing backward elimination",
    "text": "Performing backward elimination\nThe most complex model is not always the better choice. Hence, we decided to perform backward elimination on our multivariate linear regression model.\nBackward elimination is a feature selection technique where variables are iteratively removed from the full model based on their significance, starting with the least significant one (i.e. the variable with the highest p-value). The process continues until the model’s performance significantly degrades. This creates a final model with only the most significant predictors, making it easier to interpret, less complex, and less prone to overfitting. See Appendix 2I for the order of elimination.\n\n\n\n\n\n\n\n\n\nAs variables are eliminated from the model, adjusted R2 decreases, which is expected as it reduces the model’s complexity. However, the first 14 eliminations maintained a relatively stable adjusted R2, indicating that the 14 variables eliminated did not significantly impact the model’s performance. The fifteenth elimination had a significant impact on adjusted R2, indicating that the final eight variables are significant in defining the model.\nWe can then infer that the final eight variables, that being location, cleanliness score, microwave, washer, dryer, room type, number of bedrooms, and number of bathrooms, are most significant in predicting price. It is important to note that there are some limitations to our version of backward elimination:\n\nOrder of variable elimination: In our case, we used p-value as our decision criterion. Different decision criteria, such as AIC or BIC, can be used instead, which may affect the order of variable elimination and the final model’s performance.\nInteraction effects: Our implementation of the multivariate regression model and backward elimination method only considers the individual impact of each variable and may overlook interaction effects between them, which could result in suboptimal model performance."
  },
  {
    "objectID": "appendicies.html",
    "href": "appendicies.html",
    "title": "Analyzing Airbnb Data",
    "section": "",
    "text": "library(tidyverse)\nlibrary(skimr)\nlibrary(jsonlite)\nlibrary(dplyr)\nlibrary(scales)\nlibrary(tidymodels)\nlibrary(lubridate)\nlibrary(knitr)\nlibrary(kableExtra)\nlibrary(patchwork)\nlibrary(stringr)\n\ntheme_set(theme_minimal())\nset.seed(123)\n\n\n# Load airbnb listings data (03/06/2023)\nairbnb_data <- read_csv(\"data/airbnb_data/03_06_2023_listings.csv\", \n    col_types = cols(price = col_number()))\n\n# Remove listings with price outliers\nairbnb_data <- airbnb_data |> \n  filter(price < quantile(airbnb_data$price, 0.99))\n\n# Load amenities dataframe from EDA\namenities <- read_csv(\"data/airbnb_data/amenities_data.csv\")\n\n\n\nIn our main dataset, the number of bathrooms is found in bathrooms_text and is presented as text instead of numeric. For example, you would see entries like “1 shared bath,” “2 baths,” and “2.5 baths.” This is quite troublesome for analysis. As such, we first extract the number in the entry. Them, we check any occurrence of the words “shared” and “private.” If the word “shared” is there, we divide the number by two.\n\nlisting <- airbnb_data %>%\n  select(id, price, bedrooms, bathrooms_text) |> \n  drop_na(bathrooms_text)\n\nlisting$bathrooms <- str_extract(listing$bathrooms_text, \"\\\\d+\")\n\nlisting$bathrooms <- ifelse(str_detect(listing$bathrooms_text, \"shared\"), \n                                     as.numeric(listing$bathrooms)/2, \n                                     listing$bathrooms)\n\nlisting$bathrooms <- ifelse(str_detect(listing$bathrooms_text, \"private\"), \n                                     as.numeric(listing$bathrooms), \n                                     listing$bathrooms)\n\nbathroom_tidy <- listing |>\n  mutate(bathrooms = as.numeric(bathrooms))\n\nwrite_csv(bathroom_tidy |> select(id, price, bathrooms), \"data/airbnb_data/bathroom_tidy.csv\")\n\n\n\n\nA major issue with amenities is that it is stored as a character list. We need to parse and clean this so that we can do more analysis.\n\namenities_df <- airbnb_data |>\n  # Create subset of Airbnb data pertaining to amenities\n  select(id, amenities) |>\n  # Replace any occurrences of square brackets with empty string\n  mutate(amenities = gsub(\"\\\\[|\\\\]\", \"\", amenities)) |>\n  # Split the list by comma and make separate rows\n  separate_rows(amenities, sep = \", \") |>\n  # Unnest the list\n  unnest(amenities)\n\n\n\n\nWe wanted to conduct analysis on specific amenities, so we parsed out eight amenities that we consider as “extras:” air conditioning, heating, dishes and silverware, cooking basics, microwave, coffee maker, washer, and dryer.\n\nextra_amenities <- c(\"air conditioning\", \"heating\", \"dishes and silverware\", \"cooking basics\", \"microwave\", \"coffee maker\", \"washer\", \"dryer\")\n\nextra_df <- data.frame(amenities) |> drop_na(amenities)\n  \nfor (amenity in extra_amenities) {\n  extra_df <- extra_df |>\n    mutate(!!amenity :=\n      str_detect(\n        extra_df$amenities,\n        regex(amenity, ignore_case = TRUE)\n      ))\n}\n\nextra_df <- extra_df |>\n  group_by(id) |>\n  summarise(\n    air_conditioning = any(`air conditioning`),\n    heating = any(heating),\n    dishes_and_silverware = any(`dishes and silverware`),\n    cooking_basics = any(`cooking basics`),\n    microwave = any(microwave),\n    coffee_maker = any(`coffee maker`),\n    washer = any(washer),\n    dryer = any(dryer)\n  )\n\nextra_all <- extra_df |> \n  mutate(\n    all_extras = \n      air_conditioning &\n      heating &\n      dishes_and_silverware &\n      cooking_basics&microwave &\n      coffee_maker &\n      washer &\n      dryer\n  ) |> merge(airbnb_data |> select(id, price))\n\nwrite.csv(extra_all, \"data/airbnb_data/extra_amenities.csv\", row.names=FALSE)\n\n\n\n\nSimilar to our extra amenities analysis, we decided to look into how work-from-home (WFH) amenities play a role in affecting price, and whether or not it can be a good price predictor. We decided to look into three WFH criteria:\n\nThe listing must offer Wifi, which we determined by checking its list of amenities.\nThe listing must offer a dedicated workspace, which we determined by checking its list of amenities.\nThe listing must be located in a quiet environment. To determine this, we searched for occurrences of the word “quiet” in the listing’s name and description.\n\n\nwfh_amenities <- data.frame(amenities) |> drop_na(amenities)\n\nfor (amenity in c(\"wifi\", \"workspace\")) {\n  wfh_amenities <- wfh_amenities |>\n    mutate(!!amenity :=\n      str_detect(\n        wfh_amenities$amenities,\n        regex(amenity, ignore_case = TRUE)\n      ))\n}\n\nwfh_amenities <- wfh_amenities |>\n  group_by(id) |>\n  summarise(\n    wifi = any(wifi),\n    workspace = any(workspace)\n  )\n\nlistings_with_quiet <- airbnb_data |> \n  select(id) |> \n  mutate(\n    quiet = case_when(\n      str_detect(airbnb_data$name, regex(\"quiet\", ignore_case = TRUE)) ~ TRUE,\n      str_detect(airbnb_data$description, regex(\"quiet\", ignore_case = TRUE)) ~ TRUE\n      ,TRUE ~ FALSE\n    )\n  )\n\nwifi_work_quiet <- merge(wfh_amenities, listings_with_quiet) |> \n  mutate(\n    all_three = wifi&workspace&quiet,\n    wifi_workspace_only = wifi&workspace&(!quiet),\n    wifi_only =  wifi&(!workspace)&(!quiet)\n  ) |> \n  merge(airbnb_data |> select(id, neighbourhood_cleansed, \n                              neighbourhood_group_cleansed, price)) |> \n  drop_na()\n\nwrite.csv(wifi_work_quiet, \"data/airbnb_data/wfh_amenities.csv\", row.names=FALSE)\n\n\n\n\nTo see how host characteristics vary, we need to make sure that the hosts with multiple listings are only displayed once. To do this, we only include unique host IDs. By doing so, the price and various review scores only display the values associated with whichever listing remains. To avoid this, we average these values by grouping the host IDs. The following analysis is built on these averaged prices and host characteristics.\n\nhost <- airbnb_data |>\n  select(\n    host_id,\n    host_is_superhost,\n    host_identity_verified,\n    review_scores_cleanliness,\n    review_scores_communication,\n    host_response_time,\n    host_acceptance_rate,\n    price,\n  ) |>\n  drop_na() |>\n  group_by(host_id) |>\n  mutate(price = mean(price)) |>\n  distinct(host_id, .keep_all = TRUE) |>\n  mutate(price = log(price)) |>\n  ungroup()\n\n\n# Superhost dataframe\nsuperhosts <- host |>\n  select(host_is_superhost) |>\n  mutate(host_is_superhost = if_else(host_is_superhost == TRUE, \"Superhost\", \"Not superhost\")) |>\n  count(host_is_superhost)\n\n# Superhost visual\nsuperhost_graph <-\n  ggplot(host, mapping = aes(x = host_is_superhost)) +\n  geom_bar() +\n  theme_minimal() +\n  scale_x_discrete(limits = rev,\n                   labels = c(\"Superhost\", \"Not superhost\")) +\n  labs(title = \"# of superhosts\",\n       x = \"\",\n       y = \"Count\")\n\n\n# Host identity verified dataframe\nidentity_verified <- host |>\n  select(host_identity_verified) |>\n  mutate(host_identity_verified = if_else(host_identity_verified == TRUE, \"Verified\", \"Not verified\")) |>\n  count(host_identity_verified)\n\n# Host identity verified graph\nidentity_verified_graph <-\n  ggplot(host, mapping = aes(x = host_identity_verified)) +\n  geom_bar() +\n  theme_minimal() +\n  scale_x_discrete(limits = rev,\n                   labels = c(\"Verified\", \"Not verified\")) +\n  labs(title = \"# of verified hosts\",\n       x = \"\",\n       y = \"\")\n\n\n# Review score cleanliness dataframe\ncleanliness <- host |>\n  select(review_scores_cleanliness) |>\n  mutate(\n    scores = case_when(\n      4 < review_scores_cleanliness &\n        review_scores_cleanliness <= 5 ~ \"Very high\",\n      3 < review_scores_cleanliness &\n        review_scores_cleanliness <= 4 ~ \"High\",\n      2 < review_scores_cleanliness &\n        review_scores_cleanliness <= 3 ~ \"Medium\",\n      1 < review_scores_cleanliness &\n        review_scores_cleanliness <= 2 ~ \"Low\",\n      review_scores_cleanliness <= 1 ~ \"Very low\",\n    ),\n    cleanliness_score = fct_relevel(scores, \"Very low\", \"Low\", \"Medium\", \"High\", \"Very high\")\n  ) |>\n  count(cleanliness_score)\n\n# Review score cleanliness graph\ncleanliness_graph <- ggplot(cleanliness, mapping = aes(x = cleanliness_score, y = n)) +\n  geom_col() +\n  theme_minimal() +\n  labs(title = \"Host cleanliness rating\",\n       x = \"\",\n       y = \"\")\n\n\n# Review score communication dataframe\ncommunication <- host |>\n  select(review_scores_communication) |>\n  mutate(\n    scores = case_when(\n      4 < review_scores_communication &\n        review_scores_communication <= 5 ~ \"Very high\",\n      3 < review_scores_communication &\n        review_scores_communication <= 4 ~ \"High\",\n      2 < review_scores_communication &\n        review_scores_communication <= 3 ~ \"Medium\",\n      1 < review_scores_communication &\n        review_scores_communication <= 2 ~ \"Low\",\n      review_scores_communication <= 1 ~ \"Very low\",\n    ),\n    communication_score = fct_relevel(scores, \"Very low\", \"Low\", \"Medium\", \"High\", \"Very high\")\n  ) |>\n  count(communication_score)\n\n# Review score communication graph\ncommunication_graph <-\n  ggplot(communication, mapping = aes(x = communication_score, y = n)) +\n  geom_col() +\n  theme_minimal() +\n  labs(title = \"Host communication rating\",\n       x = \"\",\n       y = \"\")\n\n\n# Host response time dataframe\nresponse <- host |>\n  select(host_response_time, price) |>\n  count(host_response_time) |>\n  mutate(\n    Time = fct_relevel(\n      host_response_time,\n      \"within an hour\",\n      \"within a few hours\",\n      \"within a day\",\n      \"a few days or more\"\n    )\n  )\n\nresponse[response == \"N/A\"]  <- NA\n\nresponse <- na.omit(response)\n\n# Host response time graph\nresponse_time_graph <-\n  ggplot(response, mapping = aes(x = host_response_time, y = n)) +\n  geom_col() +\n  scale_x_discrete(\n    limits = rev,\n    labels = c(\n      \"within an hour\",\n      \"within a few hours\",\n      \"within a day\",\n      \"a few days or more\"\n    )\n  ) +\n  theme_minimal() +\n  labs(title = \"Hosts by their response time\",\n       x = \"\",\n       y = \"Count\")\n\n\n# Host acceptance rate dataframe\nacceptance <- host |>\n  select(host_acceptance_rate)\n\nacceptance[acceptance == \"N/A\"]  <- NA\n\nacceptance <- na.omit(acceptance)\n\nacceptance <- acceptance |>\n  mutate(\n    host_acceptance_rate = substr(host_acceptance_rate, 1, nchar(host_acceptance_rate)-1),\n    host_acceptance_rate = as.numeric(host_acceptance_rate)) |>\n  count(host_acceptance_rate)\n\n# Host acceptance rate graph\nacceptance_graph <-\n  ggplot(acceptance, mapping = aes(x = host_acceptance_rate, y = n)) +\n  geom_col() +\n  theme_minimal() +\n  labs(title = \"Hosts by their acceptance rate\",\n       x = \"\",\n       y = \"Count\")\n\n\n\n\nWe created main_variable_dataset to have a centralized dataset to conduct our multivariate linear regression analysis and other ML model fitting.\n\nmain_variable_dataset <- wifi_work_quiet |> \n  select(id, wifi, workspace, quiet) |> \n  merge(extra_all |> \n          select(id, air_conditioning, heating, dishes_and_silverware, \n                 cooking_basics, microwave, coffee_maker, washer, dryer, price)) |> \n  merge(bathroom_tidy |> select(id, bathrooms)) |> \n  merge(airbnb_data |> select(id, neighbourhood_group_cleansed,\n                              bedrooms, room_type, \n                              host_is_superhost, \n                              host_identity_verified,\n                              review_scores_cleanliness,\n                              review_scores_communication,\n                              review_scores_rating,\n                              host_response_time,\n                              host_acceptance_rate)) \n\nmain_variable_dataset[main_variable_dataset == \"N/A\"]  <- NA\n\nmain_variable_dataset <- na.omit(main_variable_dataset)\n\nmain_variable_dataset <- main_variable_dataset |>\n  mutate(\n    host_acceptance_rate = substr(host_acceptance_rate, 1, nchar(host_acceptance_rate)-1),\n    host_acceptance_rate = as.numeric(host_acceptance_rate)\n  )\nwrite_csv(main_variable_dataset, \"data/airbnb_data/main_variable_dataset.csv\")"
  },
  {
    "objectID": "eda.html",
    "href": "eda.html",
    "title": "Analyzing Airbnb data",
    "section": "",
    "text": "library(tidyverse)\nlibrary(skimr)\nlibrary(jsonlite)\nlibrary(dplyr)\nlibrary(scales)\nlibrary(tidymodels)\nlibrary(lubridate)"
  },
  {
    "objectID": "eda.html#location",
    "href": "eda.html#location",
    "title": "Analyzing Airbnb data",
    "section": "Location",
    "text": "Location\nFor my data cleaning, I have chosen to filter out all columns related to the location of each Airbnb listing, including its latitude, longitude, and neighborhood located in NYC among other things. While it was clear from the start that I would likely not use most of the variable I selected, I believe that keeping in mind these other forms of listing location could be useful down the line. I also obviously included the price of said listings, mutating a new column that make the price into a raw number instead of a character string.\n\n# Data cleaning: main cleaning was $ signs and selecting necessary variables\ndf_location_price <- airbnb_data |>\n  select(\n    latitude, longitude, neighbourhood, neighbourhood_cleansed,\n    neighbourhood_group_cleansed, price\n  ) |>\n  mutate(numb_dollar = as.numeric(gsub(\"\\\\$|,\", \"\", price)))\ndf_location_price\n\n# A tibble: 42,931 × 7\n   latitude longitude neighbourhood                      neighbourhood_cleansed\n      <dbl>     <dbl> <chr>                              <chr>                 \n 1     40.6     -73.9 <NA>                               Canarsie              \n 2     40.6     -73.9 <NA>                               Canarsie              \n 3     40.5     -74.3 <NA>                               Tottenville           \n 4     40.6     -74.0 <NA>                               Sheepshead Bay        \n 5     40.9     -73.9 The Bronx, New York, United States North Riverdale       \n 6     40.8     -73.8 Queens, New York, United States    Flushing              \n 7     40.8     -73.8 <NA>                               Whitestone            \n 8     40.5     -74.2 <NA>                               Prince's Bay          \n 9     40.7     -73.8 <NA>                               Richmond Hill         \n10     40.9     -73.9 RIVERDALE, New York, United States Kingsbridge           \n# ℹ 42,921 more rows\n# ℹ 3 more variables: neighbourhood_group_cleansed <chr>, price <dbl>,\n#   numb_dollar <dbl>"
  },
  {
    "objectID": "eda.html#availability",
    "href": "eda.html#availability",
    "title": "Analyzing Airbnb data",
    "section": "Availability",
    "text": "Availability\nIn our dataset, we have several columns that talk about the availability of Airbnb listings. availability_* tells us the availability of the listing * days in the future as determined by the calendar. We should keep in mind that a listing may not be available because it has been booked by a guest or blocked by the host.\nIt is interesting to extract the month and year for the availability for analysis on the availability.\n\n# Extract month and year from last_review column\nairbnb_data_availability <- airbnb_data |>\n  mutate(month_year = floor_date(as.Date(last_review), unit = \"month\")) |>\n  select(id, price, availability_30, availability_60, availability_90, availability_365, month_year)"
  },
  {
    "objectID": "eda.html#amenities",
    "href": "eda.html#amenities",
    "title": "Analyzing Airbnb data",
    "section": "Amenities",
    "text": "Amenities\nA major issue with amenities is that it is stored as a character list. We need to parse and clean this so that we can do more analysis.\n\namenities_df <- airbnb_data |>\n  # Create subset of Airbnb data pertaining to amenities\n  select(id, amenities) |>\n  # Replace any occurrences of square brackets with empty string\n  mutate(amenities = gsub(\"\\\\[|\\\\]\", \"\", amenities)) |>\n  # Split the list by comma and make separate rows\n  separate_rows(amenities, sep = \", \") |>\n  # Unnest the list\n  unnest(amenities)\namenities_df\n\n# A tibble: 1,121,291 × 2\n        id amenities                              \n     <dbl> <chr>                                  \n 1 8.02e17 \"\\\"50\\\\\\\" TV\\\"\"                        \n 2 8.02e17 \"\\\"Bathtub\\\"\"                          \n 3 8.02e17 \"\\\"Microwave\\\"\"                        \n 4 8.02e17 \"\\\"Free driveway parking on premises\\\"\"\n 5 8.02e17 \"\\\"Laundromat nearby\\\"\"                \n 6 8.02e17 \"\\\"Kitchen\\\"\"                          \n 7 8.02e17 \"\\\"Refrigerator\\\"\"                     \n 8 8.02e17 \"\\\"Central air conditioning\\\"\"         \n 9 8.02e17 \"\\\"Smoke alarm\\\"\"                      \n10 8.02e17 \"\\\"Central heating\\\"\"                  \n# ℹ 1,121,281 more rows\n\n# Save a csv copy for future purposes\n# write.csv(amenities_df, \"data/airbnb_data/amenities_data.csv\", row.names=FALSE)\n\nNow that we have parsed the amenities out of its list format, there is another problem. How the amenities are reported in the dataset is dependent on how the host described their list of amenities. In other words, there is no standardization on how amenities are reported. That is why we have multiple variations of the same amenity. For example, we have several variations of “HDTV” depending on the size of the HDTV and the applications (Amazon Prime, Netflix, etc.) that come with it among other factors. Similarly, many listings have “fast wifi” listed as an amenity, but we see variations depending on the speed listed.\nIs there a way to consolidate the different variations? One way is to conduct partial matching with some desired amenity (the below code looks for “fast wifi”) and create a new column to store a boolean that describes whether the listing has that desired amenity or not.\n\nfast_wifi <- amenities_df |>\n  mutate(fast_wifi = str_detect(amenities, regex(\"fast wifi\", ignore_case = TRUE)))\nfast_wifi\n\n# A tibble: 1,121,291 × 3\n        id amenities                               fast_wifi\n     <dbl> <chr>                                   <lgl>    \n 1 8.02e17 \"\\\"50\\\\\\\" TV\\\"\"                         FALSE    \n 2 8.02e17 \"\\\"Bathtub\\\"\"                           FALSE    \n 3 8.02e17 \"\\\"Microwave\\\"\"                         FALSE    \n 4 8.02e17 \"\\\"Free driveway parking on premises\\\"\" FALSE    \n 5 8.02e17 \"\\\"Laundromat nearby\\\"\"                 FALSE    \n 6 8.02e17 \"\\\"Kitchen\\\"\"                           FALSE    \n 7 8.02e17 \"\\\"Refrigerator\\\"\"                      FALSE    \n 8 8.02e17 \"\\\"Central air conditioning\\\"\"          FALSE    \n 9 8.02e17 \"\\\"Smoke alarm\\\"\"                       FALSE    \n10 8.02e17 \"\\\"Central heating\\\"\"                   FALSE    \n# ℹ 1,121,281 more rows\n\n\nCan we make this process somewhat more reproducible and flexible? What if we want to look at other amenities? Below, we check if a listing has “wifi,” “parking,” “dryer”, “washer,” and “kitchen” listed in their list of amenities. Certainly, this list of amenities can be changed depending on our research scope later.\n\n# Create character vector of amenities of interest\nessentials <- c(\"wifi\", \"parking\", \"dryer\", \"washer\", \"kitchen\")\n\n# Duplicate amenities_df\nessential_amenities_df <- data.frame(amenities_df)\n\n# Iterate over amenities in essentials\nfor (amenity in essentials) {\n  essential_amenities_df <- essential_amenities_df |>\n    # Create boolean column\n    mutate(!!amenity :=\n      str_detect(\n        essential_amenities_df$amenities,\n        regex(amenity, ignore_case = TRUE)\n      ))\n}\n\n# Group by listing\nlisting_esential_amenitites <- essential_amenities_df |>\n  group_by(id) |>\n  summarise(\n    wifi = any(wifi),\n    parking = any(parking),\n    dryer = any(dryer),\n    washer = any(washer),\n    kitchen = any(kitchen)\n  ) |>\n  pivot_longer(\n    cols = -id,\n    names_to = \"amenities\",\n    values_to = \"listed\"\n  )\nlisting_esential_amenitites\n\n# A tibble: 214,655 × 3\n      id amenities listed\n   <dbl> <chr>     <lgl> \n 1  2595 wifi      TRUE  \n 2  2595 parking   TRUE  \n 3  2595 dryer     TRUE  \n 4  2595 washer    FALSE \n 5  2595 kitchen   TRUE  \n 6  5121 wifi      TRUE  \n 7  5121 parking   FALSE \n 8  5121 dryer     FALSE \n 9  5121 washer    FALSE \n10  5121 kitchen   TRUE  \n# ℹ 214,645 more rows\n\n\nSince we have the listing identifier in listing_esential_amenitites, we can merge listing_esential_amenitites with our main dataset to gather information on price and learn about how amenities affect listing prices."
  },
  {
    "objectID": "eda.html#host-characteristics",
    "href": "eda.html#host-characteristics",
    "title": "Analyzing Airbnb data",
    "section": "Host characteristics",
    "text": "Host characteristics\nAnother possible area of inquiry within this dataset is looking at a variety of host characteristics and how they possibly affect the price of a listing. The first step in doing so is making a dataframe with all the necessary yet pertinent variables that have to do with a host such as if they are a super host, their acceptance rate, etc.\nSince a host has many listings detailed in the main dataset, we often use the distinct() function to remove repeated host_ids when necessary; if price is a variable for these instances, we average the price of all listings per each individual host.\n\n# Dataframe with all variables to do with host characteristics\nhost_char <- airbnb_data |>\n  select(\n    host_id,\n    host_is_superhost,\n    host_identity_verified,\n    host_has_profile_pic,\n    host_since,\n    host_response_time,\n    host_response_rate,\n    host_acceptance_rate,\n    host_listings_count,\n    review_scores_communication,\n    price\n  )\nhost_char\n\n# A tibble: 42,931 × 11\n     host_id host_is_superhost host_identity_verified host_has_profile_pic\n       <dbl> <lgl>             <lgl>                  <lgl>               \n 1 495455523 FALSE             FALSE                  TRUE                \n 2 488760226 FALSE             TRUE                   TRUE                \n 3 461263600 FALSE             FALSE                  FALSE               \n 4 475699129 TRUE              TRUE                   TRUE                \n 5 397288055 FALSE             TRUE                   TRUE                \n 6 239139334 FALSE             TRUE                   TRUE                \n 7 426682883 FALSE             FALSE                  FALSE               \n 8  77290831 FALSE             TRUE                   TRUE                \n 9  51426218 FALSE             TRUE                   TRUE                \n10  21444167 TRUE              TRUE                   TRUE                \n# ℹ 42,921 more rows\n# ℹ 7 more variables: host_since <date>, host_response_time <chr>,\n#   host_response_rate <chr>, host_acceptance_rate <chr>,\n#   host_listings_count <dbl>, review_scores_communication <dbl>, price <dbl>\n\n\nA subset of the aforementioned dataframe has to do with the number of listings a host has and how that might impact the average price of a host’s listings. To do so, we need to select host_listings_count and the price. We make sure to omit any NA values for visual easability purposes.\n\n# Data frame with each host, their total num of listings\n# and their average price\nhost_list <- host_char |>\n  select(host_id, host_listings_count, price) |>\n  group_by(host_id) |>\n  mutate(avg_price_host = mean(price)) |>\n  distinct(host_id, .keep_all = TRUE) |>\n  na.omit(host_listings_count)\n\nhost_list\n\n# A tibble: 27,450 × 4\n# Groups:   host_id [27,450]\n     host_id host_listings_count price avg_price_host\n       <dbl>               <dbl> <dbl>          <dbl>\n 1 495455523                   1   143          143  \n 2 488760226                   2    30           50  \n 3 461263600                   1   157          157  \n 4 475699129                   7    89           75.7\n 5 397288055                   1   125          125  \n 6 239139334                   3    63           59.7\n 7 426682883                   1    82           82  \n 8  77290831                   1   118          118  \n 9  51426218                  10    49          146. \n10  21444167                   2   115          104. \n# ℹ 27,440 more rows\n\n\nAnother potential aspect to look at is whether certain host attributes can be used as a predictive measure in determining if a host is a super host. For this, we can look at the variables host_is_superhost, host_identity_verified, and host_has_profile_pic. Furthermore, for future possible modeling methods, changing some variables to a quantifiable number is necessary, which can be seen below:\n\n# Data frame with each host, if they are a super host,\n# if they have a profile picture, and if their identity is verified\nsuperhost <- host_char |>\n  select(\n    host_id,\n    host_is_superhost,\n    host_identity_verified,\n    host_has_profile_pic\n  ) |>\n  distinct(host_id, .keep_all = TRUE) |>\n  mutate(\n    host_is_superhost = if_else(host_is_superhost == \"TRUE\", 1, 0),\n    host_identity_verified = if_else(host_identity_verified == \"TRUE\", 1, 0),\n    host_has_profile_pic = if_else(host_has_profile_pic == \"TRUE\", 1, 0)\n  )\nsuperhost\n\n# A tibble: 27,455 × 4\n     host_id host_is_superhost host_identity_verified host_has_profile_pic\n       <dbl>             <dbl>                  <dbl>                <dbl>\n 1 495455523                 0                      0                    1\n 2 488760226                 0                      1                    1\n 3 461263600                 0                      0                    0\n 4 475699129                 1                      1                    1\n 5 397288055                 0                      1                    1\n 6 239139334                 0                      1                    1\n 7 426682883                 0                      0                    0\n 8  77290831                 0                      1                    1\n 9  51426218                 0                      1                    1\n10  21444167                 1                      1                    1\n# ℹ 27,445 more rows\n\n\nWithin the main Airbnb dataframe is a variable called review_scores_communication. This can be interesting to use against price as consumers on the Airbnb website definitely want to know how communicative a host is when choosing a listing.\n\n# Data frame with host's communication rating and price\nrating <- host_char |>\n  select(\n    host_id,\n    review_scores_communication,\n    price\n  )\n\n# Find average price of listings per host\nhost_rating <- host_char |>\n  select(host_id,\n         review_scores_communication,\n         price) |>\n\n# Find average price of listings per host\n  group_by(host_id) |>\n  mutate(price = mean(price)) |>\n  # Remove repeat of same hosts\n  distinct(host_id, .keep_all = TRUE) |>\n  na.omit(rating)\n\nhost_rating\n\n# A tibble: 21,412 × 3\n# Groups:   host_id [21,412]\n     host_id review_scores_communication price\n       <dbl>                       <dbl> <dbl>\n 1 488760226                        4.92  50  \n 2 475699129                        5     75.7\n 3 397288055                        4.88 125  \n 4 239139334                        4.78  59.7\n 5  77290831                        5    118  \n 6  51426218                        5    146. \n 7  21444167                        4.93 104. \n 8 486718434                        5    179  \n 9 479109924                        4.82 172  \n10 179951095                        5     94  \n# ℹ 21,402 more rows\n\n\nOne last area to look, at in tandem with host characteristics, might have to do with a host’s acceptance rate. Here we select host_acceptance_rate, price, and host_is_superhost to see how acceptance rate varies against price and how it might be influenced by them being a super host or not.\n\n# Data frame with host's acceptance rate, price, and if they\n# are a super host\naccept <- host_char |>\n  select(\n    host_id,\n    host_acceptance_rate,\n    price,\n    host_is_superhost\n  ) |>\n  group_by(host_id) |>\n  mutate(price = mean(price)) |>\n  distinct(host_id, .keep_all = TRUE)\n\n# Make character N/A a logical NA value\naccept[accept == \"N/A\"] <- NA\n\n# Omit NA values\naccept <- accept |>\n  na.omit(host_acceptance_rate) |>\n  # Change acceptance rate to numbers\n  mutate(\n    host_acceptance_rate = substr(host_acceptance_rate, 0, nchar(host_acceptance_rate)),\n    host_acceptance_rate = parse_number(host_acceptance_rate)\n  ) |>\n  # Change super host column to categorical variable\n  mutate(host_is_superhost = if_else(host_is_superhost == \"TRUE\", \"Superhosts\", \"Not Superhost\"))\n\n# Plot listings versus price dataset\nggplot(host_list,\n  mapping = aes(x = avg_price_host, y = host_listings_count)\n) +\n  geom_point() +\n  theme_minimal() +\n  scale_x_continuous(limits = quantile(host_list$price, c(0.1, 0.95))) +\n  labs(\n    title = \"# of listings vs average price\",\n    x = \"Average price (per host)\",\n    y = \"# of listings (per host)\"\n  )\n\nWarning: Removed 3776 rows containing missing values (`geom_point()`).\n\n\n\n\n# Plot host rating and price of listings\nggplot(rating,\n  mapping = aes(x = price, y = review_scores_communication)\n) +\n  geom_point() +\n  theme_minimal() +\n  scale_x_continuous(limits = quantile(rating$price, c(0.1, 0.95))) +\n  labs(\n    title = \"Host communication rating vs price\",\n    x = \"Average price (per host)\",\n    y = \"Host acceptance rate\"\n  )\n\nWarning: Removed 14370 rows containing missing values (`geom_point()`).\n\n\n\n\n# Plot acceptance rate and price and facet by super hosts\nggplot(accept,\n  mapping = aes(x = price, y = host_acceptance_rate)\n) +\n  geom_col(width = 15, fill = \"lightblue\") +\n  facet_wrap(vars(host_is_superhost)) +\n  theme_bw() +\n  scale_x_continuous(\n    limits = quantile(accept$price, c(0.1, 0.95)),\n    labels = label_dollar()\n  ) +\n  scale_y_continuous(labels = label_percent(scale = .001)) +\n  labs(\n    title = \"Host acceptance rate vs price\",\n    x = \"Average price (per host)\",\n    y = \"Host acceptance rate\"\n  )\n\nWarning: Removed 2392 rows containing missing values (`position_stack()`).\n\n\nWarning: `position_stack()` requires non-overlapping x intervals\n`position_stack()` requires non-overlapping x intervals\n\n\nWarning: Removed 539 rows containing missing values (`geom_col()`)."
  },
  {
    "objectID": "eda.html#listing-characteristics",
    "href": "eda.html#listing-characteristics",
    "title": "Analyzing Airbnb data",
    "section": "Listing characteristics",
    "text": "Listing characteristics\nThere are a few variables that characterize a listing in our main dataset. To clean and parse the data more easily, we create smaller subsets of the data. Below we create two dataframes: 1) price and room type and 2) price and ratings. Not all listings have a rating, so we also omit observations with NA for rating. Similarily, not all listings have a value for bedrooms. This might be because there are studio apartments and other forms of non-traditional accommodations listed in Airbnb.\n\n# Create a dataframe for price and room type\nroom_type_price <- airbnb_data |>\n  select(id, price, room_type)\n\n# Create a dataframe for price and ratings\nratings_price <- airbnb_data |>\n  select(id, price, review_scores_rating) |>\n  drop_na()\n\n# Create a dataframe for price and number of bedrooms\nbedroom_price <- airbnb_data |>\n  select(id, price, bedrooms) |>\n  drop_na()"
  },
  {
    "objectID": "eda.html#location-1",
    "href": "eda.html#location-1",
    "title": "Analyzing Airbnb data",
    "section": "Location",
    "text": "Location\nThe next step was the exploratory analysis. For the sake of understanding the general trend of each region of NYC, I focused mainly on the column neighbourhood_group_cleansed, the broadest categorical variable for listing location, and compared it to price of the listings. However, I immediately noticed that there were a few exceptionally expensive listings within this data set, so I first tried boxploting the logarithmic prices, so that the values were readable. I also counted the number of actually listings per region of NYC so that I could understand the boxplots better.\n\n# Exploratory (while my main interest is in neighbourhood_group_cleansed, I want to include other relevant location data in this for future use)\n\ndf_location_price |>\n  mutate(neighbourhood_group_cleansed = fct_reorder(neighbourhood_group_cleansed, numb_dollar, .desc = TRUE)) |>\n  ggplot(aes(neighbourhood_group_cleansed, fill = neighbourhood_group_cleansed)) +\n  geom_bar(show.legend = FALSE) +\n  labs(\n    x = \"New York neighborhoods\",\n    y = \"Count\",\n    title = \"Priced Airbnb listing count within New York neighborhoods\"\n  ) +\n  theme_minimal()\n\n\n\ndf_location_price |>\n  mutate(neighbourhood_group_cleansed = fct_reorder(neighbourhood_group_cleansed, numb_dollar, .desc = TRUE)) |>\n  ggplot(aes(log(numb_dollar), neighbourhood_group_cleansed, fill = neighbourhood_group_cleansed)) +\n  geom_boxplot(show.legend = FALSE) +\n  theme_minimal() +\n  labs(\n    y = \"New York neighborhoods\",\n    x = \"(logarithmic) Listing prices\",\n    title = \"Airbnb listing prices within New York neighborhoods\"\n  ) +\n  scale_x_continuous(labels = label_dollar(scale_cut = cut_short_scale()))\n\nWarning: Removed 27 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\nHowever, this set up is likely not going to be helpful in understanding any other patterns other than the raw median / IQR / or outliers of the data, as the axis is only accounting for a very long and thing tail skewing the data heavily to the right. Because of this, I believe that we should have a cut off to look more closely at the majority of data points.\n\n# Exploratory V2 (Cutting off at $500 per night. I am fully aware that 500 is an arbitrary number and that we should decide a specific percentile in the future. The number was chosen to prove my point)\n# reasoning for cut-off: https://airbtics.com/airbnb-occupancy-rates-in-new-york-city/, histogram: patterns we could not be able to see if we didn't cut off the huge skewed tail.\n\ndf_location_price |>\n  mutate(neighbourhood_group_cleansed = fct_reorder(neighbourhood_group_cleansed, numb_dollar, .desc = TRUE)) |>\n  filter(numb_dollar < 500) |>\n  ggplot(aes(numb_dollar, neighbourhood_group_cleansed, fill = neighbourhood_group_cleansed)) +\n  geom_boxplot(show.legend = FALSE) +\n  theme_minimal() +\n  labs(\n    y = \"New York neighborhoods\",\n    x = \"Listing prices\",\n    title = \"Airbnb listing prices within New York neighborhoods (< $500/night)\"\n  ) +\n  scale_x_continuous(labels = label_dollar(scale_cut = cut_short_scale()))\n\n\n\ndf_location_price |>\n  mutate(neighbourhood_group_cleansed = fct_reorder(neighbourhood_group_cleansed, numb_dollar, .desc = TRUE)) |>\n  filter(numb_dollar < 500) |>\n  ggplot(aes(numb_dollar, fill = neighbourhood_group_cleansed)) +\n  geom_histogram(show.legend = FALSE, binwidth = 8) +\n  facet_wrap(facet = vars(neighbourhood_group_cleansed)) +\n  labs(\n    y = \"Count\",\n    x = \"Listing prices\",\n    title = \"Airbnb listing prices within New York neighborhoods (< $500/night)\"\n  ) +\n  scale_x_continuous(labels = label_dollar(scale_cut = cut_short_scale())) +\n  theme_minimal()\n\n\n\n\nFor the sake of my argument, I’m cutting off the data at $500 per night for these two graphs. For example, the histogram shows patterns we could not be able to see if we didn’t cut off the huge skewed tail, like how there appears to be multiple spikes in listings at rounded values ($100 per night, $200, $300, etc). I am fully aware that 500 is an arbitrary number and that we should decide a specific percentile in the future."
  },
  {
    "objectID": "eda.html#availability-1",
    "href": "eda.html#availability-1",
    "title": "Analyzing Airbnb data",
    "section": "Availability",
    "text": "Availability\n\n# Create scatterplot to visualize relationship between availability and price\nggplot(airbnb_data_availability, aes(x = availability_30, y = price)) +\n  geom_point(alpha = 0.5) +\n  labs(x = \"Availability (30 days)\", y = \"Price (USD)\") +\n  ggtitle(\"Relationship between Availability and Price\") +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\n# Create scatterplot to visualize relationship between availability_365 and price by month/year\nggplot(airbnb_data_availability, aes(x = availability_365, y = price, color = month_year)) +\n  geom_point(alpha = 0.5) +\n  labs(x = \"Availability (365 days)\", y = \"Price (USD)\", color = \"Month/Year\") +\n  ggtitle(\"Relationship between Availability and Price by Month/Year\") +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\n# Create boxplot to compare price distribution across availability periods\nairbnb_data |>\n  select(\n    price, availability_30, availability_60, availability_90,\n    availability_365\n  ) |>\n  pivot_longer(cols = -price, names_to = \"availability_period\", values_to = \"availability\") |>\n  ggplot(aes(x = availability_period, y = price)) +\n  geom_boxplot(alpha = 0.5) +\n  labs(x = \"Availability Period\", y = \"Price (USD)\") +\n  ggtitle(\"Price Distribution by Availability Period\") +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\n\nThe first scatterplot shows the relationship between availability in the next 30 days and price. The second scatterplot shows the relationship between availability in the next 365 days and price, with each point colored by the month/year extracted from the “last_review” column."
  },
  {
    "objectID": "eda.html#amenities-1",
    "href": "eda.html#amenities-1",
    "title": "Analyzing Airbnb data",
    "section": "Amenities",
    "text": "Amenities\nWe can visualize the top 20 amenities listed in Airbnb listings.\n\namenities_df |>\n  group_by(amenities) |>\n  count() |>\n  arrange(desc(n)) |>\n  head(20) |>\n  ggplot(mapping = aes(x = n, y = fct_reorder(amenities, n))) +\n  geom_col() +\n  labs(\n    x = \"Count\",\n    y = \"Amenities\",\n    title = \"Top 20 amenities listed in Airbnb rentals in NYC, March 2023\"\n  ) +\n  theme_minimal()\n\n\n\n\nUpon analyzing the most frequently mentioned amenities in Airbnb listings in New York City, we observe that “Wifi” is the most common. Interestingly, “Dedicated workspace” also appears among the top 20 amenities, which may be attributed to the city’s status as a major economic hub. This observation raises the question of whether there is significant demand for Airbnb accommodations among travelling employees who require a comfortable and productive workspace while away from their home offices.\nEarlier, we created fast_wifi, which outlines whether a listing has “fast wifi” listed in its list of amenities. Is there a trend between having fast wifi listed and listing price?\n\n# Merge fast_wifi with price\nfast_wifi_price <- airbnb_data |>\n  select(id, price) |>\n  merge(fast_wifi)\n\n# Calculate mean listing price, group by fast_wifi\nfast_wifi_price |>\n  group_by(fast_wifi) |>\n  summarise(\n    count = n(),\n    mean_price = mean(price)\n  )\n\n# A tibble: 2 × 3\n  fast_wifi   count mean_price\n  <lgl>       <int>      <dbl>\n1 FALSE     1118867       214.\n2 TRUE         2424       217.\n\n\nWe see that only around 2,000 listings out of over 40,000 listings in NYC advertise “fast wifi” as an amenity. Surprisingly, we do not see a significant difference in the mean listing price of listings that advertise “fast wifi” and those that do not. This finding suggests that the provision of Wifi is no longer a unique or distinguishing factor, and has become an essential and expected amenity in an Airbnb accommodation.\n\nessential_count <- listing_esential_amenitites |>\n  group_by(amenities, listed) |>\n  count()\n\nessential_pct <- essential_count |>\n  group_by(amenities) |>\n  mutate(pct = n / sum(n))\n\nessential_pct |>\n  ggplot(aes(x = str_to_title(amenities), y = pct, fill = listed)) +\n  geom_bar(stat = \"identity\") +\n  labs(\n    x = \"Amenities\",\n    y = \"Percentage of listings\",\n    fill = \"Listed\",\n    title = \"A visual guide to essential Airbnb amenities in NYC\",\n    subtitle = \"Kitchen and Wifi are the two most listed essential amenities\"\n  ) +\n  scale_y_continuous(labels = label_percent()) +\n  theme_minimal()"
  },
  {
    "objectID": "eda.html#host-characteristics-1",
    "href": "eda.html#host-characteristics-1",
    "title": "Analyzing Airbnb data",
    "section": "Host characteristics",
    "text": "Host characteristics\nHere we can visualize if the number of listings a host has affects their average price. From the graph shown below, it looks like there isn’t necessarily a correlation between the two variables:\n\n# Plot listings versus price dataset\nggplot(host_list,\n  mapping = aes(x = avg_price_host, y = host_listings_count)\n) +\n  geom_point() +\n  theme_minimal() +\n  scale_x_continuous(limits = quantile(host_list$price, c(0.1, 0.95))) +\n  labs(\n    title = \"# of listings vs average price\",\n    x = \"Average price (per host)\",\n    y = \"# of listings (per host)\"\n  )\n\nWarning: Removed 3776 rows containing missing values (`geom_point()`).\n\n\n\n\n\nHere we visualize a host’s communication rating and their average price per listing. It looks like most hosts have a rating above 4. Even then, the prices of listings vary throughout.\n\n# Plot host rating and price of listings\nggplot(host_rating,\n       mapping = aes(x = price, y = review_scores_communication)) +\n  geom_point() +\n  theme_minimal() +\n  scale_x_continuous(limits = quantile(host_rating$price, c(0.1, 0.95))) +\n  labs(title = \"Host communication rating vs price\",\n       x = \"Average price (per host)\",\n       y = \"Host acceptance rate\")\n\nWarning: Removed 3170 rows containing missing values (`geom_point()`).\n\n\n\n\n\nHere we graph a host’s acceptance rate against their average listing price and group it by whether or not the host is a super host. We see that between both super hosts and non-super hosts, as the average price of listings per host goes up, their acceptance rate goes down. This is obvious as both graphs are right-skewed.\n\n# Plot acceptance rate and price and facet by super hosts\nggplot(accept,\n       mapping = aes(x = price, y = host_acceptance_rate)) +\n  geom_col(width = 15, fill=\"lightblue\") +\n  facet_wrap(vars(host_is_superhost)) +\n  theme_bw() +\n  scale_x_continuous(limits = quantile(accept$price, c(0.1, 0.95)),\n                     labels = label_dollar()) +\n  scale_y_continuous(labels = label_percent(scale = .001)) +\n  labs(title = \"Host acceptance rate vs price\",\n       x = \"Average price (per host)\",\n       y = \"Host acceptance rate\")\n\nWarning: Removed 2392 rows containing missing values (`position_stack()`).\n\n\nWarning: `position_stack()` requires non-overlapping x intervals\n`position_stack()` requires non-overlapping x intervals\n\n\nWarning: Removed 539 rows containing missing values (`geom_col()`)."
  },
  {
    "objectID": "eda.html#listing-characteristics-1",
    "href": "eda.html#listing-characteristics-1",
    "title": "Analyzing Airbnb data",
    "section": "Listing characteristics",
    "text": "Listing characteristics\nLet’s first see how many listings there are in each available room type.\n\nroom_type_price |>\n  group_by(room_type) |>\n  count() |>\n  ggplot(aes(x = room_type, y = n)) +\n  geom_col() +\n  labs(\n    x = \"Room type\",\n    y = \"Count\"\n  ) +\n  theme_minimal()\n\n\n\n\nWe see that the “Entire home/apt” and “Private room” room types are most frequent. How does price vary with the room types?\n\n# Graph Price vs. Room type\nroom_type_price |>\n  group_by(room_type) |>\n  ggplot(aes(x = room_type, y = price)) +\n  geom_boxplot() +\n  scale_y_continuous(limits = quantile(room_type_price$price, c(0.1, 0.9))) +\n  labs(x = \"Room Type\", y = \"Price\") +\n  theme_minimal()\n\nWarning: Removed 8326 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\nWe see that the median prices of hotel rooms are most expensive, followed by entire home/apt options, and followed by private room and shared room options.\nAnother characteristic of a listing is the number of bedrooms it has, given by column bedrooms in airbnb_data. Let’s first see the distribution of number of bedrooms.\n\nbedroom_price |>\n  ggplot(aes(x = bedrooms)) +\n  geom_histogram() +\n  labs(\n    x = \"Number of bedrooms\",\n    y = \"Count\"\n  ) +\n  theme_minimal()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nWe see that the histogram is very much right-skewed and most listings have less than four bedrooms. How does price relate to the number of bedrooms?\n\n# Graph Price vs. bedrooms\nbedroom_price |>\n  ggplot(aes(x = bedrooms, y = price)) +\n  geom_jitter() +\n  labs(x = \"Bedrooms\", y = \"Price\") +\n  theme_minimal()\n\n\n\n\nThere are some outliers that make the scatterplot look weird. Let’s try to 1) only take listings up to the 75th percentile in prices and 2) only see listings with less than four bedrooms.\n\nbedroom_price |>\n  filter(bedrooms <= 4) |>\n  ggplot(aes(y = price)) +\n  geom_boxplot() +\n  facet_wrap(vars(bedrooms), ncol = 4, nrow = 1) +\n  scale_y_continuous(limits = quantile(bedroom_price$price, c(0, 0.75))) +\n  labs(\n    y = \"Price\"\n  ) +\n  theme_minimal() +\n  theme(axis.text.x = element_blank())\n\nWarning: Removed 9547 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\nFrom the boxplots above, we see that two- and three-bedroom options are generally more expensive.\n\n# Fit linear regression model\nprice_bedroom_fit <- linear_reg() |>\n  fit(price ~ bedrooms, data = bedroom_price)\ntidy(price_bedroom_fit)\n\n# A tibble: 2 × 5\n  term        estimate std.error statistic   p.value\n  <chr>          <dbl>     <dbl>     <dbl>     <dbl>\n1 (Intercept)     33.5      8.02      4.18 2.87e-  5\n2 bedrooms       118.       4.99     23.6  2.47e-122\n\nglance(price_bedroom_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic   p.value    df   logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>     <dbl> <dbl>    <dbl>  <dbl>  <dbl>\n1    0.0141        0.0140  780.      557. 2.47e-122     1 -315508. 6.31e5 6.31e5\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\nbedroom_price |>\n  summarize(\n    c = cor(bedrooms, price)\n  )\n\n# A tibble: 1 × 1\n      c\n  <dbl>\n1 0.119\n\n\nAnother characteristic of a listing is the number of bathrooms it has, given by column bathrooms in airbnb_data. Let’s first see the distribution of number of bathrooms. We first need to tidy the data.\n\n# Remove rows with missing values in Bedrooms or Bathrooms columns\nlisting <- airbnb_data %>%\n  select(id, price, neighbourhood_cleansed, neighbourhood_group_cleansed, \n         room_type, bedrooms, review_scores_rating, bathrooms_text) |> \n  filter(!is.na(bedrooms), !is.na(bathrooms_text))\n\n# Extract number of bathrooms from bathrooms_text\nlisting$bathrooms <- str_extract(listing$bathrooms_text, \"\\\\d+\")\n\n# Convert \"shared\" bathrooms to half a bathroom\nlisting$bathrooms <- ifelse(str_detect(listing$bathrooms_text, \"shared\"), \n                                     as.numeric(listing$bathrooms)/2, \n                                     listing$bathrooms)\n\n# Convert \"private\" bathrooms to numeric\nlisting$bathrooms <- ifelse(str_detect(listing$bathrooms_text, \"private\"), \n                                     as.numeric(listing$bathrooms), \n                                     listing$bathrooms)\n\n# Change the bathrooms from charaters to numeric values\nlisting <- listing |>\n  mutate(bathrooms = as.numeric(bathrooms))\n\n\nlisting |>\n  ggplot(aes(x = bathrooms)) +\n  geom_histogram(binwidth = 1) +\n  labs(\n    x = \"Number of bathrooms\",\n    y = \"Count\",\n    title = \"Count of number of bathrooms on Airbnb NYC listing\"\n  ) +\n  theme_minimal()\n\nWarning: Removed 52 rows containing non-finite values (`stat_bin()`).\n\n\n\n\n\nWe can see that most listings have 1 bathroom, then half bathroom, and then 2 bathrooms. The number of listings with other numbers of bathrooms is not too small to be representative.\n\nlisting |>\n  filter(bathrooms <= 4) |>\n  ggplot(aes(y = price)) +\n  geom_boxplot() +\n  facet_wrap(vars(bathrooms), ncol = 7, nrow = 1) +\n  scale_y_continuous(limits = quantile(listing$price, c(0, 0.9))) +\n  labs(x = \"Bathrooms\",\n       y = \"Price\",\n       title = \"Price vs. Bathroom numbers in NYC\") +\n  theme(axis.text.x = element_blank()) +\n  theme_minimal()\n\nWarning: Removed 3861 rows containing non-finite values (`stat_boxplot()`)."
  },
  {
    "objectID": "pre-registration.html",
    "href": "pre-registration.html",
    "title": "Analyzing Airbnb data",
    "section": "",
    "text": "Analysis #1\nIn our exploratory data analysis, we found that Manhattan and Brooklyn have the highest median listing prices among the five boroughs included in our main dataset. However, we aim to examine neighborhood-level data to identify areas in Manhattan and Brooklyn that have the highest and lowest listing prices and to assess possible reasons for price discrepancies.\n\n\nAnalysis #2\nUpon analyzing the most frequently mentioned amenities in Airbnb listings in New York City, we observed that “dedicated workspace” appears in the top 20 amenities. We believe that a dedicated workspace is an important amenity for Airbnb guests who are looking for a work-from-home (WFH) setup. This is likely to be true for business travelers who may need to work during their temporary stay in NYC, but also for leisure travelers who want to stay connected and work remotely while on vacation.\nIn addition to a dedicated workspace, there are several other important amenities that Airbnb guests may be looking for in a work-from-home (WFH) setup, including reliable high-speed internet, comfortable seating and good lighting, and a quiet environment.\nHence, we aim to see which neighborhoods are most popular for work-from-home setups, based on the availability and quality of amenities. For example, we can examine which NYC boroughs have the highest proportion of WFH-appropriate listings."
  },
  {
    "objectID": "presentation.html",
    "href": "presentation.html",
    "title": "Analyzing Airbnb Data",
    "section": "",
    "text": "Airbnb has quickly revolutionized the travel and hospitality industry since its launch in 2008.\nWith over six million listings worldwide, the company has disrupted traditional travel methods. In fact, research has shown that a 1% increase in Airbnb listings results in a 0.03% decrease in hotel room revenues in the top ten US cities (Dogru et al., 2019).\nAs Airbnb continues to grow, its important to understand its implications on the market and its users, and one step towards that is to understand its pricing mechanism."
  },
  {
    "objectID": "presentation.html#introduce-the-data",
    "href": "presentation.html#introduce-the-data",
    "title": "Analyzing Airbnb Data",
    "section": "Introduce the data",
    "text": "Introduce the data\nThe main dataset we utilized comes from Inside Airbnb, an open platform that provides data on Airbnb listings in different locations around the world.\nIt contains information on over 42,000 listings in New York City as of March 6, 2023.\nSome variables in the dataset that we chose to look into: price, neighbourhood_group, amenities, review_scores_rating"
  },
  {
    "objectID": "presentation.html#highlights-from-eda",
    "href": "presentation.html#highlights-from-eda",
    "title": "Analyzing Airbnb Data",
    "section": "Highlights from EDA",
    "text": "Highlights from EDA\n\n\n\nManhattan and Brooklyn are top two boroughs for number of listings.\n\n\n\n\n\n\n\n\nPrices are heavily right-skewed.\n\n\n\n\n\n\n\n\n\nTop 20 amenities included “dedicated workspace.”"
  },
  {
    "objectID": "presentation.html#location",
    "href": "presentation.html#location",
    "title": "Analyzing Airbnb Data",
    "section": "Location",
    "text": "Location\n\n\n\nPredicting by NYC boroughs:\n\\[\n\\widehat{log(Airbnb~price)} = 4.495 + 0.221\\times Brooklyn + 0.631\\times Manhattan \\\\ + 0.029 \\times Queens + 0.141 \\times Staten~Island\n\\]\n\nR-squared = 11.53%, adjusted-R-squared = 11.52%\n\nPredicting by NYC neighborhoods:\n\n220 different neighborhoods recorded in NYC, many coefficients\nR-squared = 25.35%, adjusted-R-squared = 24.96%\n\nConclusion: - Linear models of neighborhoods accounts for more variabiliy in log(price) than boroughs. However, boroughs might be better when when we consider other variables in our future linear models, as using neighborhood levels might cause over-fitting."
  },
  {
    "objectID": "presentation.html#listing-characteristics",
    "href": "presentation.html#listing-characteristics",
    "title": "Analyzing Airbnb Data",
    "section": "Listing characteristics",
    "text": "Listing characteristics\nRoom type\n\nEntire home/apt and shared room options are most common.\n[Highest] Hotel room, Entire home/apt, Private room, Shared room [Lowest]\nR-squared value is 16.3%.\n\n\n\n\n\n\nExtra amenities\n\nMajority of listings do not have all the extras and distribution is similar between boroughs.\nProduced confidence interval: 95% confident that listings that include extra amenities will have median prices that are between $50 to $59 higher."
  },
  {
    "objectID": "presentation.html#conclusions-future-work",
    "href": "presentation.html#conclusions-future-work",
    "title": "Analyzing Airbnb Data",
    "section": "Conclusions + future work",
    "text": "Conclusions + future work\n\nIn total, we have 22 variables.\nMoving forward, we plan on fitting a multivariate regression model and utilizing backward elimination to remove insignificant predictors.\n\n\n\n\n\nTop Five Predictor Variables Based on R-squared Values in Simple Linear Regression Model\n \n  \n    Variable \n    R-squared \n  \n \n\n  \n    Number of bathrooms \n    0.290 \n  \n  \n    Room type \n    0.163 \n  \n  \n    Number of bedrooms \n    0.157 \n  \n  \n    Host acceptance rate \n    0.060 \n  \n  \n    Washer \n    0.048"
  },
  {
    "objectID": "proposal.html",
    "href": "proposal.html",
    "title": "Wondrous Raichu",
    "section": "",
    "text": "library(tidyverse)\nlibrary(skimr)\nlibrary(jsonlite)\nlibrary(dplyr)\nlibrary(tibble)"
  },
  {
    "objectID": "proposal.html#introduction-and-data",
    "href": "proposal.html#introduction-and-data",
    "title": "Wondrous Raichu",
    "section": "Introduction and data",
    "text": "Introduction and data\n\nIdentify the source of the data.\nThe dataset comes from Inside Airbnb (http://insideairbnb.com/get-the-data/), an open platform that provides data on Airbnb listings in different locations around the world.\nState when and how it was originally collected (by the original data curator, not necessarily how you found the data).\nThe data gives NYC listings from the last quarter in 2022. It is aggregated through Airbnb’s public information on their website and shows all listings from that respective quarter at the particular time of publication (i.e., for this particular dataset, December 4th and 5th, 2022). \nWrite a brief description of the observations.\nThe observations published in this dataset contain all the pieces of information posted on a typical Airbnb listing. It describes the host and who they are, ratings on the host and place of stay, etc."
  },
  {
    "objectID": "proposal.html#research-questions",
    "href": "proposal.html#research-questions",
    "title": "Wondrous Raichu",
    "section": "Research question(s)",
    "text": "Research question(s)\n\nHow does Airbnb listing prices depend on rating of listing, location of listing, amenities included in the listing, and host response time?\nIn this research question, we aim to understand what factors affect Airbnb listing prices. There are five variables: four independent variables (i.e., rating of listing, location of listing, amenities included in the listing, and host response time) and one dependent variable (i.e. listing price). Listing price, rating of listing, and host response time are quantitative variables, while location of listing and amenities included in the listing are categorical variables.\nThis research question is important because it provides us with a better understanding of the Airbnb price mechanism, which can shed light on the broader dynamics of the sharing economy and the way in which online platforms like Airbnb are changing the traditional hospitality industry.\nOur hypothesis is that a high listing rating, a more comprehensive list of included amenities, a quick host response time, and a listing located in a safe and convenient location will all lead to higher listing prices.\n\n\nHow do characteristics (i.e., ratings and descriptions) of listings and of hosts affect the prices of listings?\nIn this research question, we aim to understand how the characteristics of listings and hots affect the prices of listings on Airbnb. There are five variables: four independent variables (i.e., rating of host, description of host, rating of listing, description of listing) and one dependent variable (i.e. listing price). Ratings and listing prices are quantitative variables, while descriptions are categorical variables.\nThis research question is important because it highlights the strategies hosts take to make a good impression on potential guests and remain competitive in the crowded Airbnb marketplace. Moreover, for potential guests, understanding the strategies hosts use can help them make more informed decisions when selecting a listing that meets their needs and budget.\nOur hypothesis is that higher listing ratings and higher host ratings will lead to higher listing prices. Furthermore, listings and hosts with more detailed and attractive descriptions will lead to higher listing prices.\n\n\nWhat are the most popular neighborhoods for Airbnb listings and how does this popularity vary by listing type and price?\nIn this research question, we aim to understand how the popularity of Airbnb listings depend on listing type and listing price. Here, we can associated popularity with high ratings and high number of reviews. There are three variables: two independent variables (i.e., listing type and listing price) and two dependent variables (i.e. ratings and number of reviews). Listing type is a categorical variable, while listing price, ratings, and number of reviews are quantitative variables.\nThis research question is important as it can provide valuable insights into the preferences of travelers and market trends for Airbnb hosts and guests. It helps potential hosts to identify profitable areas for their listings and to understand the preferences of Airbnb customers. Identifying the most popular neighborhoods for Airbnb listings and analyzing how this popularity varies by listing type and price can help hosts adjust their pricing strategies and better target their listings, while guests can make more informed decisions on where to stay. Additionally, this research can shed light on the factors that influence the popularity of neighborhoods for Airbnb listings, providing valuable information for city planners, policymakers, and tourism agencies in shaping their urban development strategies and promoting tourism in specific areas.\nOur hypothesis is that the most popular neighborhood will be Manhattan because it is the center of business and entertainment. Moreover, we hypothesize that entire home/apt listings will be more popular compared to private or shared rooms and that lower-priced listings will be more popular than higher-priced ones."
  },
  {
    "objectID": "proposal.html#glimpse-of-data",
    "href": "proposal.html#glimpse-of-data",
    "title": "Wondrous Raichu",
    "section": "Glimpse of data",
    "text": "Glimpse of data\n\nairbnb_data <- read_csv(\"data/airbnb_data/airbnb_data.csv\")\n\n# Preview some rows\nhead(airbnb_data)\n\n# A tibble: 6 × 75\n     id listing_url              scrape_id last_scraped source name  description\n  <dbl> <chr>                        <dbl> <date>       <chr>  <chr> <chr>      \n1  2595 https://www.airbnb.com/…   2.02e13 2022-12-05   city … Skyl… \"Beautiful…\n2  5203 https://www.airbnb.com/…   2.02e13 2022-12-05   previ… Cozy… \"Our best …\n3  5136 https://www.airbnb.com/…   2.02e13 2022-12-04   city … Spac… \"We welcom…\n4  5121 https://www.airbnb.com/…   2.02e13 2022-12-05   city … Blis… \"One room …\n5  6848 https://www.airbnb.com/…   2.02e13 2022-12-05   city … Only… \"Comfortab…\n6  5178 https://www.airbnb.com/…   2.02e13 2022-12-05   city … Larg… \"Please do…\n# ℹ 68 more variables: neighborhood_overview <chr>, picture_url <chr>,\n#   host_id <dbl>, host_url <chr>, host_name <chr>, host_since <date>,\n#   host_location <chr>, host_about <chr>, host_response_time <chr>,\n#   host_response_rate <chr>, host_acceptance_rate <chr>,\n#   host_is_superhost <lgl>, host_thumbnail_url <chr>, host_picture_url <chr>,\n#   host_neighbourhood <chr>, host_listings_count <dbl>,\n#   host_total_listings_count <dbl>, host_verifications <chr>, …\n\n# Skim through data\nskim(airbnb_data)\n\n\nData summary\n\n\nName\nairbnb_data\n\n\nNumber of rows\n41533\n\n\nNumber of columns\n75\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n25\n\n\nDate\n5\n\n\nlogical\n8\n\n\nnumeric\n37\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nlisting_url\n0\n1.00\n33\n47\n0\n41533\n0\n\n\nsource\n0\n1.00\n11\n15\n0\n2\n0\n\n\nname\n11\n1.00\n1\n248\n0\n40242\n0\n\n\ndescription\n785\n0.98\n1\n1000\n0\n37137\n0\n\n\nneighborhood_overview\n17443\n0.58\n1\n1000\n0\n19392\n0\n\n\npicture_url\n0\n1.00\n60\n126\n0\n40390\n0\n\n\nhost_url\n0\n1.00\n38\n43\n0\n26832\n0\n\n\nhost_name\n5\n1.00\n1\n35\n0\n9628\n0\n\n\nhost_location\n7745\n0.81\n5\n40\n0\n1104\n0\n\n\nhost_about\n18316\n0.56\n1\n7309\n0\n14151\n26\n\n\nhost_response_time\n5\n1.00\n3\n18\n0\n5\n0\n\n\nhost_response_rate\n5\n1.00\n2\n4\n0\n68\n0\n\n\nhost_acceptance_rate\n5\n1.00\n2\n4\n0\n99\n0\n\n\nhost_thumbnail_url\n5\n1.00\n55\n106\n0\n26362\n0\n\n\nhost_picture_url\n5\n1.00\n57\n109\n0\n26362\n0\n\n\nhost_neighbourhood\n8189\n0.80\n3\n50\n0\n539\n0\n\n\nhost_verifications\n0\n1.00\n2\n32\n0\n8\n0\n\n\nneighbourhood\n17443\n0.58\n13\n55\n0\n191\n0\n\n\nneighbourhood_cleansed\n0\n1.00\n4\n25\n0\n223\n0\n\n\nneighbourhood_group_cleansed\n0\n1.00\n5\n13\n0\n5\n0\n\n\nproperty_type\n0\n1.00\n4\n34\n0\n80\n0\n\n\nroom_type\n0\n1.00\n10\n15\n0\n4\n0\n\n\nbathrooms_text\n77\n1.00\n6\n17\n0\n30\n0\n\n\namenities\n0\n1.00\n2\n2028\n0\n35522\n0\n\n\nprice\n0\n1.00\n5\n10\n0\n1287\n0\n\n\n\nVariable type: Date\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nmedian\nn_unique\n\n\n\n\nlast_scraped\n0\n1.00\n2022-12-04\n2022-12-05\n2022-12-05\n2\n\n\nhost_since\n5\n1.00\n2008-08-22\n2022-12-02\n2016-04-04\n4649\n\n\ncalendar_last_scraped\n0\n1.00\n2022-12-04\n2022-12-05\n2022-12-05\n2\n\n\nfirst_review\n9393\n0.77\n2009-04-23\n2022-12-04\n2019-12-15\n3772\n\n\nlast_review\n9393\n0.77\n2011-05-12\n2022-12-04\n2022-09-15\n2715\n\n\n\nVariable type: logical\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\ncount\n\n\n\n\nhost_is_superhost\n29\n1\n0.21\nFAL: 32635, TRU: 8869\n\n\nhost_has_profile_pic\n5\n1\n0.98\nTRU: 40904, FAL: 624\n\n\nhost_identity_verified\n5\n1\n0.85\nTRU: 35262, FAL: 6266\n\n\nbathrooms\n41533\n0\nNaN\n:\n\n\ncalendar_updated\n41533\n0\nNaN\n:\n\n\nhas_availability\n0\n1\n0.85\nTRU: 35281, FAL: 6252\n\n\nlicense\n41533\n0\nNaN\n:\n\n\ninstant_bookable\n0\n1\n0.20\nFAL: 33123, TRU: 8410\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nid\n0\n1.00\n1.728318e+17\n2.974371e+17\n2.59500e+03\n1.835861e+07\n4.117861e+07\n5.477978e+17\n7.741268e+17\n▇▁▁▁▂\n\n\nscrape_id\n0\n1.00\n2.022120e+13\n0.000000e+00\n2.02212e+13\n2.022120e+13\n2.022120e+13\n2.022120e+13\n2.022120e+13\n▁▁▇▁▁\n\n\nhost_id\n0\n1.00\n1.400636e+08\n1.526932e+08\n2.43800e+03\n1.491162e+07\n6.561181e+07\n2.418897e+08\n4.899967e+08\n▇▂▂▁▂\n\n\nhost_listings_count\n5\n1.00\n8.662000e+01\n5.183500e+02\n1.00000e+00\n1.000000e+00\n2.000000e+00\n5.000000e+00\n4.559000e+03\n▇▁▁▁▁\n\n\nhost_total_listings_count\n5\n1.00\n1.362600e+02\n7.735100e+02\n1.00000e+00\n1.000000e+00\n3.000000e+00\n7.000000e+00\n1.201700e+04\n▇▁▁▁▁\n\n\nlatitude\n0\n1.00\n4.073000e+01\n6.000000e-02\n4.05000e+01\n4.069000e+01\n4.072000e+01\n4.076000e+01\n4.091000e+01\n▁▂▇▅▁\n\n\nlongitude\n0\n1.00\n-7.394000e+01\n6.000000e-02\n-7.42500e+01\n-7.398000e+01\n-7.395000e+01\n-7.392000e+01\n-7.371000e+01\n▁▁▇▂▁\n\n\naccommodates\n0\n1.00\n2.960000e+00\n2.080000e+00\n0.00000e+00\n2.000000e+00\n2.000000e+00\n4.000000e+00\n1.600000e+01\n▇▃▁▁▁\n\n\nbedrooms\n3822\n0.91\n1.380000e+00\n7.600000e-01\n1.00000e+00\n1.000000e+00\n1.000000e+00\n2.000000e+00\n1.400000e+01\n▇▁▁▁▁\n\n\nbeds\n941\n0.98\n1.650000e+00\n1.160000e+00\n1.00000e+00\n1.000000e+00\n1.000000e+00\n2.000000e+00\n4.200000e+01\n▇▁▁▁▁\n\n\nminimum_nights\n0\n1.00\n1.859000e+01\n3.070000e+01\n1.00000e+00\n2.000000e+00\n1.000000e+01\n3.000000e+01\n1.250000e+03\n▇▁▁▁▁\n\n\nmaximum_nights\n0\n1.00\n5.324173e+04\n1.053830e+07\n1.00000e+00\n6.000000e+01\n3.650000e+02\n1.125000e+03\n2.147484e+09\n▇▁▁▁▁\n\n\nminimum_minimum_nights\n14\n1.00\n1.864000e+01\n3.239000e+01\n1.00000e+00\n2.000000e+00\n7.000000e+00\n3.000000e+01\n1.250000e+03\n▇▁▁▁▁\n\n\nmaximum_minimum_nights\n14\n1.00\n2.297000e+01\n4.853000e+01\n1.00000e+00\n2.000000e+00\n1.400000e+01\n3.000000e+01\n1.250000e+03\n▇▁▁▁▁\n\n\nminimum_maximum_nights\n14\n1.00\n1.243053e+06\n5.161702e+07\n1.00000e+00\n2.700000e+02\n1.125000e+03\n1.125000e+03\n2.147484e+09\n▇▁▁▁▁\n\n\nmaximum_maximum_nights\n14\n1.00\n2.122356e+06\n6.745119e+07\n1.00000e+00\n3.650000e+02\n1.125000e+03\n1.125000e+03\n2.147484e+09\n▇▁▁▁▁\n\n\nminimum_nights_avg_ntm\n14\n1.00\n2.251000e+01\n4.738000e+01\n1.00000e+00\n2.000000e+00\n1.000000e+01\n3.000000e+01\n1.250000e+03\n▇▁▁▁▁\n\n\nmaximum_nights_avg_ntm\n14\n1.00\n1.398113e+06\n5.294218e+07\n1.00000e+00\n3.650000e+02\n1.125000e+03\n1.125000e+03\n2.147484e+09\n▇▁▁▁▁\n\n\navailability_30\n0\n1.00\n7.900000e+00\n1.014000e+01\n0.00000e+00\n0.000000e+00\n2.000000e+00\n1.500000e+01\n3.000000e+01\n▇▂▁▁▂\n\n\navailability_60\n0\n1.00\n2.192000e+01\n2.210000e+01\n0.00000e+00\n0.000000e+00\n1.800000e+01\n4.200000e+01\n6.000000e+01\n▇▁▂▂▃\n\n\navailability_90\n0\n1.00\n3.681000e+01\n3.487000e+01\n0.00000e+00\n0.000000e+00\n3.300000e+01\n7.000000e+01\n9.000000e+01\n▇▁▁▃▅\n\n\navailability_365\n0\n1.00\n1.432900e+02\n1.442800e+02\n0.00000e+00\n0.000000e+00\n8.700000e+01\n3.120000e+02\n3.650000e+02\n▇▂▂▁▅\n\n\nnumber_of_reviews\n0\n1.00\n2.620000e+01\n5.618000e+01\n0.00000e+00\n1.000000e+00\n5.000000e+00\n2.500000e+01\n1.666000e+03\n▇▁▁▁▁\n\n\nnumber_of_reviews_ltm\n0\n1.00\n7.980000e+00\n1.856000e+01\n0.00000e+00\n0.000000e+00\n1.000000e+00\n8.000000e+00\n9.920000e+02\n▇▁▁▁▁\n\n\nnumber_of_reviews_l30d\n0\n1.00\n6.700000e-01\n1.550000e+00\n0.00000e+00\n0.000000e+00\n0.000000e+00\n1.000000e+00\n7.400000e+01\n▇▁▁▁▁\n\n\nreview_scores_rating\n9393\n0.77\n4.630000e+00\n7.200000e-01\n0.00000e+00\n4.600000e+00\n4.830000e+00\n5.000000e+00\n5.000000e+00\n▁▁▁▁▇\n\n\nreview_scores_accuracy\n9841\n0.76\n4.750000e+00\n4.600000e-01\n0.00000e+00\n4.710000e+00\n4.890000e+00\n5.000000e+00\n5.000000e+00\n▁▁▁▁▇\n\n\nreview_scores_cleanliness\n9831\n0.76\n4.630000e+00\n5.400000e-01\n0.00000e+00\n4.500000e+00\n4.800000e+00\n5.000000e+00\n5.000000e+00\n▁▁▁▁▇\n\n\nreview_scores_checkin\n9845\n0.76\n4.820000e+00\n4.100000e-01\n0.00000e+00\n4.800000e+00\n4.950000e+00\n5.000000e+00\n5.000000e+00\n▁▁▁▁▇\n\n\nreview_scores_communication\n9836\n0.76\n4.810000e+00\n4.300000e-01\n0.00000e+00\n4.800000e+00\n4.960000e+00\n5.000000e+00\n5.000000e+00\n▁▁▁▁▇\n\n\nreview_scores_location\n9848\n0.76\n4.740000e+00\n4.100000e-01\n0.00000e+00\n4.640000e+00\n4.860000e+00\n5.000000e+00\n5.000000e+00\n▁▁▁▁▇\n\n\nreview_scores_value\n9848\n0.76\n4.650000e+00\n4.900000e-01\n0.00000e+00\n4.550000e+00\n4.770000e+00\n4.950000e+00\n5.000000e+00\n▁▁▁▁▇\n\n\ncalculated_host_listings_count\n0\n1.00\n2.063000e+01\n6.887000e+01\n1.00000e+00\n1.000000e+00\n1.000000e+00\n4.000000e+00\n4.870000e+02\n▇▁▁▁▁\n\n\ncalculated_host_listings_count_entire_homes\n0\n1.00\n1.131000e+01\n5.645000e+01\n0.00000e+00\n0.000000e+00\n1.000000e+00\n1.000000e+00\n4.870000e+02\n▇▁▁▁▁\n\n\ncalculated_host_listings_count_private_rooms\n0\n1.00\n9.200000e+00\n4.009000e+01\n0.00000e+00\n0.000000e+00\n0.000000e+00\n2.000000e+00\n3.450000e+02\n▇▁▁▁▁\n\n\ncalculated_host_listings_count_shared_rooms\n0\n1.00\n5.000000e-02\n5.900000e-01\n0.00000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n1.500000e+01\n▇▁▁▁▁\n\n\nreviews_per_month\n9393\n0.77\n1.280000e+00\n1.940000e+00\n1.00000e-02\n1.400000e-01\n5.800000e-01\n1.880000e+00\n1.029800e+02\n▇▁▁▁▁"
  },
  {
    "objectID": "proposal.html#introduction-and-data-1",
    "href": "proposal.html#introduction-and-data-1",
    "title": "Wondrous Raichu",
    "section": "Introduction and data",
    "text": "Introduction and data\n\nIdentify the source of the data.\nThe dataset comes from Yelp Dataset (https://www.yelp.com/dataset), which provides a subset of the businesses, reviews, and user data on Yelp.\nState when and how it was originally collected (by the original data curator, not necessarily how you found the data).\nThe Yelp dataset was originally collected by Yelp’s data team and is publicly available for research and educational purposes. The dataset includes information on businesses located in 10 metropolitan areas in four countries: the United States, Canada, the United Kingdom, and Germany.\nWrite a brief description of the observations.\nThe dataset is divided into several JSON files:\n\nbusiness.json contains business data including location data, attributes, and categories\nreview.json contains fill review text data \nuser.json contains user data and all the metadata associated with users\ncheckin.json contains data on checkins on a business\ntip.json contains data on tips written by a user on a business\n\nIn this proposal, we will focus on the data outlined in business.json. The business.json file contains location details (address, city, state, etc.), number of stars, as well as number of reviews among other things."
  },
  {
    "objectID": "proposal.html#research-question",
    "href": "proposal.html#research-question",
    "title": "Wondrous Raichu",
    "section": "Research question",
    "text": "Research question\n\nAre there differences in the way that customers review chain vs. independent restaurants, and do these differences vary depending on the type of cuisine or location?\nIn this research question, we aim to understand how customers view chain and independent restaurants. Customer perceptions can be analyzed through ratings and reviews. There are five variables: three independent variables (i.e., type of restaurant, type of cuisine, and location) and two dependent variables (i.e., ratings and reviews). Ratings are quantitative variables, while reviews, type of restaurant, type of cuisine, and location are categorical variables.\nThis research question is important because it can help restaurant owners and managers to better understand customer perceptions and preferences towards chain and independent restaurants. By examining whether differences in customer reviews vary based on cuisine type or location, insights can be gained into the factors that influence customer satisfaction and provide guidance on how to improve customer experiences.\nOur hypothesis is that customers may perceive chain and independent restaurants differently, with chain restaurants being perceived as more consistent and reliable in terms of quality and service, while independent restaurants may be seen as more unique and offering more personalized experiences. The differences in customer perceptions may also vary depending on the type of cuisine or location, with certain cuisines or cities having a stronger preference for chain or independent restaurants."
  },
  {
    "objectID": "proposal.html#glimpse-of-data-1",
    "href": "proposal.html#glimpse-of-data-1",
    "title": "Wondrous Raichu",
    "section": "Glimpse of data",
    "text": "Glimpse of data\n\n# Consulted Professor Soltoff on how to rectangle dataset\nyelp_raw <- read_lines(file = \"data/yelp_data/yelp_academic_dataset_business.json\")\n\nyelp_list <- map(.x = yelp_raw, .f = fromJSON)\n\nyelp_data <- tibble(yelp = yelp_list) |>\n  unnest_wider(col = yelp)\n\n# Preview some rows\nhead(yelp_data)\n\n# A tibble: 6 × 14\n  business_id     name  address city  state postal_code latitude longitude stars\n  <chr>           <chr> <chr>   <chr> <chr> <chr>          <dbl>     <dbl> <dbl>\n1 Pns2l4eNsfO8kk… Abby… 1616 C… Sant… CA    93101           34.4    -120.    5  \n2 mpf3x-BjTdTEA3… The … 87 Gra… Afft… MO    63123           38.6     -90.3   3  \n3 tUFrWirKiKi_TA… Targ… 5255 E… Tucs… AZ    85711           32.2    -111.    3.5\n4 MTSW4McQd7CbVt… St H… 935 Ra… Phil… PA    19107           40.0     -75.2   4  \n5 mWMc6_wTdE0EUB… Perk… 101 Wa… Gree… PA    18054           40.3     -75.5   4.5\n6 CF33F8-E6oudUQ… Soni… 615 S … Ashl… TN    37015           36.3     -87.1   2  \n# ℹ 5 more variables: review_count <int>, is_open <int>, attributes <list>,\n#   categories <chr>, hours <list>\n\n# Skim through data\nskim(yelp_data)\n\n\nData summary\n\n\nName\nyelp_data\n\n\nNumber of rows\n150346\n\n\nNumber of columns\n14\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n7\n\n\nlist\n2\n\n\nnumeric\n5\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nbusiness_id\n0\n1\n22\n22\n0\n150346\n0\n\n\nname\n0\n1\n2\n64\n0\n114117\n0\n\n\naddress\n0\n1\n0\n110\n5127\n122844\n0\n\n\ncity\n0\n1\n3\n52\n0\n1416\n0\n\n\nstate\n0\n1\n2\n3\n0\n27\n0\n\n\npostal_code\n0\n1\n0\n7\n73\n3362\n0\n\n\ncategories\n103\n1\n4\n503\n0\n83160\n0\n\n\n\nVariable type: list\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nn_unique\nmin_length\nmax_length\n\n\n\n\nattributes\n0\n1\n87662\n0\n33\n\n\nhours\n0\n1\n49823\n0\n7\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nlatitude\n0\n1\n36.67\n5.87\n27.56\n32.19\n38.78\n39.95\n53.68\n▅▂▇▁▁\n\n\nlongitude\n0\n1\n-89.36\n14.92\n-120.10\n-90.36\n-86.12\n-75.42\n-73.20\n▅▁▁▇▇\n\n\nstars\n0\n1\n3.60\n0.97\n1.00\n3.00\n3.50\n4.50\n5.00\n▁▃▂▇▆\n\n\nreview_count\n0\n1\n44.87\n121.12\n5.00\n8.00\n15.00\n37.00\n7568.00\n▇▁▁▁▁\n\n\nis_open\n0\n1\n0.80\n0.40\n0.00\n1.00\n1.00\n1.00\n1.00\n▂▁▁▁▇"
  },
  {
    "objectID": "proposal.html#introduction-and-data-2",
    "href": "proposal.html#introduction-and-data-2",
    "title": "Wondrous Raichu",
    "section": "Introduction and data",
    "text": "Introduction and data\n\nIdentify the source of the data.\nThe dataset was downloaded from Kaggle (https://www.kaggle.com/code/ahmetburabua/drive-to-survive/input?select=final.csv).\nState when and how it was originally collected (by the original data curator, not necessarily how you found the data).\nThe dataset was created by Ahmet Buğra Buğa, a data analyst at Mathrics (based on the Kaggle account). The account did not say much about the data curation process other than the fact that “the dataset was collected from public places and combined.” We presume that the data was scraped from sources like Wikipedia and the Ergast Developer API (http://ergast.com/mrd/). In the Kaggle page, we can also access yearly race data from 1983-2021. The Kaggler was able to compress the data into one “final.csv” file.\nWrite a brief description of the observations.\nThe observations included in the “final.csv” file contain all the pieces of information relevant to a particular race. The dataset tells you which circuit the race is on, whether the weather during the race is warm, cold, dry, wet, and/or cloudy, and what grid position a driver started the race in among other things."
  },
  {
    "objectID": "proposal.html#research-question-1",
    "href": "proposal.html#research-question-1",
    "title": "Wondrous Raichu",
    "section": "Research question",
    "text": "Research question\n\nWhat factors are most strongly associated with drivers’ success in Formula 1 racing, and how have these factors changed over time?\nIn this research question, we aim to understand the factors that contribute to success in Formula 1 racing, including the race circuit, weather, starting grid position, and drivers’ ages. Here, we equate drivers’ success with placing a podium in the race (i.e., first, second, and third place). There are five variables: four independent variables (i.e., the race circuit, weather, starting grid position, and drivers’ ages) and one dependent variable (i.e. finishing grid position). Starting and finishing grid positions and drivers’ ages are quantitative variables, while race circuit and weather are categorical variables. Other quantitative variables we could include in our analysis when it comes to success include driver points and qualifying times.\nFormula 1 racing is one of the most popular and competitive sports in the world, and understanding the factors that contribute to success in this field is crucial for teams, drivers, and fans. By identifying the most important factors associated with success in Formula 1 racing, teams can optimize their strategies and improve their chances of winning, while fans can gain a deeper appreciation for the skills and abilities required to excel in this sport. Moreover, studying how these factors have changed over time can provide insights into the evolution of Formula 1 racing and shed light on the impact of technological advancements, changes in regulations, and other factors on the sport.\nOur hypothesis is that warm and dry weather conditions are more conducive to better driver performance compared to cold, cloudy, and/or wet weather. Dry roads provide better traction for tires, enabling drivers to control the car more effectively. On the other hand, wet weather can cause the tires to slip, potentially resulting in loss of control. In cold weather, the tires and mechanical components may not reach optimal operating temperatures, leading to reduced grip and responsiveness of the car.\nFurthermore, we hypothesize that there is an optimal age for drivers in Formula 1, as being too young may lead to lack of experience and being too old may result in slower reaction time."
  },
  {
    "objectID": "proposal.html#glimpse-of-data-2",
    "href": "proposal.html#glimpse-of-data-2",
    "title": "Wondrous Raichu",
    "section": "Glimpse of data",
    "text": "Glimpse of data\n\nf1_data <- read_csv(\"data/f1_data/f1_data.csv\")\n\n# Preview some rows\nhead(f1_data)\n\n# A tibble: 6 × 22\n   ...1 season round circuit_id  weather_warm weather_cold weather_dry\n  <dbl>  <dbl> <dbl> <chr>       <lgl>        <lgl>        <lgl>      \n1    14   1983     1 jacarepagua FALSE        FALSE        TRUE       \n2     5   1983     1 jacarepagua FALSE        FALSE        TRUE       \n3     3   1983     1 jacarepagua FALSE        FALSE        TRUE       \n4     0   1983     1 jacarepagua FALSE        FALSE        TRUE       \n5     6   1983     1 jacarepagua FALSE        FALSE        TRUE       \n6     8   1983     1 jacarepagua FALSE        FALSE        TRUE       \n# ℹ 15 more variables: weather_wet <lgl>, weather_cloudy <lgl>, driver <chr>,\n#   nationality <chr>, constructor <chr>, grid <dbl>, podium <dbl>,\n#   driver_points <dbl>, driver_wins <dbl>, driver_standings_pos <dbl>,\n#   constructor_points <dbl>, constructor_wins <dbl>,\n#   constructor_standings_pos <dbl>, qualifying_time <dbl>, driver_age <dbl>\n\n# Skim through data\nskim(f1_data)\n\n\nData summary\n\n\nName\nf1_data\n\n\nNumber of rows\n14794\n\n\nNumber of columns\n22\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n4\n\n\nlogical\n5\n\n\nnumeric\n13\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ncircuit_id\n0\n1\n3\n14\n0\n50\n0\n\n\ndriver\n0\n1\n3\n18\n0\n232\n0\n\n\nnationality\n0\n1\n4\n13\n0\n34\n0\n\n\nconstructor\n0\n1\n3\n12\n0\n66\n0\n\n\n\nVariable type: logical\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\ncount\n\n\n\n\nweather_warm\n0\n1\n0.39\nFAL: 9063, TRU: 5731\n\n\nweather_cold\n0\n1\n0.02\nFAL: 14473, TRU: 321\n\n\nweather_dry\n0\n1\n0.22\nFAL: 11525, TRU: 3269\n\n\nweather_wet\n0\n1\n0.10\nFAL: 13306, TRU: 1488\n\n\nweather_cloudy\n0\n1\n0.12\nFAL: 12999, TRU: 1795\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\n…1\n0\n1\n7465.31\n4350.15\n0\n3698.25\n7403.5\n11232.75\n15085.0\n▇▇▇▇▇\n\n\nseason\n0\n1\n2001.59\n11.24\n1983\n1992.00\n2001.0\n2012.00\n2021.0\n▇▇▆▇▇\n\n\nround\n0\n1\n9.19\n5.12\n1\n5.00\n9.0\n13.00\n21.0\n▇▆▆▆▁\n\n\ngrid\n0\n1\n11.76\n6.70\n1\n6.00\n12.0\n17.00\n27.0\n▇▆▆▆▂\n\n\npodium\n0\n1\n11.90\n6.77\n1\n6.00\n12.0\n17.00\n27.0\n▇▆▆▆▂\n\n\ndriver_points\n0\n1\n19.94\n42.08\n0\n0.00\n3.0\n19.00\n387.0\n▇▁▁▁▁\n\n\ndriver_wins\n0\n1\n0.36\n1.18\n0\n0.00\n0.0\n0.00\n13.0\n▇▁▁▁▁\n\n\ndriver_standings_pos\n0\n1\n10.66\n7.67\n0\n4.00\n10.0\n17.00\n30.0\n▇▅▅▃▁\n\n\nconstructor_points\n0\n1\n40.06\n81.62\n0\n0.00\n8.0\n41.00\n722.0\n▇▁▁▁▁\n\n\nconstructor_wins\n0\n1\n0.74\n1.95\n0\n0.00\n0.0\n0.00\n18.0\n▇▁▁▁▁\n\n\nconstructor_standings_pos\n0\n1\n5.86\n3.83\n0\n3.00\n6.0\n9.00\n20.0\n▇▆▅▁▁\n\n\nqualifying_time\n0\n1\n2.55\n8.00\n-77\n1.00\n2.1\n3.50\n904.6\n▇▁▁▁▁\n\n\ndriver_age\n0\n1\n28.59\n4.73\n17\n25.00\n28.0\n32.00\n43.0\n▂▇▇▅▁"
  },
  {
    "objectID": "appendicies.html#bathroom-to-bedroom-ratio",
    "href": "appendicies.html#bathroom-to-bedroom-ratio",
    "title": "Analyzing Airbnb Data",
    "section": "Bathroom-to-bedroom ratio",
    "text": "Bathroom-to-bedroom ratio\nThe bathroom-to-bedroom ratio is an interesting factor in determining the price of Airbnb. Usually, luxury stayings tend to have a higher bathroom-to-bedroom ratio, which means there are more bathrooms than bedrooms. We will check if the assumption is true.\n\n# Create a new variable for bathroom-to-bedroom ratio\nratio_listing <- mutate(bathroom_tidy, bath_bed_ratio = as.numeric(bathrooms) / bedrooms)\n\nratio_listing\n\n# A tibble: 42,426 × 6\n        id price bedrooms bathrooms_text bathrooms bath_bed_ratio\n     <dbl> <dbl>    <dbl> <chr>              <dbl>          <dbl>\n 1 8.02e17   143        1 1 bath               1            1    \n 2 7.66e17    30        1 1 shared bath        0.5          0.5  \n 3 6.36e17   157        2 2 baths              2            1    \n 4 7.68e17    89        3 2 baths              2            0.667\n 5 4.92e 7   125        2 1 bath               1            0.5  \n 6 5.21e 7    63        1 1 shared bath        0.5          0.5  \n 7 7.83e17    82        1 1 shared bath        0.5          0.5  \n 8 3.91e 7   118        1 1 bath               1            1    \n 9 6.55e17    49        1 1 shared bath        0.5          0.5  \n10 6.73e 6   115        2 1 bath               1            0.5  \n# ℹ 42,416 more rows\n\n# Create a histogram to visualize the distribution\nratio_listing |>\n  ggplot(aes(x = bath_bed_ratio)) +\n  geom_histogram(binwidth = 0.5, fill = \"#008FD5\", color = \"black\") +\n  labs(title = \"Bathroom-to-bedroom Ratio Distribution\",\n       x = \"Bathroom-to-bedroom Ratio\",\n       y = \"Frequency\") \n\nWarning: Removed 3858 rows containing non-finite values (`stat_bin()`).\n\n\n\n\n\n\nratio_listing |>\n  filter(bath_bed_ratio %in% c(1,2,3,4)) |> \n  ggplot(aes(x = bath_bed_ratio, y = price)) +\n  geom_boxplot() +\n  facet_wrap(vars(bath_bed_ratio)) +\n  scale_y_continuous(limits = quantile(listing$price, c(0, 0.9))) +\n  labs(x = \"Bathroom-to-bedroom ratio\",\n       y = \"Price\",\n       title = \"Price vs. Bathroom-to-bedroom ratio on Airbnb in NYC\")+\n  theme(axis.text.x = element_blank())\n\nWarning: Continuous x aesthetic\nℹ did you forget `aes(group = ...)`?\n\n\nWarning: Removed 2308 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\n\nlogprice_ratio_fit <- linear_reg() |>\n  fit(log(price) ~ bath_bed_ratio, data = ratio_listing)"
  },
  {
    "objectID": "appendicies.html#additive-and-interactive-linear-regressions-with-respect-to-extra-amenities",
    "href": "appendicies.html#additive-and-interactive-linear-regressions-with-respect-to-extra-amenities",
    "title": "Analyzing Airbnb Data",
    "section": "Additive and interactive linear regressions with respect to extra amenities",
    "text": "Additive and interactive linear regressions with respect to extra amenities\nBelow, we fit additive and interactive linear regression models for extra amenities. As expected, we see that the interactive model produced a higher R-squared value than the additive model. Moreover, we see that both models produced R-squared values of above 10%, which suggests that extra amenities are not negligible in affecting price.\n\nlinear_all_interactive <- linear_reg() |>\n  fit(log(price) ~\n        air_conditioning * heating * dishes_and_silverware * \n        cooking_basics * microwave * coffee_maker * washer * dryer, \n      data = extra_all |> drop_na() |> filter(price != 0))\n\nlinear_all_additive <- linear_reg() |>\n  fit(log(price) ~ air_conditioning + heating + dishes_and_silverware + \n        cooking_basics + microwave + coffee_maker + washer + dryer,\n      data = extra_all |> drop_na() |> filter(price != 0))\n\nkable(\n  glance(linear_all_interactive),\n  caption = \n    \"Interactive Linear Regression of log(price) with respect to extra amenities\",\n  align = \"l\") |>\n  kable_classic()\n\n\n\nInteractive Linear Regression of log(price) with respect to extra amenities\n \n  \n    r.squared \n    adj.r.squared \n    sigma \n    statistic \n    p.value \n    df \n    logLik \n    AIC \n    BIC \n    deviance \n    df.residual \n    nobs \n  \n \n\n  \n    0.1748675 \n    0.1700972 \n    0.6607168 \n    36.65805 \n    0 \n    243 \n    -42345.26 \n    85180.51 \n    87300.25 \n    18349.37 \n    42033 \n    42277 \n  \n\n\n\n\nkable(\n  glance(linear_all_additive),\n  caption = \n    \"Additive Linear Regression of log(price) with respect to extra amenities\",\n  align = \"l\") |>\n  kable_classic()\n\n\n\nAdditive Linear Regression of log(price) with respect to extra amenities\n \n  \n    r.squared \n    adj.r.squared \n    sigma \n    statistic \n    p.value \n    df \n    logLik \n    AIC \n    BIC \n    deviance \n    df.residual \n    nobs \n  \n \n\n  \n    0.1164623 \n    0.116295 \n    0.6817975 \n    696.4369 \n    0 \n    8 \n    -43790.92 \n    87601.84 \n    87688.36 \n    19648.19 \n    42268 \n    42277"
  },
  {
    "objectID": "appendicies.html#additive-and-interactive-linear-regressions-with-respect-to-work-from-home-amenities",
    "href": "appendicies.html#additive-and-interactive-linear-regressions-with-respect-to-work-from-home-amenities",
    "title": "Analyzing Airbnb Data",
    "section": "Additive and interactive linear regressions with respect to work-from-home amenities",
    "text": "Additive and interactive linear regressions with respect to work-from-home amenities\nBelow, we fit additive and interactive linear regression models for WFH amenities. The two models produced similar R-squared values, which suggests that WFH amenities are negligible in affecting price.\n\nwfh_interactive <- linear_reg() |>\n  fit(log(price) ~\n        wifi * workspace * quiet, \n      data = wifi_work_quiet |> filter(price != 0))\n\nwfh_additive <- linear_reg() |>\n  fit(log(price) ~\n        wifi + workspace + quiet,\n      data = wifi_work_quiet |> filter(price != 0))\n\nkable(\n  glance(wfh_interactive),\n  caption = \n    \"Interactive Linear Regression of log(price) with respect to WFH criteria\",\n  align = \"l\") |>\n  kable_classic()\n\n\n\nInteractive Linear Regression of log(price) with respect to WFH criteria\n \n  \n    r.squared \n    adj.r.squared \n    sigma \n    statistic \n    p.value \n    df \n    logLik \n    AIC \n    BIC \n    deviance \n    df.residual \n    nobs \n  \n \n\n  \n    0.0159578 \n    0.0157948 \n    0.7195228 \n    97.92261 \n    0 \n    7 \n    -46068.27 \n    92154.54 \n    92232.41 \n    21883.22 \n    42269 \n    42277 \n  \n\n\n\n\nkable(\n  glance(wfh_additive),\n  caption = \n    \"Additive Linear Regression of log(price) with respect to WFH criteria\",\n  align = \"l\") |>\n  kable_classic()\n\n\n\nAdditive Linear Regression of log(price) with respect to WFH criteria\n \n  \n    r.squared \n    adj.r.squared \n    sigma \n    statistic \n    p.value \n    df \n    logLik \n    AIC \n    BIC \n    deviance \n    df.residual \n    nobs \n  \n \n\n  \n    0.0159044 \n    0.0158346 \n    0.7195083 \n    227.7314 \n    0 \n    3 \n    -46069.42 \n    92148.83 \n    92192.09 \n    21884.4 \n    42273 \n    42277"
  },
  {
    "objectID": "appendicies.html#trends-of-host-characteristics",
    "href": "appendicies.html#trends-of-host-characteristics",
    "title": "Analyzing Airbnb Data",
    "section": "Trends of host characteristics",
    "text": "Trends of host characteristics\n\nsuperhosts_perc <-\n  tibble(perc = superhosts$n[2] / sum(superhosts$n) * 100)\n\nidentity_verified_perc <-\n  tibble(perc = identity_verified$n[2] / sum(identity_verified$n) * 100)\n\ncleanliness_perc <- cleanliness |>\n  mutate(perc = n / sum(n) * 100) |>\n  select(cleanliness_score, perc)\n\ncommunication_perc <- communication |>\n  mutate(perc = n / sum(n) * 100) |>\n  select(communication_score, perc)\n\nresponse_perc <- response |>\n  mutate(Percent = n / sum(n) * 100) |>\n  select(Time, Percent)\n\nacceptance <- host |>\n  select(host_acceptance_rate)\n\nacceptance[acceptance == \"N/A\"]  <- NA\n\nacceptance <- na.omit(acceptance)\n\nacceptance <- acceptance |>\n  mutate(\n    host_acceptance_rate = substr(host_acceptance_rate, 1, nchar(host_acceptance_rate)-1),\n    host_acceptance_rate = as.numeric(host_acceptance_rate))\n\nacceptance_perc <-\n  tibble(perc = mean(acceptance$host_acceptance_rate))\n\nhost_char_percs_1 <- tribble(\n  ~ `Host characteristic`, ~ `Percent`,\n  \"Superhost\", superhosts_perc$perc,\n  \"Identity is verified\", identity_verified_perc$perc,\n  \"Host acceptance rate\", acceptance_perc$perc,\n) |> \n  arrange(desc(`Percent`))\n\nhost_char_percs_2 <- tribble(\n  ~ `Rating`, ~ `Cleanliness review`, ~ `Communication review`,\n  cleanliness_perc$cleanliness_score[1], cleanliness_perc$perc[1], communication_perc$perc[1],\n  cleanliness_perc$cleanliness_score[2], cleanliness_perc$perc[2], communication_perc$perc[2],\n  cleanliness_perc$cleanliness_score[3], cleanliness_perc$perc[3], communication_perc$perc[3],\n  cleanliness_perc$cleanliness_score[4], cleanliness_perc$perc[4], communication_perc$perc[4],\n  cleanliness_perc$cleanliness_score[5], cleanliness_perc$perc[5], communication_perc$perc[5],\n)\n\nkable(host_char_percs_1, \n             caption = \"Trends of host characteristics\",\n             align = \"l\") |> \n  kable_classic()\n\n\n\nTrends of host characteristics\n \n  \n    Host characteristic \n    Percent \n  \n \n\n  \n    Identity is verified \n    84.65167 \n  \n  \n    Host acceptance rate \n    84.10369 \n  \n  \n    Superhost \n    23.54234 \n  \n\n\n\n\nkable(host_char_percs_2, \n             caption = \"Trends of host reviews\",\n             align = \"l\") |> \n  kable_classic()\n\n\n\nTrends of host reviews\n \n  \n    Rating \n    Cleanliness review \n    Communication review \n  \n \n\n  \n    Very low \n    0.6000092 \n    0.4763432 \n  \n  \n    Low \n    0.3480969 \n    0.1374067 \n  \n  \n    Medium \n    1.6763615 \n    0.5542069 \n  \n  \n    High \n    7.6352311 \n    2.2809509 \n  \n  \n    Very high \n    89.7403014 \n    96.5510924 \n  \n\n\n\n\nkable(response_perc, \n             caption = \"Host response rate\",\n             align = \"l\") |> \n  kable_classic()\n\n\n\nHost response rate\n \n  \n    Time \n    Percent \n  \n \n\n  \n    a few days or more \n    2.61817 \n  \n  \n    within a day \n    13.08301 \n  \n  \n    within a few hours \n    19.07972 \n  \n  \n    within an hour \n    65.21910"
  },
  {
    "objectID": "appendicies.html#acceptance-rate-hypothesis-testing",
    "href": "appendicies.html#acceptance-rate-hypothesis-testing",
    "title": "Analyzing Airbnb Data",
    "section": "Acceptance rate hypothesis testing",
    "text": "Acceptance rate hypothesis testing\n\naccept <- host |>\n  select(host_acceptance_rate, price) |>\n  mutate(host_acceptance_rate = if_else(\n    0 <= host_acceptance_rate & host_acceptance_rate <= 50, TRUE, FALSE\n  ))\n\npoint_diff_acceptance <- accept |>\n  specify(price ~ host_acceptance_rate) |>\n  calculate(stat = \"diff in means\", order = c(TRUE, FALSE))\n\nnull_dist_acceptance <- accept |>\n  specify(price ~ host_acceptance_rate) |>\n  hypothesize(null = \"independence\") |>\n  generate(reps = 1000, type = \"permute\") |>\n  calculate(stat = \"diff in means\", order = c(TRUE, FALSE))\n\nvisualize(null_dist_acceptance) +\n  shade_p_value(obs_stat = point_diff_acceptance, direction = \"greater\")\n\nWarning in min(diff(unique_loc)): no non-missing arguments to min; returning Inf\n\n\n\n\nget_p_value(null_dist_acceptance,\n            obs_stat = point_diff_acceptance,\n            direction = \"greater\")\n\nWarning: Please be cautious in reporting a p-value of 0. This result is an\napproximation based on the number of `reps` chosen in the `generate()` step. See\n`?get_p_value()` for more information.\n\n\n# A tibble: 1 × 1\n  p_value\n    <dbl>\n1       0"
  },
  {
    "objectID": "appendicies.html#cleanliness-score-hypothesis-testing",
    "href": "appendicies.html#cleanliness-score-hypothesis-testing",
    "title": "Analyzing Airbnb Data",
    "section": "Cleanliness score hypothesis testing",
    "text": "Cleanliness score hypothesis testing\n\nclean <- host |>\n  select(review_scores_cleanliness, price) |>\n  mutate(review_scores_cleanliness = if_else(\n    4.0 < review_scores_cleanliness & review_scores_cleanliness <= 5.0, TRUE, FALSE\n  ))\n\npoint_diff_cleanliness <- clean |>\n  specify(price ~ review_scores_cleanliness) |>\n  calculate(stat = \"diff in means\", order = c(TRUE, FALSE))\n\nnull_dist_cleanliness <- clean |>\n  specify(price ~ review_scores_cleanliness) |>\n  hypothesize(null = \"independence\") |>\n  generate(reps = 1000, type = \"permute\") |>\n  calculate(stat = \"diff in means\", order = c(TRUE, FALSE))\n\nvisualize(null_dist_cleanliness) +\n  shade_p_value(obs_stat = point_diff_cleanliness, direction = \"greater\")\n\nWarning in min(diff(unique_loc)): no non-missing arguments to min; returning Inf\n\n\n\n\nget_p_value(null_dist_cleanliness,\n            obs_stat = point_diff_cleanliness,\n            direction = \"greater\")\n\nWarning: Please be cautious in reporting a p-value of 0. This result is an\napproximation based on the number of `reps` chosen in the `generate()` step. See\n`?get_p_value()` for more information.\n\n\n# A tibble: 1 × 1\n  p_value\n    <dbl>\n1       0"
  },
  {
    "objectID": "appendicies.html#backward-elimination-to-isolate-significant-predictors",
    "href": "appendicies.html#backward-elimination-to-isolate-significant-predictors",
    "title": "Analyzing Airbnb Data",
    "section": "Backward elimination to isolate significant predictors",
    "text": "Backward elimination to isolate significant predictors\n\n# remove overall rating\nall_21_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        wifi +\n        workspace +\n        quiet +\n        host_is_superhost +\n        host_identity_verified +\n        review_scores_cleanliness +\n        review_scores_communication +\n        # review_scores_rating +\n        host_response_time +\n        host_acceptance_rate +\n        air_conditioning +\n        heating +\n        dishes_and_silverware +\n        cooking_basics +\n        microwave +\n        coffee_maker +\n        washer +\n        dryer +\n        room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\n\nglance(all_21_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.608         0.608 0.433     1102.       0    28 -11545. 23150. 23387.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_21_fit)\n\n# A tibble: 29 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              3.83     0.0576      66.5  0        \n 2 neighbourhood_group_cleansedBrooklyn     0.177    0.0142      12.5  1.76e- 35\n 3 neighbourhood_group_cleansedManhattan    0.503    0.0145      34.6  6.62e-255\n 4 neighbourhood_group_cleansedQueens       0.0571   0.0149       3.84 1.25e-  4\n 5 neighbourhood_group_cleansedStaten Is…  -0.0430   0.0283      -1.52 1.28e-  1\n 6 wifiTRUE                                -0.122    0.0344      -3.55 3.85e-  4\n 7 workspaceTRUE                            0.0460   0.00642      7.17 7.90e- 13\n 8 quietTRUE                               -0.0388   0.00764     -5.08 3.74e-  7\n 9 host_is_superhostTRUE                    0.0277   0.00685      4.05 5.24e-  5\n10 host_identity_verifiedTRUE               0.0256   0.00941      2.72 6.60e-  3\n# ℹ 19 more rows\n\ntidy(all_21_fit) |>\n  filter(p.value == max(tidy(all_21_fit)$p.value))\n\n# A tibble: 1 × 5\n  term                                      estimate std.error statistic p.value\n  <chr>                                        <dbl>     <dbl>     <dbl>   <dbl>\n1 neighbourhood_group_cleansedStaten Island  -0.0430    0.0283     -1.52   0.128\n\n\n\n# remove communcation rating\nall_20_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        wifi +\n        workspace +\n        quiet +\n        host_is_superhost +\n        host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        host_response_time +\n        host_acceptance_rate +\n        air_conditioning +\n        heating +\n        dishes_and_silverware +\n        cooking_basics +\n        microwave +\n        coffee_maker +\n        washer +\n        dryer +\n        room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\n\nglance(all_20_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.608         0.608 0.433     1142.       0    27 -11546. 23151. 23380.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_20_fit)\n\n# A tibble: 28 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              3.79     0.0533      71.1  0        \n 2 neighbourhood_group_cleansedBrooklyn     0.176    0.0142      12.4  2.99e- 35\n 3 neighbourhood_group_cleansedManhattan    0.502    0.0145      34.6  1.47e-254\n 4 neighbourhood_group_cleansedQueens       0.0569   0.0149       3.82 1.33e-  4\n 5 neighbourhood_group_cleansedStaten Is…  -0.0437   0.0283      -1.54 1.23e-  1\n 6 wifiTRUE                                -0.123    0.0344      -3.59 3.32e-  4\n 7 workspaceTRUE                            0.0459   0.00642      7.15 9.15e- 13\n 8 quietTRUE                               -0.0392   0.00763     -5.14 2.78e-  7\n 9 host_is_superhostTRUE                    0.0272   0.00684      3.98 6.98e-  5\n10 host_identity_verifiedTRUE               0.0256   0.00941      2.72 6.44e-  3\n# ℹ 18 more rows\n\ntidy(all_20_fit) |>\n  filter(p.value == max(tidy(all_20_fit)$p.value))\n\n# A tibble: 1 × 5\n  term                                      estimate std.error statistic p.value\n  <chr>                                        <dbl>     <dbl>     <dbl>   <dbl>\n1 neighbourhood_group_cleansedStaten Island  -0.0437    0.0283     -1.54   0.123\n\n\n\n# remove identity verify\n\nall_19_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        wifi +\n        workspace +\n        quiet +\n        host_is_superhost +\n        # host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        host_response_time +\n        host_acceptance_rate +\n        air_conditioning +\n        heating +\n        dishes_and_silverware +\n        cooking_basics +\n        microwave +\n        coffee_maker +\n        washer +\n        dryer +\n        room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\n\nglance(all_19_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.608         0.607 0.433     1185.       0    26 -11550. 23156. 23378.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_19_fit)\n\n# A tibble: 27 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              3.81     0.0529      72.0  0        \n 2 neighbourhood_group_cleansedBrooklyn     0.178    0.0142      12.5  8.16e- 36\n 3 neighbourhood_group_cleansedManhattan    0.505    0.0145      34.8  2.08e-257\n 4 neighbourhood_group_cleansedQueens       0.0578   0.0149       3.89 1.02e-  4\n 5 neighbourhood_group_cleansedStaten Is…  -0.0464   0.0283      -1.64 1.01e-  1\n 6 wifiTRUE                                -0.120    0.0344      -3.50 4.65e-  4\n 7 workspaceTRUE                            0.0465   0.00642      7.24 4.49e- 13\n 8 quietTRUE                               -0.0394   0.00763     -5.17 2.41e-  7\n 9 host_is_superhostTRUE                    0.0270   0.00684      3.94 8.19e-  5\n10 review_scores_cleanliness                0.123    0.00670     18.3  3.66e- 74\n# ℹ 17 more rows\n\n\n\n# review dishes and silverware\nall_18_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        wifi +\n        workspace +\n        quiet +\n        host_is_superhost +\n        # host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        host_response_time +\n        host_acceptance_rate +\n        air_conditioning +\n        heating +\n        # dishes_and_silverware +\n        cooking_basics +\n        microwave +\n        coffee_maker +\n        washer +\n        dryer +\n        room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\n\nglance(all_18_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.608         0.607 0.433     1232.       0    25 -11556. 23165. 23378.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_18_fit)\n\n# A tibble: 26 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              3.81     0.0529      72.0  0        \n 2 neighbourhood_group_cleansedBrooklyn     0.177    0.0142      12.5  1.31e- 35\n 3 neighbourhood_group_cleansedManhattan    0.505    0.0145      34.8  1.64e-257\n 4 neighbourhood_group_cleansedQueens       0.0577   0.0149       3.87 1.07e-  4\n 5 neighbourhood_group_cleansedStaten Is…  -0.0454   0.0283      -1.61 1.08e-  1\n 6 wifiTRUE                                -0.120    0.0344      -3.49 4.78e-  4\n 7 workspaceTRUE                            0.0461   0.00642      7.18 7.47e- 13\n 8 quietTRUE                               -0.0400   0.00763     -5.24 1.62e-  7\n 9 host_is_superhostTRUE                    0.0269   0.00685      3.93 8.62e-  5\n10 review_scores_cleanliness                0.122    0.00670     18.2  2.80e- 73\n# ℹ 16 more rows\n\n\n\n# remove superhost\n\nall_17_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        wifi +\n        workspace +\n        quiet +\n        # host_is_superhost +\n        # host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        host_response_time +\n        host_acceptance_rate +\n        air_conditioning +\n        heating +\n        # dishes_and_silverware +\n        cooking_basics +\n        microwave +\n        coffee_maker +\n        washer +\n        dryer +\n        room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\n\nglance(all_17_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.607         0.607 0.433     1282.       0    24 -11563. 23178. 23384.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_17_fit)\n\n# A tibble: 25 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              3.78     0.0523      72.2  0        \n 2 neighbourhood_group_cleansedBrooklyn     0.179    0.0142      12.6  2.39e- 36\n 3 neighbourhood_group_cleansedManhattan    0.504    0.0145      34.7  9.74e-257\n 4 neighbourhood_group_cleansedQueens       0.0584   0.0149       3.93 8.67e-  5\n 5 neighbourhood_group_cleansedStaten Is…  -0.0446   0.0283      -1.58 1.15e-  1\n 6 wifiTRUE                                -0.118    0.0344      -3.44 5.72e-  4\n 7 workspaceTRUE                            0.0470   0.00642      7.31 2.70e- 13\n 8 quietTRUE                               -0.0385   0.00763     -5.05 4.49e-  7\n 9 review_scores_cleanliness                0.127    0.00656     19.4  4.64e- 83\n10 host_response_timewithin a day          -0.145    0.0249      -5.84 5.20e-  9\n# ℹ 15 more rows\n\n\n\n# remove wifi\n\nall_16_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        #wifi +\n        workspace +\n        quiet +\n        # host_is_superhost +\n        # host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        host_response_time +\n        host_acceptance_rate +\n        air_conditioning +\n        heating +\n        # dishes_and_silverware +\n        cooking_basics +\n        microwave +\n        coffee_maker +\n        washer +\n        dryer +\n        room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\n\nglance(all_16_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.607         0.607 0.433     1336.       0    23 -11569. 23188. 23386.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_16_fit)\n\n# A tibble: 24 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              3.67     0.0422      87.0  0        \n 2 neighbourhood_group_cleansedBrooklyn     0.178    0.0142      12.5  8.77e- 36\n 3 neighbourhood_group_cleansedManhattan    0.503    0.0145      34.6  1.92e-255\n 4 neighbourhood_group_cleansedQueens       0.0567   0.0149       3.81 1.38e-  4\n 5 neighbourhood_group_cleansedStaten Is…  -0.0453   0.0283      -1.60 1.10e-  1\n 6 workspaceTRUE                            0.0462   0.00642      7.20 6.29e- 13\n 7 quietTRUE                               -0.0390   0.00763     -5.11 3.19e-  7\n 8 review_scores_cleanliness                0.126    0.00655     19.3  4.17e- 82\n 9 host_response_timewithin a day          -0.146    0.0249      -5.86 4.61e-  9\n10 host_response_timewithin a few hours    -0.214    0.0246      -8.69 4.04e- 18\n# ℹ 14 more rows\n\n\n\n# remove heating\n\nall_15_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        #wifi +\n        workspace +\n        quiet +\n        # host_is_superhost +\n        # host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        host_response_time +\n        host_acceptance_rate +\n        air_conditioning +\n        # heating +\n        # dishes_and_silverware +\n        cooking_basics +\n        microwave +\n        coffee_maker +\n        washer +\n        dryer +\n        room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\n\nglance(all_15_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.607         0.606 0.433     1395.       0    22 -11579. 23207. 23396.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_15_fit)\n\n# A tibble: 23 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              3.63     0.0415      87.6  0        \n 2 neighbourhood_group_cleansedBrooklyn     0.176    0.0142      12.4  5.29e- 35\n 3 neighbourhood_group_cleansedManhattan    0.500    0.0145      34.5  3.65e-253\n 4 neighbourhood_group_cleansedQueens       0.0542   0.0149       3.64 2.72e-  4\n 5 neighbourhood_group_cleansedStaten Is…  -0.0486   0.0283      -1.72 8.56e-  2\n 6 workspaceTRUE                            0.0466   0.00642      7.26 4.13e- 13\n 7 quietTRUE                               -0.0395   0.00763     -5.18 2.24e-  7\n 8 review_scores_cleanliness                0.127    0.00656     19.3  2.38e- 82\n 9 host_response_timewithin a day          -0.145    0.0249      -5.84 5.36e-  9\n10 host_response_timewithin a few hours    -0.215    0.0246      -8.75 2.32e- 18\n# ℹ 13 more rows\n\n\n\n# remove acceptance rate\n\nall_14_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        #wifi +\n        workspace +\n        quiet +\n        # host_is_superhost +\n        # host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        host_response_time +\n        # host_acceptance_rate +\n        air_conditioning +\n        # heating +\n        # dishes_and_silverware +\n        cooking_basics +\n        microwave +\n        coffee_maker +\n        washer +\n        dryer +\n        room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\n\nglance(all_14_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.606         0.606 0.434     1457.       0    21 -11595. 23236. 23417.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_14_fit)\n\n# A tibble: 22 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              3.67     0.0409      89.9  0        \n 2 neighbourhood_group_cleansedBrooklyn     0.173    0.0142      12.2  3.44e- 34\n 3 neighbourhood_group_cleansedManhattan    0.498    0.0145      34.3  9.23e-251\n 4 neighbourhood_group_cleansedQueens       0.0544   0.0149       3.65 2.60e-  4\n 5 neighbourhood_group_cleansedStaten Is…  -0.0480   0.0283      -1.69 9.03e-  2\n 6 workspaceTRUE                            0.0482   0.00642      7.51 6.31e- 14\n 7 quietTRUE                               -0.0396   0.00764     -5.19 2.17e-  7\n 8 review_scores_cleanliness                0.127    0.00656     19.3  1.87e- 82\n 9 host_response_timewithin a day          -0.123    0.0246      -4.99 6.19e-  7\n10 host_response_timewithin a few hours    -0.179    0.0237      -7.53 5.17e- 14\n# ℹ 12 more rows\n\n\n\n# remove response_time\n\nall_13_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        #wifi +\n        workspace +\n        quiet +\n        # host_is_superhost +\n        # host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        # host_response_time +\n        # host_acceptance_rate +\n        air_conditioning +\n        # heating +\n        # dishes_and_silverware +\n        cooking_basics +\n        microwave +\n        coffee_maker +\n        washer +\n        dryer +\n        room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\n\nglance(all_13_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.603         0.603 0.435     1681.       0    18 -11663. 23367. 23525.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_13_fit)\n\n# A tibble: 19 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              3.54     0.0349     102.   0        \n 2 neighbourhood_group_cleansedBrooklyn     0.170    0.0142      11.9  9.90e- 33\n 3 neighbourhood_group_cleansedManhattan    0.494    0.0146      34.0  1.12e-245\n 4 neighbourhood_group_cleansedQueens       0.0510   0.0149       3.41 6.41e-  4\n 5 neighbourhood_group_cleansedStaten Is…  -0.0468   0.0284      -1.65 9.97e-  2\n 6 workspaceTRUE                            0.0477   0.00642      7.42 1.20e- 13\n 7 quietTRUE                               -0.0432   0.00765     -5.65 1.66e-  8\n 8 review_scores_cleanliness                0.130    0.00657     19.8  3.60e- 86\n 9 air_conditioningTRUE                     0.0530   0.00675      7.84 4.59e- 15\n10 cooking_basicsTRUE                      -0.0442   0.00829     -5.33 1.02e-  7\n11 microwaveTRUE                           -0.0827   0.00774    -10.7  1.38e- 26\n12 coffee_makerTRUE                         0.0620   0.00772      8.02 1.09e- 15\n13 washerTRUE                               0.112    0.00669     16.7  3.01e- 62\n14 dryerTRUE                                0.110    0.00878     12.6  3.67e- 36\n15 room_typeHotel room                      0.303    0.0411       7.35 2.01e- 13\n16 room_typePrivate room                   -0.527    0.00760    -69.3  0        \n17 room_typeShared room                    -0.858    0.0279     -30.8  5.28e-203\n18 bedrooms                                 0.183    0.00498     36.8  8.56e-287\n19 bathrooms                                0.292    0.00900     32.4  4.87e-225\n\n\n\n# remove cooking basics\n\nall_12_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        #wifi +\n        workspace +\n        quiet +\n        # host_is_superhost +\n        # host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        # host_response_time +\n        # host_acceptance_rate +\n        air_conditioning +\n        # heating +\n        # dishes_and_silverware +\n        # cooking_basics +\n        microwave +\n        coffee_maker +\n        washer +\n        dryer +\n        room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\n\nglance(all_12_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.603         0.603 0.435     1776.       0    17 -11678. 23393. 23543.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_12_fit)\n\n# A tibble: 18 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              3.53     0.0348     101.   0        \n 2 neighbourhood_group_cleansedBrooklyn     0.169    0.0142      11.9  1.83e- 32\n 3 neighbourhood_group_cleansedManhattan    0.497    0.0146      34.1  3.52e-248\n 4 neighbourhood_group_cleansedQueens       0.0539   0.0149       3.61 3.07e-  4\n 5 neighbourhood_group_cleansedStaten Is…  -0.0435   0.0284      -1.53 1.26e-  1\n 6 workspaceTRUE                            0.0437   0.00638      6.84 8.00e- 12\n 7 quietTRUE                               -0.0436   0.00765     -5.69 1.29e-  8\n 8 review_scores_cleanliness                0.130    0.00658     19.7  1.63e- 85\n 9 air_conditioningTRUE                     0.0543   0.00675      8.04 9.34e- 16\n10 microwaveTRUE                           -0.0950   0.00739    -12.9  1.19e- 37\n11 coffee_makerTRUE                         0.0533   0.00755      7.05 1.80e- 12\n12 washerTRUE                               0.110    0.00669     16.4  5.04e- 60\n13 dryerTRUE                                0.103    0.00868     11.9  1.37e- 32\n14 room_typeHotel room                      0.323    0.0410       7.88 3.43e- 15\n15 room_typePrivate room                   -0.522    0.00755    -69.2  0        \n16 room_typeShared room                    -0.859    0.0279     -30.7  7.59e-203\n17 bedrooms                                 0.182    0.00498     36.6  5.01e-284\n18 bathrooms                                0.294    0.00899     32.7  7.23e-229\n\n\n\n# remove quiet \n\nall_11_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        #wifi +\n        workspace +\n        #quiet +\n        # host_is_superhost +\n        # host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        # host_response_time +\n        # host_acceptance_rate +\n        air_conditioning +\n        # heating +\n        # dishes_and_silverware +\n        # cooking_basics +\n        microwave +\n        coffee_maker +\n        washer +\n        dryer +\n        room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\n\nglance(all_11_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.602         0.602 0.436     1882.       0    16 -11694. 23423. 23566.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_11_fit)\n\n# A tibble: 17 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              3.53     0.0348     101.   0        \n 2 neighbourhood_group_cleansedBrooklyn     0.170    0.0143      11.9  1.68e- 32\n 3 neighbourhood_group_cleansedManhattan    0.497    0.0146      34.1  2.33e-248\n 4 neighbourhood_group_cleansedQueens       0.0542   0.0149       3.63 2.87e-  4\n 5 neighbourhood_group_cleansedStaten Is…  -0.0438   0.0284      -1.54 1.23e-  1\n 6 workspaceTRUE                            0.0431   0.00639      6.75 1.54e- 11\n 7 review_scores_cleanliness                0.128    0.00658     19.4  2.46e- 83\n 8 air_conditioningTRUE                     0.0555   0.00675      8.21 2.36e- 16\n 9 microwaveTRUE                           -0.0947   0.00739    -12.8  2.09e- 37\n10 coffee_makerTRUE                         0.0526   0.00756      6.96 3.45e- 12\n11 washerTRUE                               0.110    0.00669     16.4  5.77e- 60\n12 dryerTRUE                                0.102    0.00869     11.7  9.04e- 32\n13 room_typeHotel room                      0.331    0.0410       8.08 6.70e- 16\n14 room_typePrivate room                   -0.520    0.00755    -69.0  0        \n15 room_typeShared room                    -0.852    0.0279     -30.5  6.27e-200\n16 bedrooms                                 0.183    0.00499     36.7  4.53e-286\n17 bathrooms                                0.296    0.00899     32.9  2.20e-231\n\n\n\n# remove workspace\n\nall_10_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        #wifi +\n        # workspace +\n        #quiet +\n        # host_is_superhost +\n        # host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        # host_response_time +\n        # host_acceptance_rate +\n        air_conditioning +\n        # heating +\n        # dishes_and_silverware +\n        # cooking_basics +\n        microwave +\n        coffee_maker +\n        washer +\n        dryer +\n        room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\n\nglance(all_10_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.601         0.601 0.436     2000.       0    15 -11716. 23467. 23601.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_10_fit)\n\n# A tibble: 16 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              3.54     0.0348     102.   0        \n 2 neighbourhood_group_cleansedBrooklyn     0.170    0.0143      11.9  1.23e- 32\n 3 neighbourhood_group_cleansedManhattan    0.496    0.0146      34.0  2.48e-246\n 4 neighbourhood_group_cleansedQueens       0.0540   0.0150       3.61 3.11e-  4\n 5 neighbourhood_group_cleansedStaten Is…  -0.0455   0.0285      -1.60 1.10e-  1\n 6 review_scores_cleanliness                0.129    0.00658     19.6  6.29e- 85\n 7 air_conditioningTRUE                     0.0508   0.00673      7.55 4.48e- 14\n 8 microwaveTRUE                           -0.0943   0.00740    -12.7  5.36e- 37\n 9 coffee_makerTRUE                         0.0566   0.00755      7.49 6.94e- 14\n10 washerTRUE                               0.111    0.00669     16.7  6.75e- 62\n11 dryerTRUE                                0.106    0.00868     12.2  6.35e- 34\n12 room_typeHotel room                      0.322    0.0410       7.86 4.03e- 15\n13 room_typePrivate room                   -0.521    0.00756    -68.9  0        \n14 room_typeShared room                    -0.851    0.0280     -30.4  4.45e-199\n15 bedrooms                                 0.183    0.00499     36.6  1.76e-284\n16 bathrooms                                0.297    0.00900     33.0  3.10e-232\n\n\n\n# remove coffee maker\n\nall_9_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        #wifi +\n        # workspace +\n        #quiet +\n        # host_is_superhost +\n        # host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        # host_response_time +\n        # host_acceptance_rate +\n        air_conditioning +\n        # heating +\n        # dishes_and_silverware +\n        # cooking_basics +\n        microwave +\n        # coffee_maker +\n        washer +\n        dryer +\n        room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\n\nglance(all_9_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.600         0.600 0.437     2133.       0    14 -11745. 23521. 23647.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_9_fit)\n\n# A tibble: 15 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              3.54     0.0349     102.   0        \n 2 neighbourhood_group_cleansedBrooklyn     0.170    0.0143      11.9  1.62e- 32\n 3 neighbourhood_group_cleansedManhattan    0.492    0.0146      33.7  2.80e-242\n 4 neighbourhood_group_cleansedQueens       0.0500   0.0150       3.34 8.34e-  4\n 5 neighbourhood_group_cleansedStaten Is…  -0.0419   0.0285      -1.47 1.41e-  1\n 6 review_scores_cleanliness                0.134    0.00656     20.4  1.21e- 91\n 7 air_conditioningTRUE                     0.0467   0.00671      6.96 3.46e- 12\n 8 microwaveTRUE                           -0.0750   0.00695    -10.8  4.54e- 27\n 9 washerTRUE                               0.114    0.00669     17.0  1.79e- 64\n10 dryerTRUE                                0.118    0.00853     13.8  2.11e- 43\n11 room_typeHotel room                      0.312    0.0411       7.61 2.85e- 14\n12 room_typePrivate room                   -0.528    0.00750    -70.4  0        \n13 room_typeShared room                    -0.856    0.0280     -30.6  4.85e-201\n14 bedrooms                                 0.184    0.00500     36.8  3.44e-286\n15 bathrooms                                0.297    0.00902     32.9  1.43e-231\n\n\n\n# remove air conditioning\n\nall_8_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        #wifi +\n        # workspace +\n        #quiet +\n        # host_is_superhost +\n        # host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        # host_response_time +\n        # host_acceptance_rate +\n        # air_conditioning +\n        # heating +\n        # dishes_and_silverware +\n        # cooking_basics +\n        microwave +\n        # coffee_maker +\n        washer +\n        dryer +\n        room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\n\nglance(all_8_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.599         0.599 0.437     2288.       0    13 -11769. 23568. 23686.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_8_fit)\n\n# A tibble: 14 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              3.57     0.0346     103.   0        \n 2 neighbourhood_group_cleansedBrooklyn     0.172    0.0143      12.0  3.99e- 33\n 3 neighbourhood_group_cleansedManhattan    0.496    0.0146      34.0  2.04e-246\n 4 neighbourhood_group_cleansedQueens       0.0494   0.0150       3.30 9.76e-  4\n 5 neighbourhood_group_cleansedStaten Is…  -0.0389   0.0285      -1.36 1.73e-  1\n 6 review_scores_cleanliness                0.133    0.00657     20.3  1.44e- 90\n 7 microwaveTRUE                           -0.0791   0.00694    -11.4  5.15e- 30\n 8 washerTRUE                               0.117    0.00668     17.5  2.04e- 68\n 9 dryerTRUE                                0.120    0.00854     14.0  2.03e- 44\n10 room_typeHotel room                      0.324    0.0411       7.88 3.40e- 15\n11 room_typePrivate room                   -0.529    0.00751    -70.4  0        \n12 room_typeShared room                    -0.853    0.0280     -30.5  4.00e-199\n13 bedrooms                                 0.183    0.00500     36.5  1.12e-282\n14 bathrooms                                0.301    0.00900     33.4  1.06e-238\n\n\n\n# remove room type\nall_7_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        #wifi +\n        # workspace +\n        #quiet +\n        # host_is_superhost +\n        # host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        # host_response_time +\n        # host_acceptance_rate +\n        # air_conditioning +\n        # heating +\n        # dishes_and_silverware +\n        # cooking_basics +\n        microwave +\n        # coffee_maker +\n        washer +\n        dryer +\n        #room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\n\nglance(all_7_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.488         0.488 0.494     1899.       0    10 -14199. 28421. 28516.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_7_fit)\n\n# A tibble: 11 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              2.80     0.0372     75.2   0        \n 2 neighbourhood_group_cleansedBrooklyn     0.198    0.0162     12.3   1.86e- 34\n 3 neighbourhood_group_cleansedManhattan    0.551    0.0165     33.5   2.01e-239\n 4 neighbourhood_group_cleansedQueens       0.0395   0.0169      2.33  1.97e-  2\n 5 neighbourhood_group_cleansedStaten Is…  -0.0118   0.0322     -0.366 7.15e-  1\n 6 review_scores_cleanliness                0.174    0.00739    23.6   3.10e-121\n 7 microwaveTRUE                           -0.0532   0.00780    -6.82  9.09e- 12\n 8 washerTRUE                               0.122    0.00754    16.1   3.24e- 58\n 9 dryerTRUE                                0.138    0.00963    14.3   3.46e- 46\n10 bedrooms                                 0.229    0.00560    40.9   0        \n11 bathrooms                                0.540    0.00948    56.9   0        \n\n\n\n# remove microwave\nall_6_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        #wifi +\n        # workspace +\n        #quiet +\n        # host_is_superhost +\n        # host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        # host_response_time +\n        # host_acceptance_rate +\n        # air_conditioning +\n        # heating +\n        # dishes_and_silverware +\n        # cooking_basics +\n        # microwave +\n        # coffee_maker +\n        washer +\n        dryer +\n        #room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\n\nglance(all_6_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.487         0.487 0.495     2100.       0     9 -14222. 28466. 28552.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_6_fit)\n\n# A tibble: 10 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              2.80     0.0373     75.0   0        \n 2 neighbourhood_group_cleansedBrooklyn     0.205    0.0161     12.7   5.89e- 37\n 3 neighbourhood_group_cleansedManhattan    0.563    0.0164     34.3   8.07e-251\n 4 neighbourhood_group_cleansedQueens       0.0416   0.0169      2.46  1.41e-  2\n 5 neighbourhood_group_cleansedStaten Is…  -0.0120   0.0323     -0.373 7.09e-  1\n 6 review_scores_cleanliness                0.169    0.00736    23.0   2.00e-115\n 7 washerTRUE                               0.117    0.00751    15.6   3.20e- 54\n 8 dryerTRUE                                0.122    0.00936    13.0   1.07e- 38\n 9 bedrooms                                 0.227    0.00560    40.6   0        \n10 bathrooms                                0.541    0.00949    57.0   0        \n\n\n\n# remove washer\nall_5_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        #wifi +\n        # workspace +\n        #quiet +\n        # host_is_superhost +\n        # host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        # host_response_time +\n        # host_acceptance_rate +\n        # air_conditioning +\n        # heating +\n        # dishes_and_silverware +\n        # cooking_basics +\n        # microwave +\n        # coffee_maker +\n        # washer +\n        dryer +\n        #room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\n\nglance(all_5_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.481         0.481 0.498     2305.       0     8 -14342. 28704. 28783.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_5_fit)\n\n# A tibble: 9 × 5\n  term                                    estimate std.error statistic   p.value\n  <chr>                                      <dbl>     <dbl>     <dbl>     <dbl>\n1 (Intercept)                             2.77       0.0375    73.9    0        \n2 neighbourhood_group_cleansedBrooklyn    0.219      0.0162    13.5    1.66e- 41\n3 neighbourhood_group_cleansedManhattan   0.581      0.0164    35.3    5.08e-265\n4 neighbourhood_group_cleansedQueens      0.0372     0.0170     2.18   2.93e-  2\n5 neighbourhood_group_cleansedStaten Isl… 0.000705   0.0325     0.0217 9.83e-  1\n6 review_scores_cleanliness               0.174      0.00740   23.5    2.62e-120\n7 dryerTRUE                               0.151      0.00922   16.4    3.54e- 60\n8 bedrooms                                0.231      0.00562   41.1    0        \n9 bathrooms                               0.560      0.00947   59.1    0        \n\n\n\nbackward_elimination_table <- tribble(\n  ~ `Step`, ~ `Variable eliminated`, ~ `Adjusted R-squared`,\n  1, \"Listing rating\", glance(all_21_fit)$adj.r.squared,\n  2, \"Host communication rating\",glance(all_20_fit)$adj.r.squared,\n  3, \"Host identity is verified\",glance(all_19_fit)$adj.r.squared,\n  4, \"Dishes and silverware\",glance(all_18_fit)$adj.r.squared,\n  5, \"Superhost status\",glance(all_17_fit)$adj.r.squared,\n  6, \"Wifi\",glance(all_16_fit)$adj.r.squared,\n  7, \"Heating\",glance(all_15_fit)$adj.r.squared,\n  8, \"Host acceptance rate\",glance(all_14_fit)$adj.r.squared,\n  9, \"Host response time\",glance(all_13_fit)$adj.r.squared,\n  10, \"Cooking basics\",glance(all_12_fit)$adj.r.squared,\n  11, \"Quiet environment\",glance(all_11_fit)$adj.r.squared,\n  12, \"Dedicated workspace\",glance(all_10_fit)$adj.r.squared,\n  13, \"Coffee maker\",glance(all_9_fit)$adj.r.squared,\n  14, \"Air conditioning\",glance(all_8_fit)$adj.r.squared,\n  15, \"Room type\",glance(all_7_fit)$adj.r.squared,\n  16, \"Microwave\",glance(all_6_fit)$adj.r.squared, \n  17, \"Washer\",glance(all_5_fit)$adj.r.squared \n)\nwrite_csv(backward_elimination_table, \"data/airbnb_data/backward_elimination_table.csv\")"
  },
  {
    "objectID": "appendicies.html#appendix-2a-bathroom-to-bedroom-ratio",
    "href": "appendicies.html#appendix-2a-bathroom-to-bedroom-ratio",
    "title": "Analyzing Airbnb Data",
    "section": "Appendix 2A: Bathroom-to-bedroom ratio",
    "text": "Appendix 2A: Bathroom-to-bedroom ratio\nThe bathroom-to-bedroom ratio is an interesting factor in determining the price of Airbnb. Usually, luxury stayings tend to have a higher bathroom-to-bedroom ratio, which means there are more bathrooms than bedrooms. We will check if the assumption is true.\n\n# Create a new variable for bathroom-to-bedroom ratio\nratio_listing <- mutate(bathroom_tidy, bath_bed_ratio = as.numeric(bathrooms) / bedrooms)\n\nratio_listing\n\n# A tibble: 42,426 × 6\n        id price bedrooms bathrooms_text bathrooms bath_bed_ratio\n     <dbl> <dbl>    <dbl> <chr>              <dbl>          <dbl>\n 1 8.02e17   143        1 1 bath               1            1    \n 2 7.66e17    30        1 1 shared bath        0.5          0.5  \n 3 6.36e17   157        2 2 baths              2            1    \n 4 7.68e17    89        3 2 baths              2            0.667\n 5 4.92e 7   125        2 1 bath               1            0.5  \n 6 5.21e 7    63        1 1 shared bath        0.5          0.5  \n 7 7.83e17    82        1 1 shared bath        0.5          0.5  \n 8 3.91e 7   118        1 1 bath               1            1    \n 9 6.55e17    49        1 1 shared bath        0.5          0.5  \n10 6.73e 6   115        2 1 bath               1            0.5  \n# ℹ 42,416 more rows\n\n# Create a histogram to visualize the distribution\nratio_listing |>\n  ggplot(aes(x = bath_bed_ratio)) +\n  geom_histogram(binwidth = 0.5, fill = \"#008FD5\", color = \"black\") +\n  labs(title = \"Bathroom-to-bedroom Ratio Distribution\",\n       x = \"Bathroom-to-bedroom Ratio\",\n       y = \"Frequency\") \n\nWarning: Removed 3858 rows containing non-finite values (`stat_bin()`).\n\n\n\n\n\n\nratio_listing |>\n  filter(bath_bed_ratio %in% c(1,2,3,4)) |> \n  ggplot(aes(x = bath_bed_ratio, y = price)) +\n  geom_boxplot() +\n  facet_wrap(vars(bath_bed_ratio)) +\n  scale_y_continuous(limits = quantile(listing$price, c(0, 0.9))) +\n  labs(x = \"Bathroom-to-bedroom ratio\",\n       y = \"Price\",\n       title = \"Price vs. Bathroom-to-bedroom ratio on Airbnb in NYC\")+\n  theme(axis.text.x = element_blank())\n\nWarning: Continuous x aesthetic\nℹ did you forget `aes(group = ...)`?\n\n\nWarning: Removed 2308 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\n\nlogprice_ratio_fit <- linear_reg() |>\n  fit(log(price) ~ bath_bed_ratio, data = ratio_listing)"
  },
  {
    "objectID": "appendicies.html#appendix-2b-additive-and-interactive-linear-regressions-with-respect-to-extra-amenities",
    "href": "appendicies.html#appendix-2b-additive-and-interactive-linear-regressions-with-respect-to-extra-amenities",
    "title": "Analyzing Airbnb Data",
    "section": "Appendix 2B: Additive and interactive linear regressions with respect to extra amenities",
    "text": "Appendix 2B: Additive and interactive linear regressions with respect to extra amenities\nBelow, we fit additive and interactive linear regression models for extra amenities. As expected, we see that the interactive model produced a higher R-squared value than the additive model. Moreover, we see that both models produced R-squared values of above 10%, which suggests that extra amenities are not negligible in affecting price.\n\nlinear_all_interactive <- linear_reg() |>\n  fit(log(price) ~\n        air_conditioning * heating * dishes_and_silverware * \n        cooking_basics * microwave * coffee_maker * washer * dryer, \n      data = extra_all |> drop_na() |> filter(price != 0))\n\nlinear_all_additive <- linear_reg() |>\n  fit(log(price) ~ air_conditioning + heating + dishes_and_silverware + \n        cooking_basics + microwave + coffee_maker + washer + dryer,\n      data = extra_all |> drop_na() |> filter(price != 0))\n\nkable(\n  glance(linear_all_interactive),\n  caption = \n    \"Interactive Linear Regression of log(price) with respect to extra amenities\",\n  align = \"l\") |>\n  kable_classic()\n\n\n\nInteractive Linear Regression of log(price) with respect to extra amenities\n \n  \n    r.squared \n    adj.r.squared \n    sigma \n    statistic \n    p.value \n    df \n    logLik \n    AIC \n    BIC \n    deviance \n    df.residual \n    nobs \n  \n \n\n  \n    0.1748675 \n    0.1700972 \n    0.6607168 \n    36.65805 \n    0 \n    243 \n    -42345.26 \n    85180.51 \n    87300.25 \n    18349.37 \n    42033 \n    42277 \n  \n\n\n\n\nkable(\n  glance(linear_all_additive),\n  caption = \n    \"Additive Linear Regression of log(price) with respect to extra amenities\",\n  align = \"l\") |>\n  kable_classic()\n\n\n\nAdditive Linear Regression of log(price) with respect to extra amenities\n \n  \n    r.squared \n    adj.r.squared \n    sigma \n    statistic \n    p.value \n    df \n    logLik \n    AIC \n    BIC \n    deviance \n    df.residual \n    nobs \n  \n \n\n  \n    0.1164623 \n    0.116295 \n    0.6817975 \n    696.4369 \n    0 \n    8 \n    -43790.92 \n    87601.84 \n    87688.36 \n    19648.19 \n    42268 \n    42277"
  },
  {
    "objectID": "appendicies.html#appendix-2c-additive-and-interactive-linear-regressions-with-respect-to-work-from-home-amenities",
    "href": "appendicies.html#appendix-2c-additive-and-interactive-linear-regressions-with-respect-to-work-from-home-amenities",
    "title": "Analyzing Airbnb Data",
    "section": "Appendix 2C: Additive and interactive linear regressions with respect to work-from-home amenities",
    "text": "Appendix 2C: Additive and interactive linear regressions with respect to work-from-home amenities\nBelow, we fit additive and interactive linear regression models for WFH amenities. The two models produced similar R-squared values, which suggests that WFH amenities are negligible in affecting price.\n\nwfh_interactive <- linear_reg() |>\n  fit(log(price) ~\n        wifi * workspace * quiet, \n      data = wifi_work_quiet |> filter(price != 0))\n\nwfh_additive <- linear_reg() |>\n  fit(log(price) ~\n        wifi + workspace + quiet,\n      data = wifi_work_quiet |> filter(price != 0))\n\nkable(\n  glance(wfh_interactive),\n  caption = \n    \"Interactive Linear Regression of log(price) with respect to WFH criteria\",\n  align = \"l\") |>\n  kable_classic()\n\n\n\nInteractive Linear Regression of log(price) with respect to WFH criteria\n \n  \n    r.squared \n    adj.r.squared \n    sigma \n    statistic \n    p.value \n    df \n    logLik \n    AIC \n    BIC \n    deviance \n    df.residual \n    nobs \n  \n \n\n  \n    0.0159578 \n    0.0157948 \n    0.7195228 \n    97.92261 \n    0 \n    7 \n    -46068.27 \n    92154.54 \n    92232.41 \n    21883.22 \n    42269 \n    42277 \n  \n\n\n\n\nkable(\n  glance(wfh_additive),\n  caption = \n    \"Additive Linear Regression of log(price) with respect to WFH criteria\",\n  align = \"l\") |>\n  kable_classic()\n\n\n\nAdditive Linear Regression of log(price) with respect to WFH criteria\n \n  \n    r.squared \n    adj.r.squared \n    sigma \n    statistic \n    p.value \n    df \n    logLik \n    AIC \n    BIC \n    deviance \n    df.residual \n    nobs \n  \n \n\n  \n    0.0159044 \n    0.0158346 \n    0.7195083 \n    227.7314 \n    0 \n    3 \n    -46069.42 \n    92148.83 \n    92192.09 \n    21884.4 \n    42273 \n    42277"
  },
  {
    "objectID": "appendicies.html#appendix-2d-trends-of-host-characteristics",
    "href": "appendicies.html#appendix-2d-trends-of-host-characteristics",
    "title": "Analyzing Airbnb Data",
    "section": "Appendix 2D: Trends of host characteristics",
    "text": "Appendix 2D: Trends of host characteristics\n\nsuperhost_graph\n\n\n\nidentity_verified_graph\n\n\n\ncleanliness_graph\n\n\n\ncommunication_graph\n\n\n\nresponse_time_graph\n\n\n\nacceptance_graph\n\n\n\n\n\nsuperhosts_perc <-\n  tibble(perc = superhosts$n[2] / sum(superhosts$n) * 100)\n\nidentity_verified_perc <-\n  tibble(perc = identity_verified$n[2] / sum(identity_verified$n) * 100)\n\ncleanliness_perc <- cleanliness |>\n  mutate(perc = n / sum(n) * 100) |>\n  select(cleanliness_score, perc)\n\ncommunication_perc <- communication |>\n  mutate(perc = n / sum(n) * 100) |>\n  select(communication_score, perc)\n\nresponse_perc <- response |>\n  mutate(Percent = n / sum(n) * 100) |>\n  select(Time, Percent)\n\nacceptance <- host |>\n  select(host_acceptance_rate)\n\nacceptance[acceptance == \"N/A\"]  <- NA\n\nacceptance <- na.omit(acceptance)\n\nacceptance <- acceptance |>\n  mutate(\n    host_acceptance_rate = substr(host_acceptance_rate, 1, nchar(host_acceptance_rate)-1),\n    host_acceptance_rate = as.numeric(host_acceptance_rate))\n\nacceptance_perc <-\n  tibble(perc = mean(acceptance$host_acceptance_rate))\n\nhost_char_percs_1 <- tribble(\n  ~ `Host characteristic`, ~ `Percent`,\n  \"Superhost\", superhosts_perc$perc,\n  \"Identity is verified\", identity_verified_perc$perc,\n  \"Host acceptance rate\", acceptance_perc$perc,\n) |> \n  arrange(desc(`Percent`))\n\nhost_char_percs_2 <- tribble(\n  ~ `Rating`, ~ `Cleanliness review`, ~ `Communication review`,\n  cleanliness_perc$cleanliness_score[1], cleanliness_perc$perc[1], communication_perc$perc[1],\n  cleanliness_perc$cleanliness_score[2], cleanliness_perc$perc[2], communication_perc$perc[2],\n  cleanliness_perc$cleanliness_score[3], cleanliness_perc$perc[3], communication_perc$perc[3],\n  cleanliness_perc$cleanliness_score[4], cleanliness_perc$perc[4], communication_perc$perc[4],\n  cleanliness_perc$cleanliness_score[5], cleanliness_perc$perc[5], communication_perc$perc[5],\n)\n\nkable(host_char_percs_1, \n             caption = \"Trends of host characteristics\",\n             align = \"l\") |> \n  kable_classic()\n\n\n\nTrends of host characteristics\n \n  \n    Host characteristic \n    Percent \n  \n \n\n  \n    Identity is verified \n    84.65167 \n  \n  \n    Host acceptance rate \n    84.10369 \n  \n  \n    Superhost \n    23.54234 \n  \n\n\n\n\nkable(host_char_percs_2, \n             caption = \"Trends of host reviews\",\n             align = \"l\") |> \n  kable_classic()\n\n\n\nTrends of host reviews\n \n  \n    Rating \n    Cleanliness review \n    Communication review \n  \n \n\n  \n    Very low \n    0.6000092 \n    0.4763432 \n  \n  \n    Low \n    0.3480969 \n    0.1374067 \n  \n  \n    Medium \n    1.6763615 \n    0.5542069 \n  \n  \n    High \n    7.6352311 \n    2.2809509 \n  \n  \n    Very high \n    89.7403014 \n    96.5510924 \n  \n\n\n\n\nkable(response_perc, \n             caption = \"Host response rate\",\n             align = \"l\") |> \n  kable_classic()\n\n\n\nHost response rate\n \n  \n    Time \n    Percent \n  \n \n\n  \n    a few days or more \n    2.61817 \n  \n  \n    within a day \n    13.08301 \n  \n  \n    within a few hours \n    19.07972 \n  \n  \n    within an hour \n    65.21910"
  },
  {
    "objectID": "appendicies.html#appendix-2e-acceptance-rate-hypothesis-testing",
    "href": "appendicies.html#appendix-2e-acceptance-rate-hypothesis-testing",
    "title": "Analyzing Airbnb Data",
    "section": "Appendix 2E: Acceptance rate hypothesis testing",
    "text": "Appendix 2E: Acceptance rate hypothesis testing\n\naccept <- host |>\n  select(host_acceptance_rate, price) |>\n  mutate(host_acceptance_rate = if_else(\n    0 <= host_acceptance_rate & host_acceptance_rate < 51, TRUE, FALSE\n  ))\n\npoint_diff_acceptance <- accept |>\n  specify(price ~ host_acceptance_rate) |>\n  calculate(stat = \"diff in medians\", order = c(TRUE, FALSE))\n\nnull_dist_acceptance <- accept |>\n  specify(price ~ host_acceptance_rate) |>\n  hypothesize(null = \"independence\") |>\n  generate(reps = 1000, type = \"permute\") |>\n  calculate(stat = \"diff in medians\", order = c(TRUE, FALSE))\n\nvisualize(null_dist_acceptance) +\n  shade_p_value(obs_stat = point_diff_acceptance, direction = \"greater\")\n\nWarning in min(diff(unique_loc)): no non-missing arguments to min; returning Inf\n\n\n\n\nget_p_value(null_dist_acceptance,\n            obs_stat = point_diff_acceptance,\n            direction = \"greater\")\n\nWarning: Please be cautious in reporting a p-value of 0. This result is an\napproximation based on the number of `reps` chosen in the `generate()` step. See\n`?get_p_value()` for more information.\n\n\n# A tibble: 1 × 1\n  p_value\n    <dbl>\n1       0"
  },
  {
    "objectID": "appendicies.html#appendix-2f-cleanliness-score-hypothesis-testing",
    "href": "appendicies.html#appendix-2f-cleanliness-score-hypothesis-testing",
    "title": "Analyzing Airbnb Data",
    "section": "Appendix 2F: Cleanliness score hypothesis testing",
    "text": "Appendix 2F: Cleanliness score hypothesis testing\n\nclean <- host |>\n  select(review_scores_cleanliness, price) |>\n  mutate(review_scores_cleanliness = if_else(\n    4.0 < review_scores_cleanliness & review_scores_cleanliness <= 5.0, TRUE, FALSE\n  ))\n\npoint_diff_cleanliness <- clean |>\n  specify(price ~ review_scores_cleanliness) |>\n  calculate(stat = \"diff in medians\", order = c(TRUE, FALSE))\n\nnull_dist_cleanliness <- clean |>\n  specify(price ~ review_scores_cleanliness) |>\n  hypothesize(null = \"independence\") |>\n  generate(reps = 1000, type = \"permute\") |>\n  calculate(stat = \"diff in medians\", order = c(TRUE, FALSE))\n\nvisualize(null_dist_cleanliness) +\n  shade_p_value(obs_stat = point_diff_cleanliness, direction = \"greater\")\n\nWarning in min(diff(unique_loc)): no non-missing arguments to min; returning Inf\n\n\n\n\nget_p_value(null_dist_cleanliness,\n            obs_stat = point_diff_cleanliness,\n            direction = \"greater\")\n\nWarning: Please be cautious in reporting a p-value of 0. This result is an\napproximation based on the number of `reps` chosen in the `generate()` step. See\n`?get_p_value()` for more information.\n\n\n# A tibble: 1 × 1\n  p_value\n    <dbl>\n1       0"
  },
  {
    "objectID": "appendicies.html#appendix-2g-backward-elimination-to-isolate-significant-predictors",
    "href": "appendicies.html#appendix-2g-backward-elimination-to-isolate-significant-predictors",
    "title": "Analyzing Airbnb Data",
    "section": "Appendix 2G: Backward elimination to isolate significant predictors",
    "text": "Appendix 2G: Backward elimination to isolate significant predictors\nWe performed backward elimination on our full multivariate linear regression model to come up with a list of significant predictors.\n\n# remove overall rating\nall_21_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        wifi +\n        workspace +\n        quiet +\n        host_is_superhost +\n        host_identity_verified +\n        review_scores_cleanliness +\n        review_scores_communication +\n        # review_scores_rating +\n        host_response_time +\n        host_acceptance_rate +\n        air_conditioning +\n        heating +\n        dishes_and_silverware +\n        cooking_basics +\n        microwave +\n        coffee_maker +\n        washer +\n        dryer +\n        room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\nglance(all_21_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.608         0.608 0.433     1102.       0    28 -11545. 23150. 23387.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_21_fit)\n\n# A tibble: 29 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              3.83     0.0576      66.5  0        \n 2 neighbourhood_group_cleansedBrooklyn     0.177    0.0142      12.5  1.76e- 35\n 3 neighbourhood_group_cleansedManhattan    0.503    0.0145      34.6  6.62e-255\n 4 neighbourhood_group_cleansedQueens       0.0571   0.0149       3.84 1.25e-  4\n 5 neighbourhood_group_cleansedStaten Is…  -0.0430   0.0283      -1.52 1.28e-  1\n 6 wifiTRUE                                -0.122    0.0344      -3.55 3.85e-  4\n 7 workspaceTRUE                            0.0460   0.00642      7.17 7.90e- 13\n 8 quietTRUE                               -0.0388   0.00764     -5.08 3.74e-  7\n 9 host_is_superhostTRUE                    0.0277   0.00685      4.05 5.24e-  5\n10 host_identity_verifiedTRUE               0.0256   0.00941      2.72 6.60e-  3\n# ℹ 19 more rows\n\n\n\n# remove communcation rating\nall_20_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        wifi +\n        workspace +\n        quiet +\n        host_is_superhost +\n        host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        host_response_time +\n        host_acceptance_rate +\n        air_conditioning +\n        heating +\n        dishes_and_silverware +\n        cooking_basics +\n        microwave +\n        coffee_maker +\n        washer +\n        dryer +\n        room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\nglance(all_20_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.608         0.608 0.433     1142.       0    27 -11546. 23151. 23380.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_20_fit)\n\n# A tibble: 28 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              3.79     0.0533      71.1  0        \n 2 neighbourhood_group_cleansedBrooklyn     0.176    0.0142      12.4  2.99e- 35\n 3 neighbourhood_group_cleansedManhattan    0.502    0.0145      34.6  1.47e-254\n 4 neighbourhood_group_cleansedQueens       0.0569   0.0149       3.82 1.33e-  4\n 5 neighbourhood_group_cleansedStaten Is…  -0.0437   0.0283      -1.54 1.23e-  1\n 6 wifiTRUE                                -0.123    0.0344      -3.59 3.32e-  4\n 7 workspaceTRUE                            0.0459   0.00642      7.15 9.15e- 13\n 8 quietTRUE                               -0.0392   0.00763     -5.14 2.78e-  7\n 9 host_is_superhostTRUE                    0.0272   0.00684      3.98 6.98e-  5\n10 host_identity_verifiedTRUE               0.0256   0.00941      2.72 6.44e-  3\n# ℹ 18 more rows\n\n\n\n# remove identity verify\n\nall_19_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        wifi +\n        workspace +\n        quiet +\n        host_is_superhost +\n        # host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        host_response_time +\n        host_acceptance_rate +\n        air_conditioning +\n        heating +\n        dishes_and_silverware +\n        cooking_basics +\n        microwave +\n        coffee_maker +\n        washer +\n        dryer +\n        room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\nglance(all_19_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.608         0.607 0.433     1185.       0    26 -11550. 23156. 23378.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_19_fit)\n\n# A tibble: 27 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              3.81     0.0529      72.0  0        \n 2 neighbourhood_group_cleansedBrooklyn     0.178    0.0142      12.5  8.16e- 36\n 3 neighbourhood_group_cleansedManhattan    0.505    0.0145      34.8  2.08e-257\n 4 neighbourhood_group_cleansedQueens       0.0578   0.0149       3.89 1.02e-  4\n 5 neighbourhood_group_cleansedStaten Is…  -0.0464   0.0283      -1.64 1.01e-  1\n 6 wifiTRUE                                -0.120    0.0344      -3.50 4.65e-  4\n 7 workspaceTRUE                            0.0465   0.00642      7.24 4.49e- 13\n 8 quietTRUE                               -0.0394   0.00763     -5.17 2.41e-  7\n 9 host_is_superhostTRUE                    0.0270   0.00684      3.94 8.19e-  5\n10 review_scores_cleanliness                0.123    0.00670     18.3  3.66e- 74\n# ℹ 17 more rows\n\n\n\n# review dishes and silverware\nall_18_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        wifi +\n        workspace +\n        quiet +\n        host_is_superhost +\n        # host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        host_response_time +\n        host_acceptance_rate +\n        air_conditioning +\n        heating +\n        # dishes_and_silverware +\n        cooking_basics +\n        microwave +\n        coffee_maker +\n        washer +\n        dryer +\n        room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\nglance(all_18_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.608         0.607 0.433     1232.       0    25 -11556. 23165. 23378.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_18_fit)\n\n# A tibble: 26 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              3.81     0.0529      72.0  0        \n 2 neighbourhood_group_cleansedBrooklyn     0.177    0.0142      12.5  1.31e- 35\n 3 neighbourhood_group_cleansedManhattan    0.505    0.0145      34.8  1.64e-257\n 4 neighbourhood_group_cleansedQueens       0.0577   0.0149       3.87 1.07e-  4\n 5 neighbourhood_group_cleansedStaten Is…  -0.0454   0.0283      -1.61 1.08e-  1\n 6 wifiTRUE                                -0.120    0.0344      -3.49 4.78e-  4\n 7 workspaceTRUE                            0.0461   0.00642      7.18 7.47e- 13\n 8 quietTRUE                               -0.0400   0.00763     -5.24 1.62e-  7\n 9 host_is_superhostTRUE                    0.0269   0.00685      3.93 8.62e-  5\n10 review_scores_cleanliness                0.122    0.00670     18.2  2.80e- 73\n# ℹ 16 more rows\n\n\n\n# remove superhost\n\nall_17_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        wifi +\n        workspace +\n        quiet +\n        # host_is_superhost +\n        # host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        host_response_time +\n        host_acceptance_rate +\n        air_conditioning +\n        heating +\n        # dishes_and_silverware +\n        cooking_basics +\n        microwave +\n        coffee_maker +\n        washer +\n        dryer +\n        room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\nglance(all_17_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.607         0.607 0.433     1282.       0    24 -11563. 23178. 23384.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_17_fit)\n\n# A tibble: 25 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              3.78     0.0523      72.2  0        \n 2 neighbourhood_group_cleansedBrooklyn     0.179    0.0142      12.6  2.39e- 36\n 3 neighbourhood_group_cleansedManhattan    0.504    0.0145      34.7  9.74e-257\n 4 neighbourhood_group_cleansedQueens       0.0584   0.0149       3.93 8.67e-  5\n 5 neighbourhood_group_cleansedStaten Is…  -0.0446   0.0283      -1.58 1.15e-  1\n 6 wifiTRUE                                -0.118    0.0344      -3.44 5.72e-  4\n 7 workspaceTRUE                            0.0470   0.00642      7.31 2.70e- 13\n 8 quietTRUE                               -0.0385   0.00763     -5.05 4.49e-  7\n 9 review_scores_cleanliness                0.127    0.00656     19.4  4.64e- 83\n10 host_response_timewithin a day          -0.145    0.0249      -5.84 5.20e-  9\n# ℹ 15 more rows\n\n\n\n# remove wifi\n\nall_16_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        #wifi +\n        workspace +\n        quiet +\n        # host_is_superhost +\n        # host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        host_response_time +\n        host_acceptance_rate +\n        air_conditioning +\n        heating +\n        # dishes_and_silverware +\n        cooking_basics +\n        microwave +\n        coffee_maker +\n        washer +\n        dryer +\n        room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\nglance(all_16_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.607         0.607 0.433     1336.       0    23 -11569. 23188. 23386.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_16_fit)\n\n# A tibble: 24 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              3.67     0.0422      87.0  0        \n 2 neighbourhood_group_cleansedBrooklyn     0.178    0.0142      12.5  8.77e- 36\n 3 neighbourhood_group_cleansedManhattan    0.503    0.0145      34.6  1.92e-255\n 4 neighbourhood_group_cleansedQueens       0.0567   0.0149       3.81 1.38e-  4\n 5 neighbourhood_group_cleansedStaten Is…  -0.0453   0.0283      -1.60 1.10e-  1\n 6 workspaceTRUE                            0.0462   0.00642      7.20 6.29e- 13\n 7 quietTRUE                               -0.0390   0.00763     -5.11 3.19e-  7\n 8 review_scores_cleanliness                0.126    0.00655     19.3  4.17e- 82\n 9 host_response_timewithin a day          -0.146    0.0249      -5.86 4.61e-  9\n10 host_response_timewithin a few hours    -0.214    0.0246      -8.69 4.04e- 18\n# ℹ 14 more rows\n\n\n\n# remove heating\n\nall_15_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        #wifi +\n        workspace +\n        quiet +\n        # host_is_superhost +\n        # host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        host_response_time +\n        host_acceptance_rate +\n        air_conditioning +\n        # heating +\n        # dishes_and_silverware +\n        cooking_basics +\n        microwave +\n        coffee_maker +\n        washer +\n        dryer +\n        room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\nglance(all_15_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.607         0.606 0.433     1395.       0    22 -11579. 23207. 23396.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_15_fit)\n\n# A tibble: 23 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              3.63     0.0415      87.6  0        \n 2 neighbourhood_group_cleansedBrooklyn     0.176    0.0142      12.4  5.29e- 35\n 3 neighbourhood_group_cleansedManhattan    0.500    0.0145      34.5  3.65e-253\n 4 neighbourhood_group_cleansedQueens       0.0542   0.0149       3.64 2.72e-  4\n 5 neighbourhood_group_cleansedStaten Is…  -0.0486   0.0283      -1.72 8.56e-  2\n 6 workspaceTRUE                            0.0466   0.00642      7.26 4.13e- 13\n 7 quietTRUE                               -0.0395   0.00763     -5.18 2.24e-  7\n 8 review_scores_cleanliness                0.127    0.00656     19.3  2.38e- 82\n 9 host_response_timewithin a day          -0.145    0.0249      -5.84 5.36e-  9\n10 host_response_timewithin a few hours    -0.215    0.0246      -8.75 2.32e- 18\n# ℹ 13 more rows\n\n\n\n# remove acceptance rate\n\nall_14_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        #wifi +\n        workspace +\n        quiet +\n        # host_is_superhost +\n        # host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        host_response_time +\n        # host_acceptance_rate +\n        air_conditioning +\n        # heating +\n        # dishes_and_silverware +\n        cooking_basics +\n        microwave +\n        coffee_maker +\n        washer +\n        dryer +\n        room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\nglance(all_14_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.606         0.606 0.434     1457.       0    21 -11595. 23236. 23417.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_14_fit)\n\n# A tibble: 22 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              3.67     0.0409      89.9  0        \n 2 neighbourhood_group_cleansedBrooklyn     0.173    0.0142      12.2  3.44e- 34\n 3 neighbourhood_group_cleansedManhattan    0.498    0.0145      34.3  9.23e-251\n 4 neighbourhood_group_cleansedQueens       0.0544   0.0149       3.65 2.60e-  4\n 5 neighbourhood_group_cleansedStaten Is…  -0.0480   0.0283      -1.69 9.03e-  2\n 6 workspaceTRUE                            0.0482   0.00642      7.51 6.31e- 14\n 7 quietTRUE                               -0.0396   0.00764     -5.19 2.17e-  7\n 8 review_scores_cleanliness                0.127    0.00656     19.3  1.87e- 82\n 9 host_response_timewithin a day          -0.123    0.0246      -4.99 6.19e-  7\n10 host_response_timewithin a few hours    -0.179    0.0237      -7.53 5.17e- 14\n# ℹ 12 more rows\n\n\n\n# remove response_time\n\nall_13_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        #wifi +\n        workspace +\n        quiet +\n        # host_is_superhost +\n        # host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        # host_response_time +\n        # host_acceptance_rate +\n        air_conditioning +\n        # heating +\n        # dishes_and_silverware +\n        cooking_basics +\n        microwave +\n        coffee_maker +\n        washer +\n        dryer +\n        room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\nglance(all_13_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.603         0.603 0.435     1681.       0    18 -11663. 23367. 23525.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_13_fit)\n\n# A tibble: 19 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              3.54     0.0349     102.   0        \n 2 neighbourhood_group_cleansedBrooklyn     0.170    0.0142      11.9  9.90e- 33\n 3 neighbourhood_group_cleansedManhattan    0.494    0.0146      34.0  1.12e-245\n 4 neighbourhood_group_cleansedQueens       0.0510   0.0149       3.41 6.41e-  4\n 5 neighbourhood_group_cleansedStaten Is…  -0.0468   0.0284      -1.65 9.97e-  2\n 6 workspaceTRUE                            0.0477   0.00642      7.42 1.20e- 13\n 7 quietTRUE                               -0.0432   0.00765     -5.65 1.66e-  8\n 8 review_scores_cleanliness                0.130    0.00657     19.8  3.60e- 86\n 9 air_conditioningTRUE                     0.0530   0.00675      7.84 4.59e- 15\n10 cooking_basicsTRUE                      -0.0442   0.00829     -5.33 1.02e-  7\n11 microwaveTRUE                           -0.0827   0.00774    -10.7  1.38e- 26\n12 coffee_makerTRUE                         0.0620   0.00772      8.02 1.09e- 15\n13 washerTRUE                               0.112    0.00669     16.7  3.01e- 62\n14 dryerTRUE                                0.110    0.00878     12.6  3.67e- 36\n15 room_typeHotel room                      0.303    0.0411       7.35 2.01e- 13\n16 room_typePrivate room                   -0.527    0.00760    -69.3  0        \n17 room_typeShared room                    -0.858    0.0279     -30.8  5.28e-203\n18 bedrooms                                 0.183    0.00498     36.8  8.56e-287\n19 bathrooms                                0.292    0.00900     32.4  4.87e-225\n\n\n\n# remove cooking basics\n\nall_12_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        #wifi +\n        workspace +\n        quiet +\n        # host_is_superhost +\n        # host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        # host_response_time +\n        # host_acceptance_rate +\n        air_conditioning +\n        # heating +\n        # dishes_and_silverware +\n        # cooking_basics +\n        microwave +\n        coffee_maker +\n        washer +\n        dryer +\n        room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\nglance(all_12_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.603         0.603 0.435     1776.       0    17 -11678. 23393. 23543.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_12_fit)\n\n# A tibble: 18 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              3.53     0.0348     101.   0        \n 2 neighbourhood_group_cleansedBrooklyn     0.169    0.0142      11.9  1.83e- 32\n 3 neighbourhood_group_cleansedManhattan    0.497    0.0146      34.1  3.52e-248\n 4 neighbourhood_group_cleansedQueens       0.0539   0.0149       3.61 3.07e-  4\n 5 neighbourhood_group_cleansedStaten Is…  -0.0435   0.0284      -1.53 1.26e-  1\n 6 workspaceTRUE                            0.0437   0.00638      6.84 8.00e- 12\n 7 quietTRUE                               -0.0436   0.00765     -5.69 1.29e-  8\n 8 review_scores_cleanliness                0.130    0.00658     19.7  1.63e- 85\n 9 air_conditioningTRUE                     0.0543   0.00675      8.04 9.34e- 16\n10 microwaveTRUE                           -0.0950   0.00739    -12.9  1.19e- 37\n11 coffee_makerTRUE                         0.0533   0.00755      7.05 1.80e- 12\n12 washerTRUE                               0.110    0.00669     16.4  5.04e- 60\n13 dryerTRUE                                0.103    0.00868     11.9  1.37e- 32\n14 room_typeHotel room                      0.323    0.0410       7.88 3.43e- 15\n15 room_typePrivate room                   -0.522    0.00755    -69.2  0        \n16 room_typeShared room                    -0.859    0.0279     -30.7  7.59e-203\n17 bedrooms                                 0.182    0.00498     36.6  5.01e-284\n18 bathrooms                                0.294    0.00899     32.7  7.23e-229\n\n\n\n# remove quiet \n\nall_11_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        #wifi +\n        workspace +\n        #quiet +\n        # host_is_superhost +\n        # host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        # host_response_time +\n        # host_acceptance_rate +\n        air_conditioning +\n        # heating +\n        # dishes_and_silverware +\n        # cooking_basics +\n        microwave +\n        coffee_maker +\n        washer +\n        dryer +\n        room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\nglance(all_11_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.602         0.602 0.436     1882.       0    16 -11694. 23423. 23566.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_11_fit)\n\n# A tibble: 17 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              3.53     0.0348     101.   0        \n 2 neighbourhood_group_cleansedBrooklyn     0.170    0.0143      11.9  1.68e- 32\n 3 neighbourhood_group_cleansedManhattan    0.497    0.0146      34.1  2.33e-248\n 4 neighbourhood_group_cleansedQueens       0.0542   0.0149       3.63 2.87e-  4\n 5 neighbourhood_group_cleansedStaten Is…  -0.0438   0.0284      -1.54 1.23e-  1\n 6 workspaceTRUE                            0.0431   0.00639      6.75 1.54e- 11\n 7 review_scores_cleanliness                0.128    0.00658     19.4  2.46e- 83\n 8 air_conditioningTRUE                     0.0555   0.00675      8.21 2.36e- 16\n 9 microwaveTRUE                           -0.0947   0.00739    -12.8  2.09e- 37\n10 coffee_makerTRUE                         0.0526   0.00756      6.96 3.45e- 12\n11 washerTRUE                               0.110    0.00669     16.4  5.77e- 60\n12 dryerTRUE                                0.102    0.00869     11.7  9.04e- 32\n13 room_typeHotel room                      0.331    0.0410       8.08 6.70e- 16\n14 room_typePrivate room                   -0.520    0.00755    -69.0  0        \n15 room_typeShared room                    -0.852    0.0279     -30.5  6.27e-200\n16 bedrooms                                 0.183    0.00499     36.7  4.53e-286\n17 bathrooms                                0.296    0.00899     32.9  2.20e-231\n\n\n\n# remove workspace\n\nall_10_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        #wifi +\n        # workspace +\n        #quiet +\n        # host_is_superhost +\n        # host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        # host_response_time +\n        # host_acceptance_rate +\n        air_conditioning +\n        # heating +\n        # dishes_and_silverware +\n        # cooking_basics +\n        microwave +\n        coffee_maker +\n        washer +\n        dryer +\n        room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\nglance(all_10_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.601         0.601 0.436     2000.       0    15 -11716. 23467. 23601.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_10_fit)\n\n# A tibble: 16 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              3.54     0.0348     102.   0        \n 2 neighbourhood_group_cleansedBrooklyn     0.170    0.0143      11.9  1.23e- 32\n 3 neighbourhood_group_cleansedManhattan    0.496    0.0146      34.0  2.48e-246\n 4 neighbourhood_group_cleansedQueens       0.0540   0.0150       3.61 3.11e-  4\n 5 neighbourhood_group_cleansedStaten Is…  -0.0455   0.0285      -1.60 1.10e-  1\n 6 review_scores_cleanliness                0.129    0.00658     19.6  6.29e- 85\n 7 air_conditioningTRUE                     0.0508   0.00673      7.55 4.48e- 14\n 8 microwaveTRUE                           -0.0943   0.00740    -12.7  5.36e- 37\n 9 coffee_makerTRUE                         0.0566   0.00755      7.49 6.94e- 14\n10 washerTRUE                               0.111    0.00669     16.7  6.75e- 62\n11 dryerTRUE                                0.106    0.00868     12.2  6.35e- 34\n12 room_typeHotel room                      0.322    0.0410       7.86 4.03e- 15\n13 room_typePrivate room                   -0.521    0.00756    -68.9  0        \n14 room_typeShared room                    -0.851    0.0280     -30.4  4.45e-199\n15 bedrooms                                 0.183    0.00499     36.6  1.76e-284\n16 bathrooms                                0.297    0.00900     33.0  3.10e-232\n\n\n\n# remove coffee maker\n\nall_9_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        #wifi +\n        # workspace +\n        #quiet +\n        # host_is_superhost +\n        # host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        # host_response_time +\n        # host_acceptance_rate +\n        air_conditioning +\n        # heating +\n        # dishes_and_silverware +\n        # cooking_basics +\n        microwave +\n        # coffee_maker +\n        washer +\n        dryer +\n        room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\nglance(all_9_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.600         0.600 0.437     2133.       0    14 -11745. 23521. 23647.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_9_fit)\n\n# A tibble: 15 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              3.54     0.0349     102.   0        \n 2 neighbourhood_group_cleansedBrooklyn     0.170    0.0143      11.9  1.62e- 32\n 3 neighbourhood_group_cleansedManhattan    0.492    0.0146      33.7  2.80e-242\n 4 neighbourhood_group_cleansedQueens       0.0500   0.0150       3.34 8.34e-  4\n 5 neighbourhood_group_cleansedStaten Is…  -0.0419   0.0285      -1.47 1.41e-  1\n 6 review_scores_cleanliness                0.134    0.00656     20.4  1.21e- 91\n 7 air_conditioningTRUE                     0.0467   0.00671      6.96 3.46e- 12\n 8 microwaveTRUE                           -0.0750   0.00695    -10.8  4.54e- 27\n 9 washerTRUE                               0.114    0.00669     17.0  1.79e- 64\n10 dryerTRUE                                0.118    0.00853     13.8  2.11e- 43\n11 room_typeHotel room                      0.312    0.0411       7.61 2.85e- 14\n12 room_typePrivate room                   -0.528    0.00750    -70.4  0        \n13 room_typeShared room                    -0.856    0.0280     -30.6  4.85e-201\n14 bedrooms                                 0.184    0.00500     36.8  3.44e-286\n15 bathrooms                                0.297    0.00902     32.9  1.43e-231\n\n\n\n# remove air conditioning\n\nall_8_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        #wifi +\n        # workspace +\n        #quiet +\n        # host_is_superhost +\n        # host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        # host_response_time +\n        # host_acceptance_rate +\n        # air_conditioning +\n        # heating +\n        # dishes_and_silverware +\n        # cooking_basics +\n        microwave +\n        # coffee_maker +\n        washer +\n        dryer +\n        room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\nglance(all_8_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.599         0.599 0.437     2288.       0    13 -11769. 23568. 23686.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_8_fit)\n\n# A tibble: 14 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              3.57     0.0346     103.   0        \n 2 neighbourhood_group_cleansedBrooklyn     0.172    0.0143      12.0  3.99e- 33\n 3 neighbourhood_group_cleansedManhattan    0.496    0.0146      34.0  2.04e-246\n 4 neighbourhood_group_cleansedQueens       0.0494   0.0150       3.30 9.76e-  4\n 5 neighbourhood_group_cleansedStaten Is…  -0.0389   0.0285      -1.36 1.73e-  1\n 6 review_scores_cleanliness                0.133    0.00657     20.3  1.44e- 90\n 7 microwaveTRUE                           -0.0791   0.00694    -11.4  5.15e- 30\n 8 washerTRUE                               0.117    0.00668     17.5  2.04e- 68\n 9 dryerTRUE                                0.120    0.00854     14.0  2.03e- 44\n10 room_typeHotel room                      0.324    0.0411       7.88 3.40e- 15\n11 room_typePrivate room                   -0.529    0.00751    -70.4  0        \n12 room_typeShared room                    -0.853    0.0280     -30.5  4.00e-199\n13 bedrooms                                 0.183    0.00500     36.5  1.12e-282\n14 bathrooms                                0.301    0.00900     33.4  1.06e-238\n\n\n\n# remove room type\nall_7_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        #wifi +\n        # workspace +\n        #quiet +\n        # host_is_superhost +\n        # host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        # host_response_time +\n        # host_acceptance_rate +\n        # air_conditioning +\n        # heating +\n        # dishes_and_silverware +\n        # cooking_basics +\n        microwave +\n        # coffee_maker +\n        washer +\n        dryer +\n        #room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\nglance(all_7_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.488         0.488 0.494     1899.       0    10 -14199. 28421. 28516.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_7_fit)\n\n# A tibble: 11 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              2.80     0.0372     75.2   0        \n 2 neighbourhood_group_cleansedBrooklyn     0.198    0.0162     12.3   1.86e- 34\n 3 neighbourhood_group_cleansedManhattan    0.551    0.0165     33.5   2.01e-239\n 4 neighbourhood_group_cleansedQueens       0.0395   0.0169      2.33  1.97e-  2\n 5 neighbourhood_group_cleansedStaten Is…  -0.0118   0.0322     -0.366 7.15e-  1\n 6 review_scores_cleanliness                0.174    0.00739    23.6   3.10e-121\n 7 microwaveTRUE                           -0.0532   0.00780    -6.82  9.09e- 12\n 8 washerTRUE                               0.122    0.00754    16.1   3.24e- 58\n 9 dryerTRUE                                0.138    0.00963    14.3   3.46e- 46\n10 bedrooms                                 0.229    0.00560    40.9   0        \n11 bathrooms                                0.540    0.00948    56.9   0        \n\n\n\n# remove microwave\nall_6_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        #wifi +\n        # workspace +\n        #quiet +\n        # host_is_superhost +\n        # host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        # host_response_time +\n        # host_acceptance_rate +\n        # air_conditioning +\n        # heating +\n        # dishes_and_silverware +\n        # cooking_basics +\n        # microwave +\n        # coffee_maker +\n        washer +\n        dryer +\n        #room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\nglance(all_6_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.487         0.487 0.495     2100.       0     9 -14222. 28466. 28552.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_6_fit)\n\n# A tibble: 10 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              2.80     0.0373     75.0   0        \n 2 neighbourhood_group_cleansedBrooklyn     0.205    0.0161     12.7   5.89e- 37\n 3 neighbourhood_group_cleansedManhattan    0.563    0.0164     34.3   8.07e-251\n 4 neighbourhood_group_cleansedQueens       0.0416   0.0169      2.46  1.41e-  2\n 5 neighbourhood_group_cleansedStaten Is…  -0.0120   0.0323     -0.373 7.09e-  1\n 6 review_scores_cleanliness                0.169    0.00736    23.0   2.00e-115\n 7 washerTRUE                               0.117    0.00751    15.6   3.20e- 54\n 8 dryerTRUE                                0.122    0.00936    13.0   1.07e- 38\n 9 bedrooms                                 0.227    0.00560    40.6   0        \n10 bathrooms                                0.541    0.00949    57.0   0        \n\n\n\n# remove washer\nall_5_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        #wifi +\n        # workspace +\n        #quiet +\n        # host_is_superhost +\n        # host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        # host_response_time +\n        # host_acceptance_rate +\n        # air_conditioning +\n        # heating +\n        # dishes_and_silverware +\n        # cooking_basics +\n        # microwave +\n        # coffee_maker +\n        # washer +\n        dryer +\n        #room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\nglance(all_5_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.481         0.481 0.498     2305.       0     8 -14342. 28704. 28783.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_5_fit)\n\n# A tibble: 9 × 5\n  term                                    estimate std.error statistic   p.value\n  <chr>                                      <dbl>     <dbl>     <dbl>     <dbl>\n1 (Intercept)                             2.77       0.0375    73.9    0        \n2 neighbourhood_group_cleansedBrooklyn    0.219      0.0162    13.5    1.66e- 41\n3 neighbourhood_group_cleansedManhattan   0.581      0.0164    35.3    5.08e-265\n4 neighbourhood_group_cleansedQueens      0.0372     0.0170     2.18   2.93e-  2\n5 neighbourhood_group_cleansedStaten Isl… 0.000705   0.0325     0.0217 9.83e-  1\n6 review_scores_cleanliness               0.174      0.00740   23.5    2.62e-120\n7 dryerTRUE                               0.151      0.00922   16.4    3.54e- 60\n8 bedrooms                                0.231      0.00562   41.1    0        \n9 bathrooms                               0.560      0.00947   59.1    0        \n\n\n\nbackward_elimination_table <- tribble(\n  ~ `Step`, ~ `Variable eliminated`, ~ `Adjusted R-squared`,\n  1, \"Listing rating\", glance(all_21_fit)$adj.r.squared,\n  2, \"Host communication rating\",glance(all_20_fit)$adj.r.squared,\n  3, \"Host identity is verified\",glance(all_19_fit)$adj.r.squared,\n  4, \"Dishes and silverware\",glance(all_18_fit)$adj.r.squared,\n  5, \"Superhost status\",glance(all_17_fit)$adj.r.squared,\n  6, \"Wifi\",glance(all_16_fit)$adj.r.squared,\n  7, \"Heating\",glance(all_15_fit)$adj.r.squared,\n  8, \"Host acceptance rate\",glance(all_14_fit)$adj.r.squared,\n  9, \"Host response time\",glance(all_13_fit)$adj.r.squared,\n  10, \"Cooking basics\",glance(all_12_fit)$adj.r.squared,\n  11, \"Quiet environment\",glance(all_11_fit)$adj.r.squared,\n  12, \"Dedicated workspace\",glance(all_10_fit)$adj.r.squared,\n  13, \"Coffee maker\",glance(all_9_fit)$adj.r.squared,\n  14, \"Air conditioning\",glance(all_8_fit)$adj.r.squared,\n  15, \"Room type\",glance(all_7_fit)$adj.r.squared,\n  16, \"Microwave\",glance(all_6_fit)$adj.r.squared, \n  17, \"Washer\",glance(all_5_fit)$adj.r.squared \n)\nwrite_csv(backward_elimination_table, \"data/airbnb_data/backward_elimination_table.csv\")"
  },
  {
    "objectID": "appendicies.html#appendix-2b-proportion-of-listings-with-extra-amenities-and-price-difference",
    "href": "appendicies.html#appendix-2b-proportion-of-listings-with-extra-amenities-and-price-difference",
    "title": "Analyzing Airbnb Data",
    "section": "Appendix 2B: Proportion of listings with extra amenities and price difference",
    "text": "Appendix 2B: Proportion of listings with extra amenities and price difference\n\nextra_all_neighbourhood <-\n  merge(extra_all, airbnb_data |>\n          select(id, price,\n                 neighbourhood_group_cleansed, neighbourhood_cleansed)) |>\n  select(id, all_extras, price,\n         neighbourhood_group_cleansed, neighbourhood_cleansed) |>\n  drop_na()\n\nextra_all_borough_table <- extra_all_neighbourhood |>\n  group_by(neighbourhood_group_cleansed) |>\n  summarize(\n    count = n(),\n    prop_all_extras = signif(sum(all_extras)/n(), 3)\n  ) |>\n  arrange(desc(prop_all_extras)) |>\n  set_names(c(\"Borough\", \"Number of listings\", \"Proportion of listings with all extra amenities included\"))\n\nkable(extra_all_borough_table,\n      caption = \"Proportion of listings with all extra amenities included by borough\",\n             align = \"l\") |> \n  kable_classic() \n\n\n\nProportion of listings with all extra amenities included by borough\n \n  \n    Borough \n    Number of listings \n    Proportion of listings with all extra amenities included \n  \n \n\n  \n    Staten Island \n    426 \n    0.1850 \n  \n  \n    Manhattan \n    17219 \n    0.1400 \n  \n  \n    Brooklyn \n    16094 \n    0.1390 \n  \n  \n    Bronx \n    1680 \n    0.0857 \n  \n  \n    Queens \n    6885 \n    0.0840 \n  \n\n\n\n\n\n\nextra_table <- extra_all_neighbourhood |> \n  mutate(\n    all_extras = factor(ifelse(all_extras, \"Yes\", \"No\"))\n  ) |> \n  group_by(all_extras) |> \n  summarise(\n    median_price = signif(median(price), 3)\n  )  |> \n  arrange(desc(median_price)) |> \n  mutate(\n    median_price = dollar(median_price)\n  )  |> \n  set_names(c(\"Does the listing have all the extras?\", \"Median price\"))\n\nkable(extra_table, \n             align = \"l\") |> \n  kable_classic() \n\n\n\n \n  \n    Does the listing have all the extras? \n    Median price \n  \n \n\n  \n    Yes \n    $175 \n  \n  \n    No \n    $120"
  },
  {
    "objectID": "appendicies.html#appendix-2c-additive-and-interactive-linear-regressions-with-respect-to-extra-amenities",
    "href": "appendicies.html#appendix-2c-additive-and-interactive-linear-regressions-with-respect-to-extra-amenities",
    "title": "Analyzing Airbnb Data",
    "section": "Appendix 2C: Additive and interactive linear regressions with respect to extra amenities",
    "text": "Appendix 2C: Additive and interactive linear regressions with respect to extra amenities\nBelow, we fit additive and interactive linear regression models for extra amenities. As expected, we see that the interactive model produced a higher R-squared value than the additive model. Moreover, we see that both models produced R-squared values of above 10%, which suggests that extra amenities are not negligible in affecting price.\n\nlinear_all_interactive <- linear_reg() |>\n  fit(log(price) ~\n        air_conditioning * heating * dishes_and_silverware * \n        cooking_basics * microwave * coffee_maker * washer * dryer, \n      data = extra_all |> drop_na() |> filter(price != 0))\n\nlinear_all_additive <- linear_reg() |>\n  fit(log(price) ~ air_conditioning + heating + dishes_and_silverware + \n        cooking_basics + microwave + coffee_maker + washer + dryer,\n      data = extra_all |> drop_na() |> filter(price != 0))\n\nkable(\n  glance(linear_all_interactive),\n  caption = \n    \"Interactive Linear Regression of log(price) with respect to extra amenities\",\n  align = \"l\") |>\n  kable_classic()\n\n\n\nInteractive Linear Regression of log(price) with respect to extra amenities\n \n  \n    r.squared \n    adj.r.squared \n    sigma \n    statistic \n    p.value \n    df \n    logLik \n    AIC \n    BIC \n    deviance \n    df.residual \n    nobs \n  \n \n\n  \n    0.1748675 \n    0.1700972 \n    0.6607168 \n    36.65805 \n    0 \n    243 \n    -42345.26 \n    85180.51 \n    87300.25 \n    18349.37 \n    42033 \n    42277 \n  \n\n\n\n\nkable(\n  glance(linear_all_additive),\n  caption = \n    \"Additive Linear Regression of log(price) with respect to extra amenities\",\n  align = \"l\") |>\n  kable_classic()\n\n\n\nAdditive Linear Regression of log(price) with respect to extra amenities\n \n  \n    r.squared \n    adj.r.squared \n    sigma \n    statistic \n    p.value \n    df \n    logLik \n    AIC \n    BIC \n    deviance \n    df.residual \n    nobs \n  \n \n\n  \n    0.1164623 \n    0.116295 \n    0.6817975 \n    696.4369 \n    0 \n    8 \n    -43790.92 \n    87601.84 \n    87688.36 \n    19648.19 \n    42268 \n    42277"
  },
  {
    "objectID": "appendicies.html#appendix-2d-proportion-of-listings-with-wfh-amenities-and-price-difference",
    "href": "appendicies.html#appendix-2d-proportion-of-listings-with-wfh-amenities-and-price-difference",
    "title": "Analyzing Airbnb Data",
    "section": "Appendix 2D: Proportion of listings with WFH amenities and price difference",
    "text": "Appendix 2D: Proportion of listings with WFH amenities and price difference\n\nwfh_final_borough_table <- wifi_work_quiet |> \n  group_by(neighbourhood_group_cleansed) |> \n  summarize(\n    count = n(),\n    prop_all_three = signif(sum(all_three)/n(), 3),\n    prop_wifi_workspace_only = signif(sum(wifi_workspace_only)/n(), 3),\n    prop_wifi_only = signif(sum(wifi_only)/n(), 3)\n  ) |> \n  arrange(desc(prop_all_three)) |> \n  set_names(c(\"Borough\", \"Number of listings\", \"Proportion of listings with all three criteria met\", \"Proportion of listings with Wifi and workspace only\", \"Proportion of listings with Wifi only\"))\n\nkable(wfh_final_borough_table, \n      caption = \"Proportion of listings with WFH criteria satisfied by borough\",\n             align = \"l\") |> \n  kable_classic() \n\n\n\nProportion of listings with WFH criteria satisfied by borough\n \n  \n    Borough \n    Number of listings \n    Proportion of listings with all three criteria met \n    Proportion of listings with Wifi and workspace only \n    Proportion of listings with Wifi only \n  \n \n\n  \n    Staten Island \n    426 \n    0.1380 \n    0.354 \n    0.366 \n  \n  \n    Bronx \n    1680 \n    0.1110 \n    0.367 \n    0.382 \n  \n  \n    Queens \n    6885 \n    0.0959 \n    0.377 \n    0.411 \n  \n  \n    Brooklyn \n    16094 \n    0.0857 \n    0.337 \n    0.446 \n  \n  \n    Manhattan \n    17219 \n    0.0638 \n    0.313 \n    0.496 \n  \n\n\n\n\n\n\nwfh_table <- wifi_work_quiet |> \n  mutate(\n    all_three = factor(ifelse(all_three, \"Yes\", \"No\"))\n  ) |> \n  group_by(all_three) |> \n  summarise(\n    median_price = signif(median(price), 3)\n  )  |> \n  arrange(desc(median_price)) |> \n  mutate(\n    median_price = dollar(median_price)\n  ) |> \n  set_names(c(\"Does the listing satisfy all WFH criteria?\", \"Median price\"))\n\nkable(wfh_table, \n             align = \"l\") |> \n  kable_classic() \n\n\n\n \n  \n    Does the listing satisfy all WFH criteria? \n    Median price \n  \n \n\n  \n    Yes \n    $130 \n  \n  \n    No \n    $124"
  },
  {
    "objectID": "appendicies.html#appendix-2e-additive-and-interactive-linear-regressions-with-respect-to-work-from-home-amenities",
    "href": "appendicies.html#appendix-2e-additive-and-interactive-linear-regressions-with-respect-to-work-from-home-amenities",
    "title": "Analyzing Airbnb Data",
    "section": "Appendix 2E: Additive and interactive linear regressions with respect to work-from-home amenities",
    "text": "Appendix 2E: Additive and interactive linear regressions with respect to work-from-home amenities\nBelow, we fit additive and interactive linear regression models for WFH amenities. The two models produced similar R-squared values, which suggests that WFH amenities are negligible in affecting price.\n\nwfh_interactive <- linear_reg() |>\n  fit(log(price) ~\n        wifi * workspace * quiet, \n      data = wifi_work_quiet |> filter(price != 0))\n\nwfh_additive <- linear_reg() |>\n  fit(log(price) ~\n        wifi + workspace + quiet,\n      data = wifi_work_quiet |> filter(price != 0))\n\nkable(\n  glance(wfh_interactive),\n  caption = \n    \"Interactive Linear Regression of log(price) with respect to WFH criteria\",\n  align = \"l\") |>\n  kable_classic()\n\n\n\nInteractive Linear Regression of log(price) with respect to WFH criteria\n \n  \n    r.squared \n    adj.r.squared \n    sigma \n    statistic \n    p.value \n    df \n    logLik \n    AIC \n    BIC \n    deviance \n    df.residual \n    nobs \n  \n \n\n  \n    0.0159578 \n    0.0157948 \n    0.7195228 \n    97.92261 \n    0 \n    7 \n    -46068.27 \n    92154.54 \n    92232.41 \n    21883.22 \n    42269 \n    42277 \n  \n\n\n\n\nkable(\n  glance(wfh_additive),\n  caption = \n    \"Additive Linear Regression of log(price) with respect to WFH criteria\",\n  align = \"l\") |>\n  kable_classic()\n\n\n\nAdditive Linear Regression of log(price) with respect to WFH criteria\n \n  \n    r.squared \n    adj.r.squared \n    sigma \n    statistic \n    p.value \n    df \n    logLik \n    AIC \n    BIC \n    deviance \n    df.residual \n    nobs \n  \n \n\n  \n    0.0159044 \n    0.0158346 \n    0.7195083 \n    227.7314 \n    0 \n    3 \n    -46069.42 \n    92148.83 \n    92192.09 \n    21884.4 \n    42273 \n    42277"
  },
  {
    "objectID": "appendicies.html#appendix-2f-trends-of-host-characteristics",
    "href": "appendicies.html#appendix-2f-trends-of-host-characteristics",
    "title": "Analyzing Airbnb Data",
    "section": "Appendix 2F: Trends of host characteristics",
    "text": "Appendix 2F: Trends of host characteristics\n\nsuperhost_graph\n\n\n\nidentity_verified_graph\n\n\n\ncleanliness_graph\n\n\n\ncommunication_graph\n\n\n\nresponse_time_graph\n\n\n\nacceptance_graph\n\n\n\n\n\nsuperhosts_perc <-\n  tibble(perc = superhosts$n[2] / sum(superhosts$n) * 100)\n\nidentity_verified_perc <-\n  tibble(perc = identity_verified$n[2] / sum(identity_verified$n) * 100)\n\ncleanliness_perc <- cleanliness |>\n  mutate(perc = n / sum(n) * 100) |>\n  select(cleanliness_score, perc)\n\ncommunication_perc <- communication |>\n  mutate(perc = n / sum(n) * 100) |>\n  select(communication_score, perc)\n\nresponse_perc <- response |>\n  mutate(Percent = n / sum(n) * 100) |>\n  select(Time, Percent)\n\nacceptance <- host |>\n  select(host_acceptance_rate)\n\nacceptance[acceptance == \"N/A\"]  <- NA\n\nacceptance <- na.omit(acceptance)\n\nacceptance <- acceptance |>\n  mutate(\n    host_acceptance_rate = substr(host_acceptance_rate, 1, nchar(host_acceptance_rate)-1),\n    host_acceptance_rate = as.numeric(host_acceptance_rate))\n\nacceptance_perc <-\n  tibble(perc = mean(acceptance$host_acceptance_rate))\n\nhost_char_percs_1 <- tribble(\n  ~ `Host characteristic`, ~ `Percent`,\n  \"Superhost\", superhosts_perc$perc,\n  \"Identity is verified\", identity_verified_perc$perc,\n  \"Host acceptance rate\", acceptance_perc$perc,\n) |> \n  arrange(desc(`Percent`))\n\nhost_char_percs_2 <- tribble(\n  ~ `Rating`, ~ `Cleanliness review`, ~ `Communication review`,\n  cleanliness_perc$cleanliness_score[1], cleanliness_perc$perc[1], communication_perc$perc[1],\n  cleanliness_perc$cleanliness_score[2], cleanliness_perc$perc[2], communication_perc$perc[2],\n  cleanliness_perc$cleanliness_score[3], cleanliness_perc$perc[3], communication_perc$perc[3],\n  cleanliness_perc$cleanliness_score[4], cleanliness_perc$perc[4], communication_perc$perc[4],\n  cleanliness_perc$cleanliness_score[5], cleanliness_perc$perc[5], communication_perc$perc[5],\n)\n\nkable(host_char_percs_1, \n             caption = \"Trends of host characteristics\",\n             align = \"l\") |> \n  kable_classic()\n\n\n\nTrends of host characteristics\n \n  \n    Host characteristic \n    Percent \n  \n \n\n  \n    Identity is verified \n    84.65167 \n  \n  \n    Host acceptance rate \n    84.10369 \n  \n  \n    Superhost \n    23.54234 \n  \n\n\n\n\nkable(host_char_percs_2, \n             caption = \"Trends of host reviews\",\n             align = \"l\") |> \n  kable_classic()\n\n\n\nTrends of host reviews\n \n  \n    Rating \n    Cleanliness review \n    Communication review \n  \n \n\n  \n    Very low \n    0.6000092 \n    0.4763432 \n  \n  \n    Low \n    0.3480969 \n    0.1374067 \n  \n  \n    Medium \n    1.6763615 \n    0.5542069 \n  \n  \n    High \n    7.6352311 \n    2.2809509 \n  \n  \n    Very high \n    89.7403014 \n    96.5510924 \n  \n\n\n\n\nkable(response_perc, \n             caption = \"Host response rate\",\n             align = \"l\") |> \n  kable_classic()\n\n\n\nHost response rate\n \n  \n    Time \n    Percent \n  \n \n\n  \n    a few days or more \n    2.61817 \n  \n  \n    within a day \n    13.08301 \n  \n  \n    within a few hours \n    19.07972 \n  \n  \n    within an hour \n    65.21910"
  },
  {
    "objectID": "appendicies.html#appendix-2g-acceptance-rate-hypothesis-testing",
    "href": "appendicies.html#appendix-2g-acceptance-rate-hypothesis-testing",
    "title": "Analyzing Airbnb Data",
    "section": "Appendix 2G: Acceptance rate hypothesis testing",
    "text": "Appendix 2G: Acceptance rate hypothesis testing\n\naccept <- host |>\n  select(host_acceptance_rate, price) |>\n  mutate(host_acceptance_rate = if_else(\n    0 <= host_acceptance_rate & host_acceptance_rate < 51, TRUE, FALSE\n  ))\n\npoint_diff_acceptance <- accept |>\n  specify(price ~ host_acceptance_rate) |>\n  calculate(stat = \"diff in medians\", order = c(TRUE, FALSE))\n\nnull_dist_acceptance <- accept |>\n  specify(price ~ host_acceptance_rate) |>\n  hypothesize(null = \"independence\") |>\n  generate(reps = 1000, type = \"permute\") |>\n  calculate(stat = \"diff in medians\", order = c(TRUE, FALSE))\n\nvisualize(null_dist_acceptance) +\n  shade_p_value(obs_stat = point_diff_acceptance, direction = \"greater\")\n\nWarning in min(diff(unique_loc)): no non-missing arguments to min; returning Inf\n\n\n\n\nget_p_value(null_dist_acceptance,\n            obs_stat = point_diff_acceptance,\n            direction = \"greater\")\n\nWarning: Please be cautious in reporting a p-value of 0. This result is an\napproximation based on the number of `reps` chosen in the `generate()` step. See\n`?get_p_value()` for more information.\n\n\n# A tibble: 1 × 1\n  p_value\n    <dbl>\n1       0"
  },
  {
    "objectID": "appendicies.html#appendix-2h-cleanliness-score-hypothesis-testing",
    "href": "appendicies.html#appendix-2h-cleanliness-score-hypothesis-testing",
    "title": "Analyzing Airbnb Data",
    "section": "Appendix 2H: Cleanliness score hypothesis testing",
    "text": "Appendix 2H: Cleanliness score hypothesis testing\n\nclean <- host |>\n  select(review_scores_cleanliness, price) |>\n  mutate(review_scores_cleanliness = if_else(\n    4.0 < review_scores_cleanliness & review_scores_cleanliness <= 5.0, TRUE, FALSE\n  ))\n\npoint_diff_cleanliness <- clean |>\n  specify(price ~ review_scores_cleanliness) |>\n  calculate(stat = \"diff in medians\", order = c(TRUE, FALSE))\n\nnull_dist_cleanliness <- clean |>\n  specify(price ~ review_scores_cleanliness) |>\n  hypothesize(null = \"independence\") |>\n  generate(reps = 1000, type = \"permute\") |>\n  calculate(stat = \"diff in medians\", order = c(TRUE, FALSE))\n\nvisualize(null_dist_cleanliness) +\n  shade_p_value(obs_stat = point_diff_cleanliness, direction = \"greater\")\n\nWarning in min(diff(unique_loc)): no non-missing arguments to min; returning Inf\n\n\n\n\nget_p_value(null_dist_cleanliness,\n            obs_stat = point_diff_cleanliness,\n            direction = \"greater\")\n\nWarning: Please be cautious in reporting a p-value of 0. This result is an\napproximation based on the number of `reps` chosen in the `generate()` step. See\n`?get_p_value()` for more information.\n\n\n# A tibble: 1 × 1\n  p_value\n    <dbl>\n1       0"
  },
  {
    "objectID": "appendicies.html#appendix-2i-backward-elimination-to-isolate-significant-predictors",
    "href": "appendicies.html#appendix-2i-backward-elimination-to-isolate-significant-predictors",
    "title": "Analyzing Airbnb Data",
    "section": "Appendix 2I: Backward elimination to isolate significant predictors",
    "text": "Appendix 2I: Backward elimination to isolate significant predictors\nWe performed backward elimination on our full multivariate linear regression model to come up with a list of significant predictors.\n\n# remove overall rating\nall_21_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        wifi +\n        workspace +\n        quiet +\n        host_is_superhost +\n        host_identity_verified +\n        review_scores_cleanliness +\n        review_scores_communication +\n        # review_scores_rating +\n        host_response_time +\n        host_acceptance_rate +\n        air_conditioning +\n        heating +\n        dishes_and_silverware +\n        cooking_basics +\n        microwave +\n        coffee_maker +\n        washer +\n        dryer +\n        room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\nglance(all_21_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.608         0.608 0.433     1102.       0    28 -11545. 23150. 23387.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_21_fit)\n\n# A tibble: 29 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              3.83     0.0576      66.5  0        \n 2 neighbourhood_group_cleansedBrooklyn     0.177    0.0142      12.5  1.76e- 35\n 3 neighbourhood_group_cleansedManhattan    0.503    0.0145      34.6  6.62e-255\n 4 neighbourhood_group_cleansedQueens       0.0571   0.0149       3.84 1.25e-  4\n 5 neighbourhood_group_cleansedStaten Is…  -0.0430   0.0283      -1.52 1.28e-  1\n 6 wifiTRUE                                -0.122    0.0344      -3.55 3.85e-  4\n 7 workspaceTRUE                            0.0460   0.00642      7.17 7.90e- 13\n 8 quietTRUE                               -0.0388   0.00764     -5.08 3.74e-  7\n 9 host_is_superhostTRUE                    0.0277   0.00685      4.05 5.24e-  5\n10 host_identity_verifiedTRUE               0.0256   0.00941      2.72 6.60e-  3\n# ℹ 19 more rows\n\n\n\n# remove communcation rating\nall_20_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        wifi +\n        workspace +\n        quiet +\n        host_is_superhost +\n        host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        host_response_time +\n        host_acceptance_rate +\n        air_conditioning +\n        heating +\n        dishes_and_silverware +\n        cooking_basics +\n        microwave +\n        coffee_maker +\n        washer +\n        dryer +\n        room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\nglance(all_20_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.608         0.608 0.433     1142.       0    27 -11546. 23151. 23380.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_20_fit)\n\n# A tibble: 28 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              3.79     0.0533      71.1  0        \n 2 neighbourhood_group_cleansedBrooklyn     0.176    0.0142      12.4  2.99e- 35\n 3 neighbourhood_group_cleansedManhattan    0.502    0.0145      34.6  1.47e-254\n 4 neighbourhood_group_cleansedQueens       0.0569   0.0149       3.82 1.33e-  4\n 5 neighbourhood_group_cleansedStaten Is…  -0.0437   0.0283      -1.54 1.23e-  1\n 6 wifiTRUE                                -0.123    0.0344      -3.59 3.32e-  4\n 7 workspaceTRUE                            0.0459   0.00642      7.15 9.15e- 13\n 8 quietTRUE                               -0.0392   0.00763     -5.14 2.78e-  7\n 9 host_is_superhostTRUE                    0.0272   0.00684      3.98 6.98e-  5\n10 host_identity_verifiedTRUE               0.0256   0.00941      2.72 6.44e-  3\n# ℹ 18 more rows\n\n\n\n# remove identity verify\n\nall_19_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        wifi +\n        workspace +\n        quiet +\n        host_is_superhost +\n        # host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        host_response_time +\n        host_acceptance_rate +\n        air_conditioning +\n        heating +\n        dishes_and_silverware +\n        cooking_basics +\n        microwave +\n        coffee_maker +\n        washer +\n        dryer +\n        room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\nglance(all_19_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.608         0.607 0.433     1185.       0    26 -11550. 23156. 23378.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_19_fit)\n\n# A tibble: 27 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              3.81     0.0529      72.0  0        \n 2 neighbourhood_group_cleansedBrooklyn     0.178    0.0142      12.5  8.16e- 36\n 3 neighbourhood_group_cleansedManhattan    0.505    0.0145      34.8  2.08e-257\n 4 neighbourhood_group_cleansedQueens       0.0578   0.0149       3.89 1.02e-  4\n 5 neighbourhood_group_cleansedStaten Is…  -0.0464   0.0283      -1.64 1.01e-  1\n 6 wifiTRUE                                -0.120    0.0344      -3.50 4.65e-  4\n 7 workspaceTRUE                            0.0465   0.00642      7.24 4.49e- 13\n 8 quietTRUE                               -0.0394   0.00763     -5.17 2.41e-  7\n 9 host_is_superhostTRUE                    0.0270   0.00684      3.94 8.19e-  5\n10 review_scores_cleanliness                0.123    0.00670     18.3  3.66e- 74\n# ℹ 17 more rows\n\n\n\n# review dishes and silverware\nall_18_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        wifi +\n        workspace +\n        quiet +\n        host_is_superhost +\n        # host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        host_response_time +\n        host_acceptance_rate +\n        air_conditioning +\n        heating +\n        # dishes_and_silverware +\n        cooking_basics +\n        microwave +\n        coffee_maker +\n        washer +\n        dryer +\n        room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\nglance(all_18_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.608         0.607 0.433     1232.       0    25 -11556. 23165. 23378.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_18_fit)\n\n# A tibble: 26 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              3.81     0.0529      72.0  0        \n 2 neighbourhood_group_cleansedBrooklyn     0.177    0.0142      12.5  1.31e- 35\n 3 neighbourhood_group_cleansedManhattan    0.505    0.0145      34.8  1.64e-257\n 4 neighbourhood_group_cleansedQueens       0.0577   0.0149       3.87 1.07e-  4\n 5 neighbourhood_group_cleansedStaten Is…  -0.0454   0.0283      -1.61 1.08e-  1\n 6 wifiTRUE                                -0.120    0.0344      -3.49 4.78e-  4\n 7 workspaceTRUE                            0.0461   0.00642      7.18 7.47e- 13\n 8 quietTRUE                               -0.0400   0.00763     -5.24 1.62e-  7\n 9 host_is_superhostTRUE                    0.0269   0.00685      3.93 8.62e-  5\n10 review_scores_cleanliness                0.122    0.00670     18.2  2.80e- 73\n# ℹ 16 more rows\n\n\n\n# remove superhost\n\nall_17_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        wifi +\n        workspace +\n        quiet +\n        # host_is_superhost +\n        # host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        host_response_time +\n        host_acceptance_rate +\n        air_conditioning +\n        heating +\n        # dishes_and_silverware +\n        cooking_basics +\n        microwave +\n        coffee_maker +\n        washer +\n        dryer +\n        room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\nglance(all_17_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.607         0.607 0.433     1282.       0    24 -11563. 23178. 23384.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_17_fit)\n\n# A tibble: 25 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              3.78     0.0523      72.2  0        \n 2 neighbourhood_group_cleansedBrooklyn     0.179    0.0142      12.6  2.39e- 36\n 3 neighbourhood_group_cleansedManhattan    0.504    0.0145      34.7  9.74e-257\n 4 neighbourhood_group_cleansedQueens       0.0584   0.0149       3.93 8.67e-  5\n 5 neighbourhood_group_cleansedStaten Is…  -0.0446   0.0283      -1.58 1.15e-  1\n 6 wifiTRUE                                -0.118    0.0344      -3.44 5.72e-  4\n 7 workspaceTRUE                            0.0470   0.00642      7.31 2.70e- 13\n 8 quietTRUE                               -0.0385   0.00763     -5.05 4.49e-  7\n 9 review_scores_cleanliness                0.127    0.00656     19.4  4.64e- 83\n10 host_response_timewithin a day          -0.145    0.0249      -5.84 5.20e-  9\n# ℹ 15 more rows\n\n\n\n# remove wifi\n\nall_16_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        #wifi +\n        workspace +\n        quiet +\n        # host_is_superhost +\n        # host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        host_response_time +\n        host_acceptance_rate +\n        air_conditioning +\n        heating +\n        # dishes_and_silverware +\n        cooking_basics +\n        microwave +\n        coffee_maker +\n        washer +\n        dryer +\n        room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\nglance(all_16_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.607         0.607 0.433     1336.       0    23 -11569. 23188. 23386.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_16_fit)\n\n# A tibble: 24 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              3.67     0.0422      87.0  0        \n 2 neighbourhood_group_cleansedBrooklyn     0.178    0.0142      12.5  8.77e- 36\n 3 neighbourhood_group_cleansedManhattan    0.503    0.0145      34.6  1.92e-255\n 4 neighbourhood_group_cleansedQueens       0.0567   0.0149       3.81 1.38e-  4\n 5 neighbourhood_group_cleansedStaten Is…  -0.0453   0.0283      -1.60 1.10e-  1\n 6 workspaceTRUE                            0.0462   0.00642      7.20 6.29e- 13\n 7 quietTRUE                               -0.0390   0.00763     -5.11 3.19e-  7\n 8 review_scores_cleanliness                0.126    0.00655     19.3  4.17e- 82\n 9 host_response_timewithin a day          -0.146    0.0249      -5.86 4.61e-  9\n10 host_response_timewithin a few hours    -0.214    0.0246      -8.69 4.04e- 18\n# ℹ 14 more rows\n\n\n\n# remove heating\n\nall_15_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        #wifi +\n        workspace +\n        quiet +\n        # host_is_superhost +\n        # host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        host_response_time +\n        host_acceptance_rate +\n        air_conditioning +\n        # heating +\n        # dishes_and_silverware +\n        cooking_basics +\n        microwave +\n        coffee_maker +\n        washer +\n        dryer +\n        room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\nglance(all_15_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.607         0.606 0.433     1395.       0    22 -11579. 23207. 23396.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_15_fit)\n\n# A tibble: 23 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              3.63     0.0415      87.6  0        \n 2 neighbourhood_group_cleansedBrooklyn     0.176    0.0142      12.4  5.29e- 35\n 3 neighbourhood_group_cleansedManhattan    0.500    0.0145      34.5  3.65e-253\n 4 neighbourhood_group_cleansedQueens       0.0542   0.0149       3.64 2.72e-  4\n 5 neighbourhood_group_cleansedStaten Is…  -0.0486   0.0283      -1.72 8.56e-  2\n 6 workspaceTRUE                            0.0466   0.00642      7.26 4.13e- 13\n 7 quietTRUE                               -0.0395   0.00763     -5.18 2.24e-  7\n 8 review_scores_cleanliness                0.127    0.00656     19.3  2.38e- 82\n 9 host_response_timewithin a day          -0.145    0.0249      -5.84 5.36e-  9\n10 host_response_timewithin a few hours    -0.215    0.0246      -8.75 2.32e- 18\n# ℹ 13 more rows\n\n\n\n# remove acceptance rate\n\nall_14_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        #wifi +\n        workspace +\n        quiet +\n        # host_is_superhost +\n        # host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        host_response_time +\n        # host_acceptance_rate +\n        air_conditioning +\n        # heating +\n        # dishes_and_silverware +\n        cooking_basics +\n        microwave +\n        coffee_maker +\n        washer +\n        dryer +\n        room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\nglance(all_14_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.606         0.606 0.434     1457.       0    21 -11595. 23236. 23417.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_14_fit)\n\n# A tibble: 22 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              3.67     0.0409      89.9  0        \n 2 neighbourhood_group_cleansedBrooklyn     0.173    0.0142      12.2  3.44e- 34\n 3 neighbourhood_group_cleansedManhattan    0.498    0.0145      34.3  9.23e-251\n 4 neighbourhood_group_cleansedQueens       0.0544   0.0149       3.65 2.60e-  4\n 5 neighbourhood_group_cleansedStaten Is…  -0.0480   0.0283      -1.69 9.03e-  2\n 6 workspaceTRUE                            0.0482   0.00642      7.51 6.31e- 14\n 7 quietTRUE                               -0.0396   0.00764     -5.19 2.17e-  7\n 8 review_scores_cleanliness                0.127    0.00656     19.3  1.87e- 82\n 9 host_response_timewithin a day          -0.123    0.0246      -4.99 6.19e-  7\n10 host_response_timewithin a few hours    -0.179    0.0237      -7.53 5.17e- 14\n# ℹ 12 more rows\n\n\n\n# remove response_time\n\nall_13_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        #wifi +\n        workspace +\n        quiet +\n        # host_is_superhost +\n        # host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        # host_response_time +\n        # host_acceptance_rate +\n        air_conditioning +\n        # heating +\n        # dishes_and_silverware +\n        cooking_basics +\n        microwave +\n        coffee_maker +\n        washer +\n        dryer +\n        room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\nglance(all_13_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.603         0.603 0.435     1681.       0    18 -11663. 23367. 23525.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_13_fit)\n\n# A tibble: 19 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              3.54     0.0349     102.   0        \n 2 neighbourhood_group_cleansedBrooklyn     0.170    0.0142      11.9  9.90e- 33\n 3 neighbourhood_group_cleansedManhattan    0.494    0.0146      34.0  1.12e-245\n 4 neighbourhood_group_cleansedQueens       0.0510   0.0149       3.41 6.41e-  4\n 5 neighbourhood_group_cleansedStaten Is…  -0.0468   0.0284      -1.65 9.97e-  2\n 6 workspaceTRUE                            0.0477   0.00642      7.42 1.20e- 13\n 7 quietTRUE                               -0.0432   0.00765     -5.65 1.66e-  8\n 8 review_scores_cleanliness                0.130    0.00657     19.8  3.60e- 86\n 9 air_conditioningTRUE                     0.0530   0.00675      7.84 4.59e- 15\n10 cooking_basicsTRUE                      -0.0442   0.00829     -5.33 1.02e-  7\n11 microwaveTRUE                           -0.0827   0.00774    -10.7  1.38e- 26\n12 coffee_makerTRUE                         0.0620   0.00772      8.02 1.09e- 15\n13 washerTRUE                               0.112    0.00669     16.7  3.01e- 62\n14 dryerTRUE                                0.110    0.00878     12.6  3.67e- 36\n15 room_typeHotel room                      0.303    0.0411       7.35 2.01e- 13\n16 room_typePrivate room                   -0.527    0.00760    -69.3  0        \n17 room_typeShared room                    -0.858    0.0279     -30.8  5.28e-203\n18 bedrooms                                 0.183    0.00498     36.8  8.56e-287\n19 bathrooms                                0.292    0.00900     32.4  4.87e-225\n\n\n\n# remove cooking basics\n\nall_12_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        #wifi +\n        workspace +\n        quiet +\n        # host_is_superhost +\n        # host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        # host_response_time +\n        # host_acceptance_rate +\n        air_conditioning +\n        # heating +\n        # dishes_and_silverware +\n        # cooking_basics +\n        microwave +\n        coffee_maker +\n        washer +\n        dryer +\n        room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\nglance(all_12_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.603         0.603 0.435     1776.       0    17 -11678. 23393. 23543.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_12_fit)\n\n# A tibble: 18 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              3.53     0.0348     101.   0        \n 2 neighbourhood_group_cleansedBrooklyn     0.169    0.0142      11.9  1.83e- 32\n 3 neighbourhood_group_cleansedManhattan    0.497    0.0146      34.1  3.52e-248\n 4 neighbourhood_group_cleansedQueens       0.0539   0.0149       3.61 3.07e-  4\n 5 neighbourhood_group_cleansedStaten Is…  -0.0435   0.0284      -1.53 1.26e-  1\n 6 workspaceTRUE                            0.0437   0.00638      6.84 8.00e- 12\n 7 quietTRUE                               -0.0436   0.00765     -5.69 1.29e-  8\n 8 review_scores_cleanliness                0.130    0.00658     19.7  1.63e- 85\n 9 air_conditioningTRUE                     0.0543   0.00675      8.04 9.34e- 16\n10 microwaveTRUE                           -0.0950   0.00739    -12.9  1.19e- 37\n11 coffee_makerTRUE                         0.0533   0.00755      7.05 1.80e- 12\n12 washerTRUE                               0.110    0.00669     16.4  5.04e- 60\n13 dryerTRUE                                0.103    0.00868     11.9  1.37e- 32\n14 room_typeHotel room                      0.323    0.0410       7.88 3.43e- 15\n15 room_typePrivate room                   -0.522    0.00755    -69.2  0        \n16 room_typeShared room                    -0.859    0.0279     -30.7  7.59e-203\n17 bedrooms                                 0.182    0.00498     36.6  5.01e-284\n18 bathrooms                                0.294    0.00899     32.7  7.23e-229\n\n\n\n# remove quiet \n\nall_11_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        #wifi +\n        workspace +\n        #quiet +\n        # host_is_superhost +\n        # host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        # host_response_time +\n        # host_acceptance_rate +\n        air_conditioning +\n        # heating +\n        # dishes_and_silverware +\n        # cooking_basics +\n        microwave +\n        coffee_maker +\n        washer +\n        dryer +\n        room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\nglance(all_11_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.602         0.602 0.436     1882.       0    16 -11694. 23423. 23566.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_11_fit)\n\n# A tibble: 17 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              3.53     0.0348     101.   0        \n 2 neighbourhood_group_cleansedBrooklyn     0.170    0.0143      11.9  1.68e- 32\n 3 neighbourhood_group_cleansedManhattan    0.497    0.0146      34.1  2.33e-248\n 4 neighbourhood_group_cleansedQueens       0.0542   0.0149       3.63 2.87e-  4\n 5 neighbourhood_group_cleansedStaten Is…  -0.0438   0.0284      -1.54 1.23e-  1\n 6 workspaceTRUE                            0.0431   0.00639      6.75 1.54e- 11\n 7 review_scores_cleanliness                0.128    0.00658     19.4  2.46e- 83\n 8 air_conditioningTRUE                     0.0555   0.00675      8.21 2.36e- 16\n 9 microwaveTRUE                           -0.0947   0.00739    -12.8  2.09e- 37\n10 coffee_makerTRUE                         0.0526   0.00756      6.96 3.45e- 12\n11 washerTRUE                               0.110    0.00669     16.4  5.77e- 60\n12 dryerTRUE                                0.102    0.00869     11.7  9.04e- 32\n13 room_typeHotel room                      0.331    0.0410       8.08 6.70e- 16\n14 room_typePrivate room                   -0.520    0.00755    -69.0  0        \n15 room_typeShared room                    -0.852    0.0279     -30.5  6.27e-200\n16 bedrooms                                 0.183    0.00499     36.7  4.53e-286\n17 bathrooms                                0.296    0.00899     32.9  2.20e-231\n\n\n\n# remove workspace\n\nall_10_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        #wifi +\n        # workspace +\n        #quiet +\n        # host_is_superhost +\n        # host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        # host_response_time +\n        # host_acceptance_rate +\n        air_conditioning +\n        # heating +\n        # dishes_and_silverware +\n        # cooking_basics +\n        microwave +\n        coffee_maker +\n        washer +\n        dryer +\n        room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\nglance(all_10_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.601         0.601 0.436     2000.       0    15 -11716. 23467. 23601.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_10_fit)\n\n# A tibble: 16 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              3.54     0.0348     102.   0        \n 2 neighbourhood_group_cleansedBrooklyn     0.170    0.0143      11.9  1.23e- 32\n 3 neighbourhood_group_cleansedManhattan    0.496    0.0146      34.0  2.48e-246\n 4 neighbourhood_group_cleansedQueens       0.0540   0.0150       3.61 3.11e-  4\n 5 neighbourhood_group_cleansedStaten Is…  -0.0455   0.0285      -1.60 1.10e-  1\n 6 review_scores_cleanliness                0.129    0.00658     19.6  6.29e- 85\n 7 air_conditioningTRUE                     0.0508   0.00673      7.55 4.48e- 14\n 8 microwaveTRUE                           -0.0943   0.00740    -12.7  5.36e- 37\n 9 coffee_makerTRUE                         0.0566   0.00755      7.49 6.94e- 14\n10 washerTRUE                               0.111    0.00669     16.7  6.75e- 62\n11 dryerTRUE                                0.106    0.00868     12.2  6.35e- 34\n12 room_typeHotel room                      0.322    0.0410       7.86 4.03e- 15\n13 room_typePrivate room                   -0.521    0.00756    -68.9  0        \n14 room_typeShared room                    -0.851    0.0280     -30.4  4.45e-199\n15 bedrooms                                 0.183    0.00499     36.6  1.76e-284\n16 bathrooms                                0.297    0.00900     33.0  3.10e-232\n\n\n\n# remove coffee maker\n\nall_9_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        #wifi +\n        # workspace +\n        #quiet +\n        # host_is_superhost +\n        # host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        # host_response_time +\n        # host_acceptance_rate +\n        air_conditioning +\n        # heating +\n        # dishes_and_silverware +\n        # cooking_basics +\n        microwave +\n        # coffee_maker +\n        washer +\n        dryer +\n        room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\nglance(all_9_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.600         0.600 0.437     2133.       0    14 -11745. 23521. 23647.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_9_fit)\n\n# A tibble: 15 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              3.54     0.0349     102.   0        \n 2 neighbourhood_group_cleansedBrooklyn     0.170    0.0143      11.9  1.62e- 32\n 3 neighbourhood_group_cleansedManhattan    0.492    0.0146      33.7  2.80e-242\n 4 neighbourhood_group_cleansedQueens       0.0500   0.0150       3.34 8.34e-  4\n 5 neighbourhood_group_cleansedStaten Is…  -0.0419   0.0285      -1.47 1.41e-  1\n 6 review_scores_cleanliness                0.134    0.00656     20.4  1.21e- 91\n 7 air_conditioningTRUE                     0.0467   0.00671      6.96 3.46e- 12\n 8 microwaveTRUE                           -0.0750   0.00695    -10.8  4.54e- 27\n 9 washerTRUE                               0.114    0.00669     17.0  1.79e- 64\n10 dryerTRUE                                0.118    0.00853     13.8  2.11e- 43\n11 room_typeHotel room                      0.312    0.0411       7.61 2.85e- 14\n12 room_typePrivate room                   -0.528    0.00750    -70.4  0        \n13 room_typeShared room                    -0.856    0.0280     -30.6  4.85e-201\n14 bedrooms                                 0.184    0.00500     36.8  3.44e-286\n15 bathrooms                                0.297    0.00902     32.9  1.43e-231\n\n\n\n# remove air conditioning\n\nall_8_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        #wifi +\n        # workspace +\n        #quiet +\n        # host_is_superhost +\n        # host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        # host_response_time +\n        # host_acceptance_rate +\n        # air_conditioning +\n        # heating +\n        # dishes_and_silverware +\n        # cooking_basics +\n        microwave +\n        # coffee_maker +\n        washer +\n        dryer +\n        room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\nglance(all_8_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.599         0.599 0.437     2288.       0    13 -11769. 23568. 23686.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_8_fit)\n\n# A tibble: 14 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              3.57     0.0346     103.   0        \n 2 neighbourhood_group_cleansedBrooklyn     0.172    0.0143      12.0  3.99e- 33\n 3 neighbourhood_group_cleansedManhattan    0.496    0.0146      34.0  2.04e-246\n 4 neighbourhood_group_cleansedQueens       0.0494   0.0150       3.30 9.76e-  4\n 5 neighbourhood_group_cleansedStaten Is…  -0.0389   0.0285      -1.36 1.73e-  1\n 6 review_scores_cleanliness                0.133    0.00657     20.3  1.44e- 90\n 7 microwaveTRUE                           -0.0791   0.00694    -11.4  5.15e- 30\n 8 washerTRUE                               0.117    0.00668     17.5  2.04e- 68\n 9 dryerTRUE                                0.120    0.00854     14.0  2.03e- 44\n10 room_typeHotel room                      0.324    0.0411       7.88 3.40e- 15\n11 room_typePrivate room                   -0.529    0.00751    -70.4  0        \n12 room_typeShared room                    -0.853    0.0280     -30.5  4.00e-199\n13 bedrooms                                 0.183    0.00500     36.5  1.12e-282\n14 bathrooms                                0.301    0.00900     33.4  1.06e-238\n\n\n\n# remove room type\nall_7_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        #wifi +\n        # workspace +\n        #quiet +\n        # host_is_superhost +\n        # host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        # host_response_time +\n        # host_acceptance_rate +\n        # air_conditioning +\n        # heating +\n        # dishes_and_silverware +\n        # cooking_basics +\n        microwave +\n        # coffee_maker +\n        washer +\n        dryer +\n        #room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\nglance(all_7_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.488         0.488 0.494     1899.       0    10 -14199. 28421. 28516.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_7_fit)\n\n# A tibble: 11 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              2.80     0.0372     75.2   0        \n 2 neighbourhood_group_cleansedBrooklyn     0.198    0.0162     12.3   1.86e- 34\n 3 neighbourhood_group_cleansedManhattan    0.551    0.0165     33.5   2.01e-239\n 4 neighbourhood_group_cleansedQueens       0.0395   0.0169      2.33  1.97e-  2\n 5 neighbourhood_group_cleansedStaten Is…  -0.0118   0.0322     -0.366 7.15e-  1\n 6 review_scores_cleanliness                0.174    0.00739    23.6   3.10e-121\n 7 microwaveTRUE                           -0.0532   0.00780    -6.82  9.09e- 12\n 8 washerTRUE                               0.122    0.00754    16.1   3.24e- 58\n 9 dryerTRUE                                0.138    0.00963    14.3   3.46e- 46\n10 bedrooms                                 0.229    0.00560    40.9   0        \n11 bathrooms                                0.540    0.00948    56.9   0        \n\n\n\n# remove microwave\nall_6_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        #wifi +\n        # workspace +\n        #quiet +\n        # host_is_superhost +\n        # host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        # host_response_time +\n        # host_acceptance_rate +\n        # air_conditioning +\n        # heating +\n        # dishes_and_silverware +\n        # cooking_basics +\n        # microwave +\n        # coffee_maker +\n        washer +\n        dryer +\n        #room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\nglance(all_6_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.487         0.487 0.495     2100.       0     9 -14222. 28466. 28552.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_6_fit)\n\n# A tibble: 10 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                              2.80     0.0373     75.0   0        \n 2 neighbourhood_group_cleansedBrooklyn     0.205    0.0161     12.7   5.89e- 37\n 3 neighbourhood_group_cleansedManhattan    0.563    0.0164     34.3   8.07e-251\n 4 neighbourhood_group_cleansedQueens       0.0416   0.0169      2.46  1.41e-  2\n 5 neighbourhood_group_cleansedStaten Is…  -0.0120   0.0323     -0.373 7.09e-  1\n 6 review_scores_cleanliness                0.169    0.00736    23.0   2.00e-115\n 7 washerTRUE                               0.117    0.00751    15.6   3.20e- 54\n 8 dryerTRUE                                0.122    0.00936    13.0   1.07e- 38\n 9 bedrooms                                 0.227    0.00560    40.6   0        \n10 bathrooms                                0.541    0.00949    57.0   0        \n\n\n\n# remove washer\nall_5_fit <- linear_reg() |>\n  fit(log(price) ~ neighbourhood_group_cleansed + \n        #wifi +\n        # workspace +\n        #quiet +\n        # host_is_superhost +\n        # host_identity_verified +\n        review_scores_cleanliness +\n        # review_scores_communication +\n        # review_scores_rating +\n        # host_response_time +\n        # host_acceptance_rate +\n        # air_conditioning +\n        # heating +\n        # dishes_and_silverware +\n        # cooking_basics +\n        # microwave +\n        # coffee_maker +\n        # washer +\n        dryer +\n        #room_type +\n        bedrooms +\n        bathrooms,\n      data = main_variable_dataset)\nglance(all_5_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1     0.481         0.481 0.498     2305.       0     8 -14342. 28704. 28783.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\ntidy(all_5_fit)\n\n# A tibble: 9 × 5\n  term                                    estimate std.error statistic   p.value\n  <chr>                                      <dbl>     <dbl>     <dbl>     <dbl>\n1 (Intercept)                             2.77       0.0375    73.9    0        \n2 neighbourhood_group_cleansedBrooklyn    0.219      0.0162    13.5    1.66e- 41\n3 neighbourhood_group_cleansedManhattan   0.581      0.0164    35.3    5.08e-265\n4 neighbourhood_group_cleansedQueens      0.0372     0.0170     2.18   2.93e-  2\n5 neighbourhood_group_cleansedStaten Isl… 0.000705   0.0325     0.0217 9.83e-  1\n6 review_scores_cleanliness               0.174      0.00740   23.5    2.62e-120\n7 dryerTRUE                               0.151      0.00922   16.4    3.54e- 60\n8 bedrooms                                0.231      0.00562   41.1    0        \n9 bathrooms                               0.560      0.00947   59.1    0        \n\n\n\nbackward_elimination_table <- tribble(\n  ~ `Step`, ~ `Variable eliminated`, ~ `Adjusted R-squared`,\n  1, \"Listing rating\", glance(all_21_fit)$adj.r.squared,\n  2, \"Host communication rating\",glance(all_20_fit)$adj.r.squared,\n  3, \"Host identity is verified\",glance(all_19_fit)$adj.r.squared,\n  4, \"Dishes and silverware\",glance(all_18_fit)$adj.r.squared,\n  5, \"Superhost status\",glance(all_17_fit)$adj.r.squared,\n  6, \"Wifi\",glance(all_16_fit)$adj.r.squared,\n  7, \"Heating\",glance(all_15_fit)$adj.r.squared,\n  8, \"Host acceptance rate\",glance(all_14_fit)$adj.r.squared,\n  9, \"Host response time\",glance(all_13_fit)$adj.r.squared,\n  10, \"Cooking basics\",glance(all_12_fit)$adj.r.squared,\n  11, \"Quiet environment\",glance(all_11_fit)$adj.r.squared,\n  12, \"Dedicated workspace\",glance(all_10_fit)$adj.r.squared,\n  13, \"Coffee maker\",glance(all_9_fit)$adj.r.squared,\n  14, \"Air conditioning\",glance(all_8_fit)$adj.r.squared,\n  15, \"Room type\",glance(all_7_fit)$adj.r.squared,\n  16, \"Microwave\",glance(all_6_fit)$adj.r.squared, \n  17, \"Washer\",glance(all_5_fit)$adj.r.squared \n)\nwrite_csv(backward_elimination_table, \"data/airbnb_data/backward_elimination_table.csv\")"
  },
  {
    "objectID": "report.html#introduction",
    "href": "report.html#introduction",
    "title": "Analyzing Airbnb Data",
    "section": "Introduction",
    "text": "Introduction\nSince its 2008 launch, Airbnb has transformed the travel and hospitality sector. Generating billions in revenue and offering over six million listings globally—surpassing the top three hotel chains combined—it has disrupted conventional travel and enabled everyday people to become hospitality providers. Studies reveal a 1% rise in Airbnb listings leads to a 0.03% drop in hotel revenues in major US cities (Dogru et al., 2019). As Airbnb expands and influences industries, research is crucial to comprehend its market and user impacts. Specifically, our research aims to identify key Airbnb factors that have strong predictability for price. Through both univariate and multivariate regression analysis and various hypotheses testings, our findings conclude that the following eight variables have the highest degree of impact on Airbnb’s price mechanism: the listing’s location, cleanliness score, room type, number of bedrooms and bathrooms, and the presence of a microwave, washer, and dryer."
  },
  {
    "objectID": "report.html#data-description",
    "href": "report.html#data-description",
    "title": "Analyzing Airbnb Data",
    "section": "Data description",
    "text": "Data description\nIn this report, we utilized the dataset obtained from Inside Airbnb, an open platform offering global Airbnb listing data to empower communities with insights on Airbnb’s residential impact. The dataset is aggregated through Airbnb’s public information on their website and contains information on over 42,000 listings in New York City as of March 6, 2023.\nIn terms of what processes might have influenced what data was observed and what was not, there is not much, if any. The data utilizes public information compiled from the Airbnb website, so, if a listing is on the website at the time of scraping, it will be on the dataset. No private information is being used: names, photographs, listings, and review details are all public. Furthermore, not much preprocessing was done (or explained) on the data. Evidence of this can be seen from the data. For example, price is noted as a chr, which is likely due to it being directly scraped from the webpage.\nAll the Airbnb data scraped by Inside Airbnb is public, so all Airbnb hosts should be aware that their data and information can be scraped and used for other purposes. The dataset’s observations are NYC Airbnb listings, with attributes describing listings and hosts, such as price, host_is_superhost, room_type, and review_scores_rating."
  },
  {
    "objectID": "report.html#what-affects-price",
    "href": "report.html#what-affects-price",
    "title": "Analyzing Airbnb Data",
    "section": "What affects price?",
    "text": "What affects price?\nThis report examined factors influencing Airbnb listing prices in New York City. We analyzed three main categories: (1) location, (2) listing characteristics (e.g., bedrooms, amenities), and (3) host characteristics (e.g., superhost status, response time). Each variable is summarized and its relationship with price displayed. We fit linear regression models for individual variables and perform a multivariable linear regression at the end, as well as fit machine learning models to create a price predictor model.\nWe observed that NYC Airbnb listing prices were heavily right-skewed, regardless of which borough they were situated in. While these prices are outliers, they should be included in this particular evaluation to consider all of the variability in prices. As such, we decided to conduct any model fitting to log(price).\n\nLocation\nWe found that the median prices of listings are different in the five NYC boroughs. Naturally, we wanted to determine how much variability in listing prices does location account for. Fitting a linear regression between log(price) and borough, we produce the following equation:\n\n\n\n\\[\n\\begin{split}\n\\widehat{log(Airbnb~listing~price)} = 4.4947394 + 0.2206278\\times Brooklyn + 0.631\\times Manhattan\\\\+ 0.0288866 \\times Queens + 0.1409128 \\times Staten~Island\n\\end{split}\n\\]\nInterpreting the intercept, we predict that a listing that is located in the Bronx will have a price of around \\(e^{4.4947394} \\approx \\$89.54\\) per night.\nInterpreting the slopes:\n\nA listing in Brooklyn is expected to be \\(e^{0.2206278} \\approx \\$1.25\\) higher per night compared to one in the Bronx, on average.\nA listing in Manhattan is expected to be \\(e^{0.6314541} \\approx \\$1.88\\) higher per night compared to one in the Bronx, on average.\nA listing in Queens is expected to be \\(e^{0.0288866} \\approx \\$1.03\\) higher per night compared to one in the Bronx, on average.\nAnd, a listing on Staten Island is expected to be \\(e^{0.1409128} \\approx \\$1.15\\) higher per night compared to one in the Bronx, on average.\n\nIn addition, we see that the R2 value of this univariate linear regression model is 0.115. In other words, borough accounts for 11.5% of price variability. Because this is a low R2 value, we performed the same regression on neighborhoods (i.e. Chelsea, Midtown, Williamsburg, etc.) for increased categorical coefficients, expecting to capture more variability on a regional basis.\n\n\n\nDue to the 221 different coefficients within this regression, showing the equation for this regression seem unreasonable. However, we can report that this model has an R2 value of 0.253, which is expected.\nComparing the adjusted R2 values of both models, we can determine that the linear model considering neighborhoods is better for log(price) predictability. However, moving forward, we will use the variable for boroughs to account for the listing location as using neighborhood levels might cause overfitting.\n\n\nListing characteristics\n\nRoom type, number of bedrooms, and number of bathrooms\nAll data analysis on room type, number of bedrooms, and number of bathrooms can be found in the Appendix. However, to summarize:\n\nMost NYC Airbnb listings are “Entire home/apt” and “Private room” options. “Hotel room” is the priciest, followed by “Entire home/apt,” “Private room,” and “Shared room.”\nThe distribution of the number of bedrooms is heavily right-skewed: most NYC Airbnb listings have one or two bedrooms. Generally, prices rise with the number of bedrooms\nSimilarly, the distribution of the number of bathrooms is heavily right-skewed, with most having one bathroom. Generally, prices rise with the number of bathrooms.\n\n\n\n\n\n\n\n\n\n\nWe fitted univariate linear regression models with all three variables to see how much variability in price is explained by each variable.\n\n\n\n\n \n  \n    Characteristic \n    R-squared \n  \n \n\n  \n    Room type \n    0.330 \n  \n  \n    Number of bathrooms \n    0.276 \n  \n  \n    Number of bedrooms \n    0.155 \n  \n\n\n\n\n\nWe see that room type has the highest R2 value, which means it accounts for the most variability in price amongst the three listing characteristics. This suggests that room type might be one of the better variables to use to predict price - we will test this in our multivariate analysis.\n\n\nExtra amenities\nNext, we want to look into how amenities affect Airbnb prices. On this page, Airbnb Resource Center talks about some amenities guests look for, which include dining basics, coffee & tea, and cleaning supplies among others. We want to test whether having extra amenities impacts price. In our analysis, we include the following as “extras”: air conditioning, heating, dishes and silverware, cooking basics, microwave, coffee maker, washer, and dryer. We first visualize the proportion of listings that have all the extra amenities included.\n\n\n\n\n\n\n\n\n\nWe see that Staten Island and Brooklyn are the two boroughs with the highest proportion of listings that offer all the extra amenities. However, it is quite evident that the majority of listings do not have all the extras and that the distribution is quite similar between boroughs. In other words, any impact extra amenities have on price is likely to be borough-independent.\nTo figure out if having all the extra amenities make a difference in price, we first group the listings by whether or not they have all the extra amenities or not and calculate the mean prices of each group. See Appendix 2B.\nWe indeed see that listings that offer all the extra amenities have a median price of $175, while listings that do not offer all the extra amenities have a median price of $120. To confirm that this is statistically significant, we can do a hypothesis testing. We will set a threshold value of 0.05.\n\\(H_0:\\eta_{yes}-\\eta_{no}=0\\). The difference in the true median price of listings that offer all extra amenities and those that do not is zero.\n\\(H_A:\\eta_{yes}-\\eta_{no}>0\\). The difference in the true median price of listings that offer all extra amenities and those that do not is greater than zero.\n\n\n\nWe observe a p-value of 0, which is less than our threshold value of 0.05. As such, we reject the null hypothesis in favor of the alternative hypothesis: the data provide convincing evidence that the median price of listings that include all the extra amenities are higher than the median price of listings that do not.\nHow much higher of a price can a host expect if they include all the extra amenities? To figure this out, we can generate a 95% confidence interval to see how much of a price increase a host can expect if they were to include all the extra amenities.\n\n\n\nFrom our analysis, we are 95% confident that listings that include all the extra amenities will have median prices that are between $58 to $68 higher than those that do not include all the extra amenities. This is an important finding because it can help hosts increase their earnings by offering extra amenities.\nLet’s now run a linear regression between each amenity and price. By doing so, we can learn how much variability in price is explained by whether a listing has a certain amenity or not. We can also find out which amenities hosts should focus on having in their listings. See Appendix 2C for further analysis.\n\n\n\n\n\n\n\n \n  \n    Amenity \n    R-squared \n  \n \n\n  \n    Washer \n    0.04750 \n  \n  \n    Dryer \n    0.04640 \n  \n  \n    Air conditioning \n    0.02640 \n  \n  \n    Coffee maker \n    0.02640 \n  \n  \n    Cooking basics \n    0.01150 \n  \n  \n    Dishes and silverware \n    0.00806 \n  \n  \n    Microwave \n    0.00509 \n  \n  \n    Heating \n    0.00150 \n  \n\n\n\n\n\nWe see that the top two amenities by R2 value are washer and dryer. We can infer that these two amenities affect price the most out of the list of eight extra amenities we started with, irrespective of which borough the listing is located in. We will test this in our multivariate analysis.\n\n\nWork-from-home criteria\nUpon analyzing the most frequently mentioned amenities in Airbnb listings in New York City, we observed that “dedicated workspace” appears in the top 20 amenities, which led us to think that work-from-home setups may impact price. In addition to a dedicated workspace, there are several other important amenities that Airbnb guests may be looking for in a WFH setup, including reliable high-speed internet, comfortable seating and good lighting, and a quiet environment. To identify listings that are WFH-appropriate, we established three criteria: 1) there is Wifi, 2) there is a dedicated workspace, and 3) the listing must be located in a quiet environment.\n\n\n\n\n\n\n\n\n\nWe see that Staten Island and the Bronx are the two boroughs with the highest proportion of listings with all three criteria met. Otherwise, the distribution of proportions is quite similar between boroughs. In other words, any impact WFH amenities have on price is likely to be borough-independent.\nTo figure out if satisfying all the WFH criteria makes a difference in price, we first group the listings by whether or not they satisfy all WFH criteria or not and calculated the median prices of each group. See Appendix 2D.\nWe indeed see that listings that satisfy all WFH criteria have a median price of $130, while listings that do not offer all the extra amenities have a median price of $124. To confirm that this is statistically significant, we can do a hypothesis testing. We will set a threshold value of 0.05.\n\\(H_0:\\eta_{satisfed}-\\eta_{not~satisfed}=0\\). The difference in the true median price of listings that satisfy all WFH criteria and those that do not is zero.\n\\(H_A:\\eta_{satisfed}-\\eta_{not~satisfed}>0\\). The difference in the true median price of listings that satisfy all WFH criteria and those that do not is greater than zero.\n\n\n\nWe observe a p-value of 0.003, which is less than the threshold value of 0.05. As such, we reject the null hypothesis in favor of the alternative hypothesis: the data provide convincing evidence that the median price of listings that satisfy all WFH criteria is higher than the median price of listings that do not.\nWhat we can do next is to calculate a 95% confidence interval to see how much of a price increase a host can expect if they were to include satisfy all WFH criteria.\n\n\n\nFrom our analysis, we are 95% confident that listings that satisfy all WFH criteria will have median prices that are between $3 to $11 higher than those that do not include all the extra amenities. This might not be too significant because the price difference is relatively small and may not justify the additional cost and effort required for hosts to satisfy all the WFH criteria.\nLet’s now run a linear regression between each criterion and price. By doing so, we learn how much variability in price is explained by whether a listing satisfies a criterion. See Appendix 2E for further analysis.\n\n\n\n\n\n\n\n \n  \n    Criteria \n    R-squared \n  \n \n\n  \n    Dedicated workspace \n    0.01390 \n  \n  \n    Quiet environment \n    0.00177 \n  \n  \n    Wifi \n    0.00065 \n  \n\n\n\n\n\nWe see that the top criterion by R2 value is dedicated workspace and the lowest criterion by R2 is Wifi. One reason for this might be the fact that Wifi is no longer a luxury, but a necessity, and having Wifi is no longer a differentiating factor. We can infer that, if a host wants to prioritize satisfying a WFH criterion, having a dedicated workspace would be the one to prioritize as it affects price the most out of the list of three WFH criteria.\n\n\n\nHost characteristics\nAnother point of interest when looking at Airbnb data is to see how different characteristics of the host—i.e., if they are a super host, have their identity verified, their communication review rating, etc.— might influence price. We can start by isolating these host-adjacent variables and identify any trends that might exist. See Appendix 2F for further analysis.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe observe that nearly 24% of hosts are considered superhosts and 84% have their identity verified. In terms of review scores, nearly 95% of hosts have an accuracy rating between 4.0 and 5.0, 90% have a cleanliness review score between 4.0 and 5.0, 96% have a check-in review score between 4.0 and 5.0, and 96% have a communication review score between 4.0 and 5.0. As for a host’s response rate, about 65% of hosts reply within an hour.\nTo get a better analysis of how these trends might drive listing prices, we can fit linear regression models across these six characteristics—i.e., host_is_superhost, host_identity_verified, review_scores_cleanliness, review_scores_communication, host_response_time, and host_acceptance_rate— to predict price. We will fit these models against logged price as well. After fitting these models, we get the following R2 values:\n\n\n\n\n \n  \n    Characteristic \n    R-squared \n  \n \n\n  \n    Host acceptance rate \n    0.06000 \n  \n  \n    Review cleanliness rating \n    0.02290 \n  \n  \n    Superhost \n    0.01210 \n  \n  \n    Review communication rating \n    0.00448 \n  \n  \n    Identity is verified \n    0.00357 \n  \n  \n    Host response time \n    0.00129 \n  \n\n\n\n\n\nWith an R2 value of 6% for host_acceptance_rate and 2.3% for review_scores_cleanliness, we can try hypothesis testing to determine the magnitude of predictability of these variables against price.\nWe can now begin hypothesis testing. Because the R2 values from the linear regression models for most host characteristics were marginal, we will focus our analysis on the host_acceptance_rate and review_scores_cleanliness models. We should note, however, that R2 values solely do not provide total insight into the correlation between variables, but instead indicate the amount of variability explained.\nWe can begin our hypothesis testing with host_acceptance_rate. By doing so, we can understand if the price is greater, on average, for listings under hosts with an acceptance rate of less than 51%. To test statistical significance, we will set an threshold value of 0.05.\n\\(H_0:\\eta_{~acceptance~rate~<~.51}-\\eta_{~acceptance~rate~>~.5}=0\\). The median price of listings whose hosts have acceptance rates of less than 51% is the same as the median price of listings whose hosts have acceptance rates of greater than 50%.\n\\(H_A:\\eta_{~acceptance~rate~<~.51}-\\eta_{~acceptance~rate~>~.5}>0\\). The median price of listings whose hosts have acceptance rates of less than 51% is greater than the median price of listings whose hosts have acceptance rates of greater than 50%.\n\n\n\nWe observe a p-value of 0, which is less than the threshold value of 0.05. As such, we reject the null hypothesis in favor of the alternative hypothesis. The data suggest that the median price of listings under hosts with an acceptance rate of less than 51%, on average, is higher than that of hosts with an acceptance rate above 50%. There may be several reasons for this. One reason might be that hosts with lower acceptance rates may be more experienced and have a better understanding of the market, or have better quality listings, enabling them to set higher prices for their listings.\nUsing the same process, we can hypothesize the effect of review_scores_cleanliness on price. Namely, we want to see if the median price of listings for hosts with a cleanliness review score between 4.0 and 5.0 is higher than that of hosts with a review less than or equal to 4.0.\n\\(H_0:\\eta_{~cleanliness~review~>~4.0}-\\eta_{~cleanliness~review~≤~4.0}=0\\). The median price of listings whose hosts have cleanliness reviews greater than 4.0 is the same as the median price of listings whose hosts have cleanliness reviews less than 4.0.\n\\(H_A:\\eta_{~cleanliness~review~>~4.0}-\\eta_{~cleanliness~review~≤~4.0}>0\\). The median price of listings whose hosts have cleanliness reviews greater than 4.0 is greater than the median price of listings whose hosts have cleanliness reviews less than 4.0.\n\n\n\nSimilar to the first hypothesis testing, we also observe a p-value of 0, which is less than the set threshold value of 0.05. As such, we reject the null hypothesis in favor of the alternative hypothesis. The data indicate that the median price of listings for hosts with a cleanliness review score between 4.0 and 5.0 is higher than that of hosts with a review less than or equal to 4.0."
  },
  {
    "objectID": "report.html#evaluation-of-significance",
    "href": "report.html#evaluation-of-significance",
    "title": "Analyzing Airbnb Data",
    "section": "Evaluation of significance",
    "text": "Evaluation of significance\n\nFitting a multivariate linear regression model\nWe have looked at 22 variables spanning three broad categories (i.e. location, listing characteristics, and host characteristics). We now want to fit a multivariate linear regression model and see how much variability in price can be accounted for. As previously mentioned, the listing prices are heavily right-skewed, and thus, the price will be logged when performing the linear regression fitting.\n\n\n\nFitting all 22 variables in a linear regression model to predict log(price), we observed an R2 value of 0.608. The R-squared value of 0.608 suggests that the linear regression model explains 60.8% of the variability in the log of price based on the 22 predictor variables included in the model. This high degree of explanation can be useful for predicting prices in many applications, highlighting the value of the chosen predictor variables.\n\n\nPerforming backward elimination\nThe most complex model is not always the better choice. Hence, we decided to perform backward elimination on our multivariate linear regression model.\nBackward elimination is a feature selection technique where variables are iteratively removed from the full model based on their significance, starting with the least significant one (i.e. the variable with the highest p-value). The process continues until the model’s performance significantly degrades. This creates a final model with only the most significant predictors, making it easier to interpret, less complex, and less prone to overfitting. See Appendix 2I for the order of elimination.\n\n\n\n\n\n\n\n\n\nAs variables are eliminated from the model, adjusted R2 decreases, which is expected as it reduces the model’s complexity. However, the first 14 eliminations maintained a relatively stable adjusted R2, indicating that the 14 variables eliminated did not significantly impact the model’s performance. The fifteenth elimination had a significant impact on adjusted R2, indicating that the final eight variables are significant in defining the model.\nWe can then infer that the final eight variables, that being location, cleanliness score, microwave, washer, dryer, room type, number of bedrooms, and number of bathrooms, are most significant in predicting price. It is important to note that there are some limitations to our version of backward elimination:\n\nOrder of variable elimination: In our case, we used p-value as our decision criterion. Different decision criteria, such as AIC or BIC, can be used instead, which may affect the order of variable elimination and the final model’s performance.\nInteraction effects: Our implementation of the multivariate regression model and backward elimination method only considers the individual impact of each variable and may overlook interaction effects between them, which could result in suboptimal model performance."
  },
  {
    "objectID": "report.html#using-machine-learning-to-predict-price",
    "href": "report.html#using-machine-learning-to-predict-price",
    "title": "Analyzing Airbnb Data",
    "section": "Using machine learning to predict price",
    "text": "Using machine learning to predict price\n\n\n\n\n\n\nIn our attempt to create a price predictor model, we fitted a random forest model and a k-nearest neighbors (k-NN) model to our dataset. The original dataset was randomly split into a training set (75% of the data) and a testing set (25% of the data). 5-fold cross-validation was performed. Our null model produced an RMSE value of 0.693.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBoth the random forest and k-NN models outperformed the null model, with RMSE values of 0.418 and 0.526 respectively. The random forest model had higher prediction accuracy than the k-NN model, but it is important to note that the RMSE values are on a logged price scale, which implies that the prices predicted by the random forest model are still, on average, 1.5 times higher than the actual prices.\nAlthough the RMSE values for both the random forest and k-NN models suggest significant prediction errors, there are still ways to improve their performance. For instance, further hyperparameter tuning can be applied to optimize the models and other ML models like gradient-boosted decision trees and neural networks can be explored to determine if they can better capture the complexity of the data."
  },
  {
    "objectID": "report.html#interpretation-and-conclusions",
    "href": "report.html#interpretation-and-conclusions",
    "title": "Analyzing Airbnb Data",
    "section": "Interpretation and conclusions",
    "text": "Interpretation and conclusions\nBy utilizing a combination of linear regressions, adjusted R2 comparisons, and machine learning techniques, we were able to identify the key variables that appeared to significantly impact Airbnb Listing prices in NYC before March 3rd, 2023.\nOur investigation revealed the most prominent of these factors are the listing’s location, cleanliness score, room type, number of bedrooms and bathrooms, and the presence of a microwave, washer, and dryer. By taking these factors into account hosts in NYC can optimize their professional habits, listing qualities, and other pricing strategies to attract more guests and make more money. Similarly, travelers can make more informed decisions to find accommodations that best suit their preferences and budget, resulting in a more satisfactory and efficient Airbnb experience for all parties involved."
  },
  {
    "objectID": "report.html#limitations",
    "href": "report.html#limitations",
    "title": "Analyzing Airbnb Data",
    "section": "Limitations",
    "text": "Limitations\nThere are several limitations to our data and analysis:\n\nWith our current dataset, we cannot do a time-series analysis on prices since the prices listed in the main dataset is valid for the one day the data was scraped. There are more .csv files on Inside Airbnb that we can download and merge to conduct a time-series analysis on prices in the future.\nWe have done an analysis of Airbnb listings in NYC. How about listings in Chicago? San Diego? London? Trends we find in NYC may not be applicable in other cities.\nOur analysis excludes relevant variables that could impact pricing, such as external market conditions and seasonal demand."
  },
  {
    "objectID": "report.html#acknowledgements",
    "href": "report.html#acknowledgements",
    "title": "Analyzing Airbnb Data",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nWe thank the collaborators and partners at Inside Airbnb for the comprehensive dataset.\nWe also found the below resources helpful:\n\nIntroduction to Modern Statistics, First Edition by Mine Çetinkaya-Rundel and Johanna Hardin\nTidy Modeling with R by Max Kuhn and Julia Silge\n\nWe thank Professor Soltoff and the INFO 2950 course staff for all the help and support."
  },
  {
    "objectID": "report.html#analysis-1-location",
    "href": "report.html#analysis-1-location",
    "title": "Analyzing Airbnb Data",
    "section": "Analysis 1: Location",
    "text": "Analysis 1: Location\nWe found that the median prices of listings are different in the five NYC boroughs. Naturally, we wanted to determine how much variability in listing prices location accounts for. Fitting a linear regression between log(price) and borough, we produce the following equation:\n\n\n\n\\[\n\\begin{split}\n\\widehat{log(Airbnb~listing~price)} = 4.4947394 + 0.2206278\\times Brooklyn + 0.631\\times Manhattan\\\\+ 0.0288866 \\times Queens + 0.1409128 \\times Staten~Island\n\\end{split}\n\\]\nInterpreting the intercept, we predict that a listing that is located in the Bronx will have a price of around \\(e^{4.4947394} \\approx \\$89.54\\) per night.\nInterpreting the slopes:\n\nA listing in Brooklyn is expected to be \\(e^{0.2206278} \\approx \\$1.25\\) higher per night compared to one in the Bronx, on average.\nA listing in Manhattan is expected to be \\(e^{0.6314541} \\approx \\$1.88\\) higher per night compared to one in the Bronx, on average.\nA listing in Queens is expected to be \\(e^{0.0288866} \\approx \\$1.03\\) higher per night compared to one in the Bronx, on average.\nAnd, a listing on Staten Island is expected to be \\(e^{0.1409128} \\approx \\$1.15\\) higher per night compared to one in the Bronx, on average.\n\nIn addition, we see that the R2 value of this univariate linear regression model is 0.115. In other words, borough accounts for 11.5% of price variability. Because this is a low R2 value, we performed the same regression on neighborhoods (i.e. Chelsea, Midtown, Williamsburg, etc.) for increased categorical coefficients, expecting to capture more variability on a regional basis.\n\n\n\nDue to the 221 different coefficients within this regression, showing the equation for this regression seem unreasonable. However, we can report that this model has an R2 value of 0.253, which is expected.\nComparing the adjusted R2 values of both models, we can determine that the linear model considering neighborhoods is better for log(price) predictability. However, moving forward, we will use the variable for boroughs to account for the listing location as using neighborhood levels might cause overfitting."
  },
  {
    "objectID": "report.html#analysis-2-listing-characteristics",
    "href": "report.html#analysis-2-listing-characteristics",
    "title": "Analyzing Airbnb Data",
    "section": "Analysis 2: Listing characteristics",
    "text": "Analysis 2: Listing characteristics\n\nRoom type, number of bedrooms, and number of bathrooms\nAll data analysis on room type, number of bedrooms, and number of bathrooms can be found in the Appendix. However, to summarize:\n\nMost NYC Airbnb listings are “Entire home/apt” and “Private room” options. “Hotel room” is the priciest, followed by “Entire home/apt,” “Private room,” and “Shared room.”\nThe distribution of the number of bedrooms is heavily right-skewed: most NYC Airbnb listings have one or two bedrooms. Generally, prices rise with the number of bedrooms.\nSimilarly, the distribution of the number of bathrooms is heavily right-skewed, with most having one bathroom. Generally, prices rise with the number of bathrooms.\n\n\n\n\n\n\n\n\n\n\nWe fitted univariate linear regression models with all three variables to see how much variability in price is explained by each variable.\n\n\n\n\n \n  \n    Characteristic \n    R-squared \n  \n \n\n  \n    Room type \n    0.330 \n  \n  \n    Number of bathrooms \n    0.276 \n  \n  \n    Number of bedrooms \n    0.155 \n  \n\n\n\n\n\nWe see that room type has the highest R2 value, which means it accounts for the most variability in price amongst the three listing characteristics. This suggests that room type might be one of the better variables to use to predict price - we will test this in our multivariate analysis.\n\n\nExtra amenities\nNext, we want to look into how amenities affect Airbnb prices. On this page, Airbnb Resource Center talks about some amenities guests look for, which include dining basics, coffee & tea, and cleaning supplies among others. We want to test whether having extra amenities impacts price. In our analysis, we include the following as “extras”: air conditioning, heating, dishes and silverware, cooking basics, microwave, coffee maker, washer, and dryer. We first visualize the proportion of listings that have all the extra amenities included.\n\n\n\n\n\n\n\n\n\nWe see that Staten Island and Brooklyn are the two boroughs with the highest proportion of listings that offer all the extra amenities. However, it is quite evident that the majority of listings do not have all the extras and that the distribution is quite similar between boroughs. In other words, any impact extra amenities have on price is likely to be borough-independent.\nTo figure out if having all the extra amenities make a difference in price, we first group the listings by whether or not they have all the extra amenities or not and calculate the mean prices of each group. See Appendix 2B.\nWe indeed see that listings that offer all the extra amenities have a median price of $175, while listings that do not offer all the extra amenities have a median price of $120. To confirm that this is statistically significant, we can do a hypothesis testing. We will set a threshold value of 0.05.\n\\(H_0:\\eta_{yes}-\\eta_{no}=0\\). The difference in the true median price of listings that offer all extra amenities and those that do not is zero.\n\\(H_A:\\eta_{yes}-\\eta_{no}>0\\). The difference in the true median price of listings that offer all extra amenities and those that do not is greater than zero.\n\n\n\nWe observe a p-value of 0, which is less than our threshold value of 0.05. As such, we reject the null hypothesis in favor of the alternative hypothesis: the data provide convincing evidence that the median price of listings that include all the extra amenities are higher than the median price of listings that do not.\nHow much higher of a price can a host expect if they include all the extra amenities? To figure this out, we can generate a 95% confidence interval to see how much of a price increase a host can expect if they were to include all the extra amenities.\n\n\n\nFrom our analysis, we are 95% confident that listings that include all the extra amenities will have median prices that are between $58 to $68 higher than those that do not include all the extra amenities. This is an important finding because it can help hosts increase their earnings by offering extra amenities.\nLet’s now run a linear regression between each amenity and price. By doing so, we can learn how much variability in price is explained by whether a listing has a certain amenity or not. We can also find out which amenities hosts should focus on having in their listings. See Appendix 2C for further analysis.\n\n\n\n\n\n\n\n \n  \n    Amenity \n    R-squared \n  \n \n\n  \n    Washer \n    0.04750 \n  \n  \n    Dryer \n    0.04640 \n  \n  \n    Air conditioning \n    0.02640 \n  \n  \n    Coffee maker \n    0.02640 \n  \n  \n    Cooking basics \n    0.01150 \n  \n  \n    Dishes and silverware \n    0.00806 \n  \n  \n    Microwave \n    0.00509 \n  \n  \n    Heating \n    0.00150 \n  \n\n\n\n\n\nWe see that the top two amenities by R2 value are the washer and dryer. We can infer that these two amenities affect the price the most out of the list of eight extra amenities we started with, irrespective of which borough the listing is located in. We will test this in our multivariate analysis.\n\n\nWork-from-home criteria\nUpon analyzing the most frequently mentioned amenities in Airbnb listings in New York City, we observed that “dedicated workspace” appears in the top 20 amenities, which led us to think that work-from-home setups may impact price. In addition to a dedicated workspace, there are several other important amenities that Airbnb guests may be looking for in a WFH setup, including reliable high-speed internet, comfortable seating and good lighting, and a quiet environment. To identify listings that are WFH-appropriate, we established three criteria: 1) there is Wifi, 2) there is a dedicated workspace, and 3) the listing must be located in a quiet environment.\n\n\n\n\n\n\n\n\n\nWe see that Staten Island and the Bronx are the two boroughs with the highest proportion of listings with all three criteria met. Otherwise, the distribution of proportions is quite similar between boroughs. In other words, any impact WFH amenities have on price is likely to be borough-independent.\nTo figure out if satisfying all the WFH criteria makes a difference in price, we first group the listings by whether or not they satisfy all WFH criteria or not and calculated the median prices of each group. See Appendix 2D.\nWe indeed see that listings that satisfy all WFH criteria have a median price of $130, while listings that do not offer all the extra amenities have a median price of $124. To confirm that this is statistically significant, we can do a hypothesis testing. We will set a threshold value of 0.05.\n\\(H_0:\\eta_{satisfed}-\\eta_{not~satisfed}=0\\). The difference in the true median price of listings that satisfy all WFH criteria and those that do not is zero.\n\\(H_A:\\eta_{satisfed}-\\eta_{not~satisfed}>0\\). The difference in the true median price of listings that satisfy all WFH criteria and those that do not is greater than zero.\n\n\n\nWe observe a p-value of 0.003, which is less than the threshold value of 0.05. As such, we reject the null hypothesis in favor of the alternative hypothesis: the data provide convincing evidence that the median price of listings that satisfy all WFH criteria is higher than the median price of listings that do not.\nWhat we can do next is to calculate a 95% confidence interval to see how much of a price increase a host can expect if they were to include satisfy all WFH criteria.\n\n\n\nFrom our analysis, we are 95% confident that listings that satisfy all WFH criteria will have median prices that are between $3 to $11 higher than those that do not include all the extra amenities. This might not be too significant because the price difference is relatively small and may not justify the additional cost and effort required for hosts to satisfy all the WFH criteria.\nLet’s now run a linear regression between each criterion and price. By doing so, we learn how much variability in price is explained by whether a listing satisfies a criterion. See Appendix 2E for further analysis.\n\n\n\n\n\n\n\n \n  \n    Criteria \n    R-squared \n  \n \n\n  \n    Dedicated workspace \n    0.01390 \n  \n  \n    Quiet environment \n    0.00177 \n  \n  \n    Wifi \n    0.00065 \n  \n\n\n\n\n\nWe see that the top criterion by R2 value is dedicated workspace and the lowest criterion by R2 is Wifi. One reason for this might be the fact that Wifi is no longer a luxury, but a necessity, and having Wifi is no longer a differentiating factor. We can infer that, if a host wants to prioritize satisfying a WFH criterion, having a dedicated workspace would be the one to prioritize as it affects price the most out of the list of three WFH criteria."
  },
  {
    "objectID": "report.html#analysis-3-host-characteristics",
    "href": "report.html#analysis-3-host-characteristics",
    "title": "Analyzing Airbnb Data",
    "section": "Analysis 3: Host characteristics",
    "text": "Analysis 3: Host characteristics\nAnother point of interest when looking at Airbnb data is to see how different characteristics of the host—i.e., if they are a super host, have their identity verified, their communication review rating, etc.— might influence the price. We can start by isolating these host-adjacent variables and identify any trends that might exist. See Appendix 2F for further analysis.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe observe that nearly 24% of hosts are considered super-hosts and 84% have their identity verified. In terms of review scores, nearly 95% of hosts have an accuracy rating between 4.0 and 5.0, 90% have a cleanliness review score between 4.0 and 5.0, 96% have a check-in review score between 4.0 and 5.0, and 96% have a communication review score between 4.0 and 5.0. As for a host’s response rate, about 65% of hosts reply within an hour.\nTo get a better analysis of how these trends might drive listing prices, we can fit linear regression models across these six characteristics—i.e., host_is_superhost, host_identity_verified, review_scores_cleanliness, review_scores_communication, host_response_time, and host_acceptance_rate— to predict price. We will fit these models against logged price as well. After fitting these models, we get the following R2 values:\n\n\n\n\n \n  \n    Characteristic \n    R-squared \n  \n \n\n  \n    Host acceptance rate \n    0.06000 \n  \n  \n    Review cleanliness rating \n    0.02290 \n  \n  \n    Superhost \n    0.01210 \n  \n  \n    Review communication rating \n    0.00448 \n  \n  \n    Identity is verified \n    0.00357 \n  \n  \n    Host response time \n    0.00129 \n  \n\n\n\n\n\nWith an R2 value of 6% for host_acceptance_rate and 2.3% for review_scores_cleanliness, we can try hypothesis testing to determine the magnitude of predictability of these variables against price.\nWe can now begin hypothesis testing. Because the R2 values from the linear regression models for most host characteristics were marginal, we will focus our analysis on the host_acceptance_rate and review_scores_cleanliness models. We should note, however, that R2 values solely do not provide total insight into the correlation between variables, but instead indicate the amount of variability explained.\nWe can begin our hypothesis testing with host_acceptance_rate. By doing so, we can understand if the price is greater, on average, for listings under hosts with an acceptance rate of less than 51%. To test statistical significance, we will set a threshold value of 0.05.\n\\(H_0:\\eta_{~acceptance~rate~<~.51}-\\eta_{~acceptance~rate~>~.5}=0\\). The median price of listings whose hosts have acceptance rates of less than 51% is the same as the median price of listings whose hosts have acceptance rates of greater than 50%.\n\\(H_A:\\eta_{~acceptance~rate~<~.51}-\\eta_{~acceptance~rate~>~.5}>0\\). The median price of listings whose hosts have acceptance rates of less than 51% is greater than the median price of listings whose hosts have acceptance rates of greater than 50%.\n\n\n\nWe observe a p-value of 0, which is less than the threshold value of 0.05. As such, we reject the null hypothesis in favor of the alternative hypothesis. The data suggest that the median price of listings under hosts with an acceptance rate of less than 51%, on average, is higher than that of hosts with an acceptance rate above 50%. There may be several reasons for this. One reason might be that hosts with lower acceptance rates may be more experienced and have a better understanding of the market, or have better quality listings, enabling them to set higher prices for their listings.\nUsing the same process, we can hypothesize the effect of review_scores_cleanliness on price. Namely, we want to see if the median price of listings for hosts with a cleanliness review score between 4.0 and 5.0 is higher than that of hosts with a review less than or equal to 4.0.\n\\(H_0:\\eta_{~cleanliness~review~>~4.0}-\\eta_{~cleanliness~review~≤~4.0}=0\\). The median price of listings whose hosts have cleanliness reviews greater than 4.0 is the same as the median price of listings whose hosts have cleanliness reviews less than 4.0.\n\\(H_A:\\eta_{~cleanliness~review~>~4.0}-\\eta_{~cleanliness~review~≤~4.0}>0\\). The median price of listings whose hosts have cleanliness reviews greater than 4.0 is greater than the median price of listings whose hosts have cleanliness reviews less than 4.0.\n\n\n\nSimilar to the first hypothesis testing, we also observe a p-value of 0, which is less than the set threshold value of 0.05. As such, we reject the null hypothesis in favor of the alternative hypothesis. The data indicate that the median price of listings for hosts with a cleanliness review score between 4.0 and 5.0 is higher than that of hosts with a review less than or equal to 4.0."
  }
]